{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/style-dark.styl","path":"css/style-dark.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/img/bg-dark.jpg","path":"img/bg-dark.jpg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/share/css/share.styl","path":"share/css/share.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/share/js/social-share.js","path":"share/js/social-share.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.eot","path":"share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.svg","path":"share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/share/js/qrcode.js","path":"share/js/qrcode.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.woff","path":"share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.ttf","path":"share/fonts/iconfont.ttf","modified":1,"renderable":1}],"Cache":[{"_id":"themes/BlueLake/LICENSE","hash":"4c3927c82d0aa4fac5cdf945e07afe5e24335891","modified":1619072160024},{"_id":"themes/BlueLake/README.en.md","hash":"ea422f4065e29dee6993687013d209070ca35746","modified":1619072160024},{"_id":"themes/BlueLake/_config.yml","hash":"b1796043773a3ac200e2a479250a68fd807cdb04","modified":1619072203589},{"_id":"themes/BlueLake/README.md","hash":"cc3af0adf4e94a27e30397fda8717488265674dc","modified":1619072160024},{"_id":"themes/BlueLake/package.json","hash":"cdef382c442618b24305fd3e38ac7a3accf87aa9","modified":1619072160024},{"_id":"source/_posts/.DS_Store","hash":"8983992a301632f377142eb0de9b7125c7a7c97a","modified":1619851262080},{"_id":"source/_posts/ActiveMq.md","hash":"182f2d0eab3e2c5c0893aba52bb6ef36758feaea","modified":1619063006129},{"_id":"source/_posts/Alibaba Seata.md","hash":"6a204f9a3e9ac8a0b9223416633f6e9d4c3b2b1c","modified":1619063006129},{"_id":"source/_posts/BigDecimal加减乘除计算.md","hash":"d7049acea93d0ae797139fc84d3ff0f2980d3268","modified":1619063006129},{"_id":"source/_posts/Docker.md","hash":"1a1a5f802a7b01d2c73955e58ff01abc02d26a69","modified":1619063006130},{"_id":"source/_posts/ElasticSearch.md","hash":"499b90a6bb4ce15942d1ae884c9d9c0d053cd05e","modified":1619063006130},{"_id":"source/_posts/Excel解析.md","hash":"bd82d894e992e9890ed8355178770e3577b5ab0c","modified":1619063006130},{"_id":"source/_posts/GitLab基本使用.md","hash":"8c03dc89e08ede90af3681ef1225cca452cff060","modified":1619063006130},{"_id":"source/_posts/Hexo搭建个人博客.md","hash":"b3b8beb23319e9b7413032ca37d451fc26434804","modified":1619063006131},{"_id":"source/_posts/Dubbo.md","hash":"f0983e7b2852093d0f83571786946e9755e3a6b0","modified":1619063006130},{"_id":"source/_posts/Git.md","hash":"681a1f741751cc75edda2e9a85f4ae16d8e5e4bb","modified":1619076369634},{"_id":"source/_posts/Hibernate.md","hash":"f0664fa985cf57f3db4ad3d412a48976d9e66b98","modified":1619063006131},{"_id":"source/_posts/Jenkins.md","hash":"6201c6b55693755304e78ba09f69fb260782d0e0","modified":1619852231417},{"_id":"source/_posts/JAVA锁.md","hash":"1eb4600db6436f660c2e11df3191122c78b01dfb","modified":1619063006131},{"_id":"source/_posts/JVM性能调优.md","hash":"2985a66d161800b5a933f054a120420c68a6da81","modified":1619063006131},{"_id":"source/_posts/JdbcTemplate.md","hash":"08ebc934957c5d861c1359bb12912ec5b0beeba2","modified":1619063006131},{"_id":"source/_posts/Linux.md","hash":"021184b507089a29aa4ddce54a4d74b48543d808","modified":1619063006132},{"_id":"source/_posts/MongoDB.md","hash":"0637884b709f5af350790eda902bb602ed94d84e","modified":1619063006132},{"_id":"source/_posts/MySql.md","hash":"9ae3f398fb9682ea0d83db6e129b405dc4dc16c2","modified":1619063006132},{"_id":"source/_posts/Mybatis.md","hash":"6b1c8d6177b19394879ff1803e73f88a6a3d5631","modified":1619063006132},{"_id":"source/_posts/Nginx.md","hash":"97c7525d1aac2ff3f69cb6c09f18a6f1ce078afa","modified":1619063006132},{"_id":"source/_posts/Object类及其常用方法.md","hash":"126616e93edaf177593e8c307113690e7d0a6347","modified":1619063006132},{"_id":"source/_posts/RESTEasy.md","hash":"42067213f3a196ef0356b56af4fe022bb43505ad","modified":1619063006132},{"_id":"source/_posts/RESTful.md","hash":"aed98a7ceda051a074447805cad317dab5fa14a1","modified":1619063006133},{"_id":"source/_posts/RabbitMq.md","hash":"6eb828f874d104bcd897ff4f54243e95716e12e8","modified":1619063006133},{"_id":"source/_posts/SSL免密登陆服务器.md","hash":"4cfa5674a3a3394a4aca36b9b5150bdb00ee0089","modified":1619063006134},{"_id":"source/_posts/SpringAop.md","hash":"af801baba3d6166197743dec690e0444f1172f4e","modified":1619063006134},{"_id":"source/_posts/RocketMq.md","hash":"e8aadddf16e99abce33b3f9ee336fb9583aea058","modified":1619063006133},{"_id":"source/_posts/SpirngMVC异常处理.md","hash":"85645ccc3d1c96aa7b22b5aba26afb423dc60749","modified":1619063006134},{"_id":"source/_posts/SpringBoot.md","hash":"6c4415dc65c84439dcd154686e92b45dd6c9caa9","modified":1619063006134},{"_id":"source/_posts/SpringBoot集成TkMybatis.md","hash":"f3695d2185e0f553d5f4a2d3620ed791c9029436","modified":1619063006135},{"_id":"source/_posts/SpringCloud.md","hash":"a72e42360c51af4a70d4e935b77bf0c41ea10a2d","modified":1619063006135},{"_id":"source/_posts/SpringBoot集成Mybatis.md","hash":"1fbb2da8cfd6f5b1e4c152c989bff728fa882514","modified":1619063006135},{"_id":"source/_posts/SpringCloudAlibaba.md","hash":"7237ee9ea3d5de810569f8fe35b315381877ba87","modified":1619063006135},{"_id":"source/_posts/Swagger2.md","hash":"e507f1001fe5def9c104f586b7fd006588bf3715","modified":1619063006136},{"_id":"source/_posts/XML文档解析.md","hash":"c78f574af250b4eab8c6e6ba33d23de075c3054e","modified":1619063006136},{"_id":"source/_posts/iTerm2与远程服务器进行文件上传、下载.md","hash":"470ae672e78a43e00a34d8cc9a796a7657330b3b","modified":1619764863024},{"_id":"source/_posts/jar包后台运行.md","hash":"136dc3cc3718f06037e6e143887cb4f6bc284c61","modified":1619063006137},{"_id":"source/_posts/Zookeeper的高可用集群与leader选举策略.md","hash":"b9abb8965386d9e28a45aec92405bb69379143a6","modified":1619063006136},{"_id":"source/_posts/java多线程.md","hash":"07c321cf5d5dc5ef3b132b11947cdff206b2b0f2","modified":1619063006137},{"_id":"source/_posts/spring.md","hash":"4a7b3f7da78245d7a39902c391e6031241a002bc","modified":1619063006137},{"_id":"source/_posts/依赖私服.md","hash":"8cdd6869f720facce6c0eec3beca50432a60128c","modified":1619063006138},{"_id":"source/_posts/为什么MongoDB使用B-Tree-Mysql使用B-Tree.md","hash":"293066bff9196c66d91b9971d0258ec075aee25d","modified":1619087381359},{"_id":"source/_posts/yapi部署.md","hash":"262322dd83e250941c58f75f7bb1bd3570a6c771","modified":1619063006137},{"_id":"source/_posts/持续集成持续部署.md","hash":"a3e5689ecbfc96e5b151d969df613afdcab280eb","modified":1619063006138},{"_id":"source/_posts/数据库事务.md","hash":"7ead837e8305e1254cdd564d09a9bcb84609adf2","modified":1619063006138},{"_id":"source/_posts/分布式事务.md","hash":"62da570cfeb51ebe7c023ed908926a43bb484e76","modified":1619083174081},{"_id":"source/about/index.md","hash":"29855157dd20a15a54f18c0196bae1f162498a59","modified":1619063006139},{"_id":"source/_posts/原生JDBC.md","hash":"c0a8eb0feb04b5e5d6ea98744950952ff740dd7a","modified":1619076849436},{"_id":"themes/BlueLake/.git/FETCH_HEAD","hash":"b8b96385f02e354c6dd87612518c2e417f3aa4ea","modified":1619065485126},{"_id":"themes/BlueLake/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1619065485128},{"_id":"themes/BlueLake/.git/config","hash":"05165d804714e9c1a0e5d4a99a95a77f34d4fac6","modified":1619065485128},{"_id":"themes/BlueLake/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1619065485129},{"_id":"themes/BlueLake/.git/index","hash":"8e4372fe2e7876807f15f1dfe1bbe6fc572ea093","modified":1619065631730},{"_id":"themes/BlueLake/.git/packed-refs","hash":"694d538e620ac540991d0cb36668c3bd8460e9ae","modified":1619065485160},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"a57b9b768346adfe1c1553c4b727d5c113a52480","modified":1619065485165},{"_id":"themes/BlueLake/languages/en.yml","hash":"fe087d478a81ffc15f93f2295bc2b6f49a149c3d","modified":1619065485165},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"fff49dfae21808bb1edd74dfe4f14c457b64c191","modified":1619065485165},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"85f06e2ea9a45bb55761b29cda4487f782557b2b","modified":1619065485165},{"_id":"themes/BlueLake/languages/tr.yml","hash":"47d1dfd33fb1f0acbb1dfd400854d265ae8ccd45","modified":1619065485166},{"_id":"themes/BlueLake/languages/ko.yml","hash":"bd3c4058a43a0f6e239f360261f3260c87c185f0","modified":1619065485166},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"b388d0e44084026dedaf4ffdf7536e06bc8b37a8","modified":1619065485166},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"9a7ffb9f16af9fdca51d818e4fd2eb9f7e8ba9cf","modified":1619065485167},{"_id":"themes/BlueLake/layout/base.jade","hash":"fd0d4e3878e48c5aa40bb1946703b9543fb5d3c7","modified":1619065485181},{"_id":"themes/BlueLake/layout/archive.jade","hash":"98d9fb812edbc180878fdadb65bc38499eef2cc4","modified":1619065485180},{"_id":"themes/BlueLake/layout/index.jade","hash":"6406182f71d0f36757e91c5ec999f244c1f83c68","modified":1619065485182},{"_id":"themes/BlueLake/layout/category.jade","hash":"9f3a9f1d6f0bbad258b308ad8d49128c05b422cf","modified":1619065485181},{"_id":"themes/BlueLake/layout/page.jade","hash":"415404398931d98db28bff723886b07dcb8bbbc3","modified":1619065485183},{"_id":"themes/BlueLake/layout/post.jade","hash":"44ec724cc0fa34447fc2258e7f0d9739c2365db0","modified":1619065485183},{"_id":"themes/BlueLake/layout/tag.jade","hash":"50c7af7565751db5d7672beb434768885fb224cb","modified":1619065485184},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1619065485186},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1619065485189},{"_id":"themes/BlueLake/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1619065485131},{"_id":"themes/BlueLake/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1619065485132},{"_id":"themes/BlueLake/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1619065485133},{"_id":"themes/BlueLake/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1619065485134},{"_id":"themes/BlueLake/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1619065485133},{"_id":"themes/BlueLake/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1619065485134},{"_id":"themes/BlueLake/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1619065485135},{"_id":"themes/BlueLake/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1619065485135},{"_id":"themes/BlueLake/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1619065485136},{"_id":"themes/BlueLake/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1619065485136},{"_id":"themes/BlueLake/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1619065485137},{"_id":"themes/BlueLake/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1619065485139},{"_id":"themes/BlueLake/.git/logs/HEAD","hash":"99f85982a586968227776ce306f80fa1c9acdf62","modified":1619065485139},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"74a7f795ac83813ffacd4f6db01f2fc6fa94e967","modified":1619065485167},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"3fa65886665e8165640d22ede8dd3b06a0554583","modified":1619065485168},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"21d05990aa5a19632f9ed51085ef7727adeea17a","modified":1619065485168},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"f95aa1d48752fe47046c0ba89199ad765351b510","modified":1619065485168},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"ba9f855c30ab6d7d00639722fba873bfc346b793","modified":1619065485169},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1619065485170},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1619065485169},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1619065485170},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"4f2fba7fcb39a6bf70ff04dad9a3dab2563b21e7","modified":1619065485171},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"44de0851108bca8404f5614d5101c7a7ee67754d","modified":1619065485172},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1619065485172},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"c632919f04194dcf6e0e8ccc572554a859aa922b","modified":1619065485173},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"6e587b7d254d0d92b959ba58262f5e81b618eba2","modified":1619065485175},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"0107affa0c6b22e09546fcf82a6f71ba2dd1e315","modified":1619065485176},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"9af40206a525db1cb9761fa6facb36332057acf3","modified":1619065485176},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"164a83faaf92ec19d268fd303bf6e30348ddef5c","modified":1619065485177},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"c6f778d5d2f13bacbd83a56a9e9faaeac0dda0ed","modified":1619065485178},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"c75308c2b72456cfb98cb80f280c66e58f171705","modified":1619065485179},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"4e90378aa88c5694126dc8ea5bed3bb2f8642e53","modified":1619065485179},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"d43daaebaf10f5f758b1ea36d12d6cff8fe08dd9","modified":1619065485187},{"_id":"themes/BlueLake/source/css/highlight-dark.styl","hash":"b4034ca34ec6152f7f8862c424c22973c00fdda2","modified":1619065485187},{"_id":"themes/BlueLake/source/css/style.styl","hash":"ebb455ffaf3457736916406057b79be0962c7f51","modified":1619065485189},{"_id":"themes/BlueLake/source/css/style-dark.styl","hash":"1fa6ed7106c67540d2ccdc8083acc51866a6e717","modified":1619065485188},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1619065485192},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1619065485190},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"1e90b305731d47a2852b6a89eaa45dfb1b0a9726","modified":1619065485191},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"f438260565a76464ca481fe40ac487ef862a5bfa","modified":1619065485195},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"60d2707073c84116ae60d6e4337657550627bcd8","modified":1619065485195},{"_id":"themes/BlueLake/source/js/totop.js","hash":"46133d51f5aa18cfa8c70763a2887333a86ae177","modified":1619065485196},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1619065485191},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1619065485194},{"_id":"themes/BlueLake/.git/objects/08/8876b1b413075d9526d4afbe6cb6f502eaba37","hash":"9c1b13e15bf43e2728198706e8fbc34f477eea59","modified":1619065615725},{"_id":"themes/BlueLake/.git/objects/02/d18d80bf7b126a7c5778decc9aa4d906fa174c","hash":"7d1c051b28cd680fa12da506891b911af2fed42f","modified":1619065485144},{"_id":"themes/BlueLake/.git/objects/12/588c15961aad97be670b42f72f2f862b6a60ba","hash":"65142983fcf0ed6dd223b7f552c4a559afc3a401","modified":1619065485146},{"_id":"themes/BlueLake/.git/objects/0d/4cf0b7661746bf82dbc23472927cafc253f251","hash":"eda3f40b158c1740374d5477254a8d3fbba55445","modified":1619065485145},{"_id":"themes/BlueLake/.git/objects/4c/424b959bd9e09721131ebb0afb51838edbe239","hash":"820bb9b197b85067ed32dc3edfc46034b496c477","modified":1619065485149},{"_id":"themes/BlueLake/.git/objects/20/a49c44648d1f6ad55eb57a2be7d3d0674b2778","hash":"317130bc9169afdabc27cdd91f951c3dc7c55c50","modified":1619065485147},{"_id":"themes/BlueLake/.git/objects/3c/8b8bd1651079e75fcfd44eb729f90393608dcd","hash":"6ab7c9b5ff1ced9bc726472babc7fdfa1cf71f99","modified":1619065485149},{"_id":"themes/BlueLake/.git/objects/22/348f40065a230579d1586643a1c67c16ccaba1","hash":"6cea5579ca2cd452db4417d822e5431b1f847c9c","modified":1619065485147},{"_id":"themes/BlueLake/.git/objects/38/38b1ddebe7148b7c7ebc71d3eb9fe5bb65bf95","hash":"3601e30c48a4f1fe707f63a53ecbc602ae9cd236","modified":1619065485148},{"_id":"themes/BlueLake/.git/objects/50/19469bd66203950aaf083ab670587f25d4de2b","hash":"e484cfd7533fc63cb94ec460a0f8458cd469d3e6","modified":1619065485150},{"_id":"themes/BlueLake/.git/objects/85/0d7895c05fb5a67abe7897cdeb703f6f664a23","hash":"89d77f38a4d1175659e2fda370d2472aad9881cb","modified":1619065485153},{"_id":"themes/BlueLake/.git/objects/61/427674653c010a77284dfd24f62b888c9f1686","hash":"f37799faa74168251300953c10161bcc63f4e1f4","modified":1619065485151},{"_id":"themes/BlueLake/.git/objects/96/b1cc8f530d6a28650ca3c9a80b6c2e78b2f955","hash":"8f2837abc999c641662070f599c710b3e0b46791","modified":1619065485154},{"_id":"themes/BlueLake/.git/objects/96/38e9ec586e38638cf2461dfdf1ef5665871167","hash":"8c11f05b5ad82be8290f31fe3c5f127d79213cd9","modified":1619065485154},{"_id":"themes/BlueLake/.git/objects/83/32dc784d3bcec5c83095b63690490cc9a13271","hash":"04994ff42e6f9b38530de53ba805fb7728b8e796","modified":1619065485152},{"_id":"themes/BlueLake/.git/objects/79/002341dc7a566c9afd4ab90a434364187e9a37","hash":"385dc8fc51fdea09a7dd1101f51d8bb179d7e84e","modified":1619065485152},{"_id":"themes/BlueLake/.git/objects/bc/e006f4495c1b9b1cfe3b14116bb4e5f332ce33","hash":"8650168bfa43b481c9861772ca31de8f94443e54","modified":1619065485155},{"_id":"themes/BlueLake/.git/objects/b6/6a78ffb4d62c7780908ceba148856e610d4abb","hash":"78165eebbc7077f9511a80c14dae76d5e10bbceb","modified":1619065485154},{"_id":"themes/BlueLake/.git/objects/c8/31b06e9e508fdae851d42e3552fb6372884f8b","hash":"9cdf31c76e231a67cf8e65b925c28290989f5cbf","modified":1619065485156},{"_id":"themes/BlueLake/.git/objects/9c/c82cd6e49ff0c26b24ef97eee89f6349ef7611","hash":"0ff535f639479c650573d8340dd428a266275db4","modified":1619065631729},{"_id":"themes/BlueLake/.git/objects/c3/4353bf8332f5d4305d0d5169cdee1b69e38601","hash":"935c58a0f25a45b2c57c3b78fa8c5ae6f55c3a52","modified":1619065485156},{"_id":"themes/BlueLake/.git/objects/f3/f9535985e9b8535da9cadfb83d690f763c19d8","hash":"121f0ec162ecf5a41355aaffd5de4743ccf6ae6e","modified":1619065485157},{"_id":"themes/BlueLake/.git/objects/pack/pack-e27f22e0efa4a83b560f20c557fca0c174562056.idx","hash":"97a1a23c53eb4f706407080aa4e180abe92ece77","modified":1619065485158},{"_id":"themes/BlueLake/.git/refs/heads/master","hash":"fd5f052a0af1ce0aa37fafd96d68e948f71028d6","modified":1619065485161},{"_id":"themes/BlueLake/.git/objects/f9/d6ba9a6301a27bcb6d611d9bbc3b8ccb1b2ce3","hash":"81c563ba87d7d956235a9373023e151e780f9a92","modified":1619065628238},{"_id":"themes/BlueLake/source/img/bg-dark.jpg","hash":"0d2c406f1a9b3b74d6defda398239b0113737787","modified":1619065485193},{"_id":"themes/BlueLake/source/share/css/share.styl","hash":"c3e517e8a14c3e07f9ae889186a051b0aa6c9a67","modified":1619065485197},{"_id":"themes/BlueLake/source/share/js/social-share.js","hash":"e119a32a8568107536d80c13553fb4550eeaaac7","modified":1619065485202},{"_id":"themes/BlueLake/source/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1619065485199},{"_id":"themes/BlueLake/source/share/fonts/iconfont.svg","hash":"d09385bc625d215e5f7ebf4a6a3efca435fb901d","modified":1619065485199},{"_id":"themes/BlueLake/source/share/js/qrcode.js","hash":"d19f999c1b0dfc53bbe3b7db59c46aa62d49d573","modified":1619065485202},{"_id":"themes/BlueLake/source/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1619065485200},{"_id":"themes/BlueLake/source/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1619065485200},{"_id":"themes/BlueLake/.git/logs/refs/heads/master","hash":"99f85982a586968227776ce306f80fa1c9acdf62","modified":1619065485141},{"_id":"themes/BlueLake/.git/refs/remotes/origin/master","hash":"eb8b1d2144c7280edc23b83168b7a58958b9d54d","modified":1619065485162},{"_id":"themes/BlueLake/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1619065485161},{"_id":"themes/BlueLake/.git/logs/refs/remotes/origin/master","hash":"395512d31accd353e2608123a96a3fb2271f95e9","modified":1619065485143},{"_id":"themes/BlueLake/.git/logs/refs/remotes/origin/HEAD","hash":"99f85982a586968227776ce306f80fa1c9acdf62","modified":1619065485142},{"_id":"themes/BlueLake/.git/objects/pack/pack-e27f22e0efa4a83b560f20c557fca0c174562056.pack","hash":"594672f797615a5c1c555559e357ab6cddb6e465","modified":1619065485159}],"Category":[],"Data":[],"Page":[{"title":"潜水的企鹅","date":"2019-07-14T11:22:09.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: '潜水的企鹅'\ndate: 2019-07-14 19:22:09\n---\n","updated":"2021-04-22T03:43:26.139Z","path":"about/index.html","comments":1,"layout":"page","_id":"cko9xcz8q001gko9bbx1gt0ez","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ActiveMq","date":"2019-08-15T02:48:24.000Z","_content":"","source":"_posts/ActiveMq.md","raw":"---\ntitle: ActiveMq\ndate: 2019-08-15 10:48:24\ntags:\n---\n","slug":"ActiveMq","published":1,"updated":"2021-04-22T03:43:26.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcyru0000ko9b9nv04h7j","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"alibab","title":"Alibaba Seata","date":"2020-01-19T13:29:12.000Z","_content":"","source":"_posts/Alibaba Seata.md","raw":"---\nlayout: alibab\ntitle: Alibaba Seata\ndate: 2020-01-19 21:29:12\ntags:\n---\n","slug":"Alibaba Seata","published":1,"updated":"2021-04-22T03:43:26.129Z","comments":1,"photos":[],"link":"","_id":"cko9xcyry0001ko9ba9np4f7d","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"BigDecimal加减乘除计算","date":"2019-09-02T03:08:54.000Z","_content":"\n# 简述\n`java.math.BigDecimal`:不可变的、任意精度的有符号十进制数。`BigDecimal` 由任意精度的整数非标度值(unscaledValue)和32位的整数标度(scale)组成。其值为该数的非标度值乘以10的负scale次幂，即为(unscaledValue * 10-scale)\n\n# 常用方法\n\n在银行、帐户、计费等领域，BigDecimal提供了精确的数值计算。对Bigdecimal类型值进行加减乘除绝对值的运算，其实就是Bigdecimal的类方法的一些调用。\n\n- 加法：add()函数\n- 减法：subtract()函数\n- 乘法：multipy()函数\n- 除法：divide()函数\n- 绝对值：abs()函数\n\n```java\n        BigDecimal num1 = new BigDecimal(0.005);\n        BigDecimal num2 = new BigDecimal(1000000);\n        //尽量用字符串的形式初始化\n        BigDecimal num12 = new BigDecimal(\"0.005\");\n        BigDecimal num22 = new BigDecimal(\"1000000\");\n\n        //加法\n        BigDecimal result1 = num1.add(num2);\n        BigDecimal result12 = num12.add(num22);\n \n        //减法\n        BigDecimal result2 = num1.subtract(num2);\n        BigDecimal result22 = num12.subtract(num22);\n \n        //乘法\n        BigDecimal result3 = num1.multiply(num2);\n        BigDecimal result32 = num12.multiply(num22);\n \n        //绝对值\n        BigDecimal result4 = num3.abs();\n        BigDecimal result42 = num32.abs();\n \n        //除法\n        BigDecimal result5 = num2.divide(num1,20,BigDecimal.ROUND_HALF_UP);\n        BigDecimal result52 = num22.divide(num12,20,BigDecimal.ROUND_HALF_UP);\n```\n\n# 注意\n使用BigDecimal类构造方法传入double类型时，计算的结果也是不精确的。\n\n\n因为不是所有的浮点数都能够被精确的表示成一个double 类型值，因此它会被表示成与它最接近的 double 类型的值。必须改用传入String的构造方法。这一点在BigDecimal类的构造方法注释中有说明。\n\n**除法divide()**\n使用除法函数在divide的时候要设置各种参数，要有除数、精确的小数位数和舍入模式，不然会出现报错\n```java\n                                //除数   精确位数    舍入模式\nBigDecimal res1 = Dividend.divide(divisor,3,BigDecimal.ROUND_UP);\n```\n\n**舍入模式**\n\n- ROUND_UP\n舍入远离零的舍入模式。在丢弃非零部分之前始终增加数字(始终对非零舍弃部分前面的数字加1)。注意，此舍入模式始终不会减少计算值的大小。\n\n- ROUND_DOWN\n接近零的舍入模式。在丢弃某部分之前始终不增加数字(从不对舍弃部分前面的数字加1，即截短)。注意，此舍入模式始终不会增加计算值的大小。\n\n- ROUND_CEILING\n接近正无穷大的舍入模式。如果 BigDecimal 为正，则舍入行为与 ROUND_UP 相同；如果为负，则舍入行为与 ROUND_DOWN 相同。注意，此舍入模式始终不会减少计算值。\n\n- ROUND_FLOOR\n接近负无穷大的舍入模式。如果 BigDecimal 为正，则舍入行为与 ROUND_DOWN 相同；如果为负，则舍入行为与 ROUND_UP 相同。注意，此舍入模式始终不会增加计算值。\n\n- ROUND_HALF_UP\n向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。如果舍弃部分 >= 0.5，则舍入行为与 ROUND_UP 相同;否则舍入行为与 ROUND_DOWN 相同。注意，这是我们大多数人在小学时就学过的舍入模式(四舍五入)。\n\n- ROUND_HALF_DOWN\n向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为上舍入的舍入模式。如果舍弃部分 > 0.5，则舍入行为与 ROUND_UP 相同;否则舍入行为与 ROUND_DOWN 相同(五舍六入)。\n\n- ROUND_HALF_EVEN\n向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。如果舍弃部分左边的数字为奇数，则舍入行为与 ROUND_HALF_UP 相同；如果为偶数，则舍入行为与 ROUND_HALF_DOWN 相同。注意，在重复进行一系列计算时，此舍入模式可以将累加错误减到最小。此舍入模式也称为“银行家舍入法”，主要在美国使用。四舍六入，五分两种情况。如果前一位为奇数，则入位，否则舍去。","source":"_posts/BigDecimal加减乘除计算.md","raw":"---\ntitle: BigDecimal加减乘除计算\ndate: 2019-09-02 11:08:54\ntags:\n    - java\n---\n\n# 简述\n`java.math.BigDecimal`:不可变的、任意精度的有符号十进制数。`BigDecimal` 由任意精度的整数非标度值(unscaledValue)和32位的整数标度(scale)组成。其值为该数的非标度值乘以10的负scale次幂，即为(unscaledValue * 10-scale)\n\n# 常用方法\n\n在银行、帐户、计费等领域，BigDecimal提供了精确的数值计算。对Bigdecimal类型值进行加减乘除绝对值的运算，其实就是Bigdecimal的类方法的一些调用。\n\n- 加法：add()函数\n- 减法：subtract()函数\n- 乘法：multipy()函数\n- 除法：divide()函数\n- 绝对值：abs()函数\n\n```java\n        BigDecimal num1 = new BigDecimal(0.005);\n        BigDecimal num2 = new BigDecimal(1000000);\n        //尽量用字符串的形式初始化\n        BigDecimal num12 = new BigDecimal(\"0.005\");\n        BigDecimal num22 = new BigDecimal(\"1000000\");\n\n        //加法\n        BigDecimal result1 = num1.add(num2);\n        BigDecimal result12 = num12.add(num22);\n \n        //减法\n        BigDecimal result2 = num1.subtract(num2);\n        BigDecimal result22 = num12.subtract(num22);\n \n        //乘法\n        BigDecimal result3 = num1.multiply(num2);\n        BigDecimal result32 = num12.multiply(num22);\n \n        //绝对值\n        BigDecimal result4 = num3.abs();\n        BigDecimal result42 = num32.abs();\n \n        //除法\n        BigDecimal result5 = num2.divide(num1,20,BigDecimal.ROUND_HALF_UP);\n        BigDecimal result52 = num22.divide(num12,20,BigDecimal.ROUND_HALF_UP);\n```\n\n# 注意\n使用BigDecimal类构造方法传入double类型时，计算的结果也是不精确的。\n\n\n因为不是所有的浮点数都能够被精确的表示成一个double 类型值，因此它会被表示成与它最接近的 double 类型的值。必须改用传入String的构造方法。这一点在BigDecimal类的构造方法注释中有说明。\n\n**除法divide()**\n使用除法函数在divide的时候要设置各种参数，要有除数、精确的小数位数和舍入模式，不然会出现报错\n```java\n                                //除数   精确位数    舍入模式\nBigDecimal res1 = Dividend.divide(divisor,3,BigDecimal.ROUND_UP);\n```\n\n**舍入模式**\n\n- ROUND_UP\n舍入远离零的舍入模式。在丢弃非零部分之前始终增加数字(始终对非零舍弃部分前面的数字加1)。注意，此舍入模式始终不会减少计算值的大小。\n\n- ROUND_DOWN\n接近零的舍入模式。在丢弃某部分之前始终不增加数字(从不对舍弃部分前面的数字加1，即截短)。注意，此舍入模式始终不会增加计算值的大小。\n\n- ROUND_CEILING\n接近正无穷大的舍入模式。如果 BigDecimal 为正，则舍入行为与 ROUND_UP 相同；如果为负，则舍入行为与 ROUND_DOWN 相同。注意，此舍入模式始终不会减少计算值。\n\n- ROUND_FLOOR\n接近负无穷大的舍入模式。如果 BigDecimal 为正，则舍入行为与 ROUND_DOWN 相同；如果为负，则舍入行为与 ROUND_UP 相同。注意，此舍入模式始终不会增加计算值。\n\n- ROUND_HALF_UP\n向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。如果舍弃部分 >= 0.5，则舍入行为与 ROUND_UP 相同;否则舍入行为与 ROUND_DOWN 相同。注意，这是我们大多数人在小学时就学过的舍入模式(四舍五入)。\n\n- ROUND_HALF_DOWN\n向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为上舍入的舍入模式。如果舍弃部分 > 0.5，则舍入行为与 ROUND_UP 相同;否则舍入行为与 ROUND_DOWN 相同(五舍六入)。\n\n- ROUND_HALF_EVEN\n向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。如果舍弃部分左边的数字为奇数，则舍入行为与 ROUND_HALF_UP 相同；如果为偶数，则舍入行为与 ROUND_HALF_DOWN 相同。注意，在重复进行一系列计算时，此舍入模式可以将累加错误减到最小。此舍入模式也称为“银行家舍入法”，主要在美国使用。四舍六入，五分两种情况。如果前一位为奇数，则入位，否则舍去。","slug":"BigDecimal加减乘除计算","published":1,"updated":"2021-04-22T03:43:26.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcys00002ko9belulpzju","content":"<h1 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h1><p><code>java.math.BigDecimal</code>:不可变的、任意精度的有符号十进制数。<code>BigDecimal</code> 由任意精度的整数非标度值(unscaledValue)和32位的整数标度(scale)组成。其值为该数的非标度值乘以10的负scale次幂，即为(unscaledValue * 10-scale)</p>\n<h1 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h1><p>在银行、帐户、计费等领域，BigDecimal提供了精确的数值计算。对Bigdecimal类型值进行加减乘除绝对值的运算，其实就是Bigdecimal的类方法的一些调用。</p>\n<ul>\n<li>加法：add()函数</li>\n<li>减法：subtract()函数</li>\n<li>乘法：multipy()函数</li>\n<li>除法：divide()函数</li>\n<li>绝对值：abs()函数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal num1 = <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">0.005</span>);</span><br><span class=\"line\">BigDecimal num2 = <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">1000000</span>);</span><br><span class=\"line\"><span class=\"comment\">//尽量用字符串的形式初始化</span></span><br><span class=\"line\">BigDecimal num12 = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"0.005\"</span>);</span><br><span class=\"line\">BigDecimal num22 = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"1000000\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//加法</span></span><br><span class=\"line\">BigDecimal result1 = num1.add(num2);</span><br><span class=\"line\">BigDecimal result12 = num12.add(num22);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//减法</span></span><br><span class=\"line\">BigDecimal result2 = num1.subtract(num2);</span><br><span class=\"line\">BigDecimal result22 = num12.subtract(num22);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//乘法</span></span><br><span class=\"line\">BigDecimal result3 = num1.multiply(num2);</span><br><span class=\"line\">BigDecimal result32 = num12.multiply(num22);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//绝对值</span></span><br><span class=\"line\">BigDecimal result4 = num3.abs();</span><br><span class=\"line\">BigDecimal result42 = num32.abs();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//除法</span></span><br><span class=\"line\">BigDecimal result5 = num2.divide(num1,<span class=\"number\">20</span>,BigDecimal.ROUND_HALF_UP);</span><br><span class=\"line\">BigDecimal result52 = num22.divide(num12,<span class=\"number\">20</span>,BigDecimal.ROUND_HALF_UP);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><p>使用BigDecimal类构造方法传入double类型时，计算的结果也是不精确的。</p>\n<p>因为不是所有的浮点数都能够被精确的表示成一个double 类型值，因此它会被表示成与它最接近的 double 类型的值。必须改用传入String的构造方法。这一点在BigDecimal类的构造方法注释中有说明。</p>\n<p><strong>除法divide()</strong><br>使用除法函数在divide的时候要设置各种参数，要有除数、精确的小数位数和舍入模式，不然会出现报错</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                <span class=\"comment\">//除数   精确位数    舍入模式</span></span><br><span class=\"line\">BigDecimal res1 = Dividend.divide(divisor,<span class=\"number\">3</span>,BigDecimal.ROUND_UP);</span><br></pre></td></tr></table></figure>\n\n<p><strong>舍入模式</strong></p>\n<ul>\n<li><p>ROUND_UP<br>舍入远离零的舍入模式。在丢弃非零部分之前始终增加数字(始终对非零舍弃部分前面的数字加1)。注意，此舍入模式始终不会减少计算值的大小。</p>\n</li>\n<li><p>ROUND_DOWN<br>接近零的舍入模式。在丢弃某部分之前始终不增加数字(从不对舍弃部分前面的数字加1，即截短)。注意，此舍入模式始终不会增加计算值的大小。</p>\n</li>\n<li><p>ROUND_CEILING<br>接近正无穷大的舍入模式。如果 BigDecimal 为正，则舍入行为与 ROUND_UP 相同；如果为负，则舍入行为与 ROUND_DOWN 相同。注意，此舍入模式始终不会减少计算值。</p>\n</li>\n<li><p>ROUND_FLOOR<br>接近负无穷大的舍入模式。如果 BigDecimal 为正，则舍入行为与 ROUND_DOWN 相同；如果为负，则舍入行为与 ROUND_UP 相同。注意，此舍入模式始终不会增加计算值。</p>\n</li>\n<li><p>ROUND_HALF_UP<br>向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。如果舍弃部分 &gt;= 0.5，则舍入行为与 ROUND_UP 相同;否则舍入行为与 ROUND_DOWN 相同。注意，这是我们大多数人在小学时就学过的舍入模式(四舍五入)。</p>\n</li>\n<li><p>ROUND_HALF_DOWN<br>向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为上舍入的舍入模式。如果舍弃部分 &gt; 0.5，则舍入行为与 ROUND_UP 相同;否则舍入行为与 ROUND_DOWN 相同(五舍六入)。</p>\n</li>\n<li><p>ROUND_HALF_EVEN<br>向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。如果舍弃部分左边的数字为奇数，则舍入行为与 ROUND_HALF_UP 相同；如果为偶数，则舍入行为与 ROUND_HALF_DOWN 相同。注意，在重复进行一系列计算时，此舍入模式可以将累加错误减到最小。此舍入模式也称为“银行家舍入法”，主要在美国使用。四舍六入，五分两种情况。如果前一位为奇数，则入位，否则舍去。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h1><p><code>java.math.BigDecimal</code>:不可变的、任意精度的有符号十进制数。<code>BigDecimal</code> 由任意精度的整数非标度值(unscaledValue)和32位的整数标度(scale)组成。其值为该数的非标度值乘以10的负scale次幂，即为(unscaledValue * 10-scale)</p>\n<h1 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h1><p>在银行、帐户、计费等领域，BigDecimal提供了精确的数值计算。对Bigdecimal类型值进行加减乘除绝对值的运算，其实就是Bigdecimal的类方法的一些调用。</p>\n<ul>\n<li>加法：add()函数</li>\n<li>减法：subtract()函数</li>\n<li>乘法：multipy()函数</li>\n<li>除法：divide()函数</li>\n<li>绝对值：abs()函数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal num1 = <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">0.005</span>);</span><br><span class=\"line\">BigDecimal num2 = <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">1000000</span>);</span><br><span class=\"line\"><span class=\"comment\">//尽量用字符串的形式初始化</span></span><br><span class=\"line\">BigDecimal num12 = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"0.005\"</span>);</span><br><span class=\"line\">BigDecimal num22 = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"1000000\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//加法</span></span><br><span class=\"line\">BigDecimal result1 = num1.add(num2);</span><br><span class=\"line\">BigDecimal result12 = num12.add(num22);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//减法</span></span><br><span class=\"line\">BigDecimal result2 = num1.subtract(num2);</span><br><span class=\"line\">BigDecimal result22 = num12.subtract(num22);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//乘法</span></span><br><span class=\"line\">BigDecimal result3 = num1.multiply(num2);</span><br><span class=\"line\">BigDecimal result32 = num12.multiply(num22);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//绝对值</span></span><br><span class=\"line\">BigDecimal result4 = num3.abs();</span><br><span class=\"line\">BigDecimal result42 = num32.abs();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//除法</span></span><br><span class=\"line\">BigDecimal result5 = num2.divide(num1,<span class=\"number\">20</span>,BigDecimal.ROUND_HALF_UP);</span><br><span class=\"line\">BigDecimal result52 = num22.divide(num12,<span class=\"number\">20</span>,BigDecimal.ROUND_HALF_UP);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><p>使用BigDecimal类构造方法传入double类型时，计算的结果也是不精确的。</p>\n<p>因为不是所有的浮点数都能够被精确的表示成一个double 类型值，因此它会被表示成与它最接近的 double 类型的值。必须改用传入String的构造方法。这一点在BigDecimal类的构造方法注释中有说明。</p>\n<p><strong>除法divide()</strong><br>使用除法函数在divide的时候要设置各种参数，要有除数、精确的小数位数和舍入模式，不然会出现报错</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                <span class=\"comment\">//除数   精确位数    舍入模式</span></span><br><span class=\"line\">BigDecimal res1 = Dividend.divide(divisor,<span class=\"number\">3</span>,BigDecimal.ROUND_UP);</span><br></pre></td></tr></table></figure>\n\n<p><strong>舍入模式</strong></p>\n<ul>\n<li><p>ROUND_UP<br>舍入远离零的舍入模式。在丢弃非零部分之前始终增加数字(始终对非零舍弃部分前面的数字加1)。注意，此舍入模式始终不会减少计算值的大小。</p>\n</li>\n<li><p>ROUND_DOWN<br>接近零的舍入模式。在丢弃某部分之前始终不增加数字(从不对舍弃部分前面的数字加1，即截短)。注意，此舍入模式始终不会增加计算值的大小。</p>\n</li>\n<li><p>ROUND_CEILING<br>接近正无穷大的舍入模式。如果 BigDecimal 为正，则舍入行为与 ROUND_UP 相同；如果为负，则舍入行为与 ROUND_DOWN 相同。注意，此舍入模式始终不会减少计算值。</p>\n</li>\n<li><p>ROUND_FLOOR<br>接近负无穷大的舍入模式。如果 BigDecimal 为正，则舍入行为与 ROUND_DOWN 相同；如果为负，则舍入行为与 ROUND_UP 相同。注意，此舍入模式始终不会增加计算值。</p>\n</li>\n<li><p>ROUND_HALF_UP<br>向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。如果舍弃部分 &gt;= 0.5，则舍入行为与 ROUND_UP 相同;否则舍入行为与 ROUND_DOWN 相同。注意，这是我们大多数人在小学时就学过的舍入模式(四舍五入)。</p>\n</li>\n<li><p>ROUND_HALF_DOWN<br>向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为上舍入的舍入模式。如果舍弃部分 &gt; 0.5，则舍入行为与 ROUND_UP 相同;否则舍入行为与 ROUND_DOWN 相同(五舍六入)。</p>\n</li>\n<li><p>ROUND_HALF_EVEN<br>向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。如果舍弃部分左边的数字为奇数，则舍入行为与 ROUND_HALF_UP 相同；如果为偶数，则舍入行为与 ROUND_HALF_DOWN 相同。注意，在重复进行一系列计算时，此舍入模式可以将累加错误减到最小。此舍入模式也称为“银行家舍入法”，主要在美国使用。四舍六入，五分两种情况。如果前一位为奇数，则入位，否则舍去。</p>\n</li>\n</ul>\n"},{"title":"Docker","date":"2019-08-15T02:42:23.000Z","_content":"\n# Docker 引擎\n\n**Docker引擎是一个客户服务器(c/s)应用程序，主要组件：**\n\n- 一种服务器，它是一种称为守护进程并且长时间运行的程序。\n- REST API用于指定程序可以用来与守护进程通信的接口，并指示它做什么。\n- 一个有命令行界面 (CLI) 工具的客户端。\n![avatar](https://414706657.oss-cn-shenzhen.aliyuncs.com/psb.png)\n\n--------------------- \n\n## Docker 系统架构\n\n- Docker 使用客户端-服务器 (C/S) 架构模式，使用远程 API 来管理和创建 Docker 容器。\n- Docker 容器通过 Docker 镜像来创建。\n- 容器与镜像的关系类似于面向对象编程中的对象与类。\n\nDocker | 面向对象 \n:-: | :- \n容器 | 对象\n镜像 | 类\n\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/psb_1.png)\n\n--------------------- \n\n标题 | 说明 \n:-: | :- \n镜像</br>(Images)|Docker 镜像是用于创建 Docker 容器的模板。\n容器</br>(Container)|容器是独立运行的一个或一组应用。\n客户端</br>(Client)|Docker 客户端通过命令行或者其他工具使用 Docker API (https://docs.docker.com/reference/api/docker_remote_api) 与 Docker 的守护进程通信。\n主机</br>(Host)|一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。\n仓库</br>(Registry)|Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(https://hub.docker.com) 提供了庞大的镜像集合供使用。\nDocker Machine|Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。\n\n--------------------- \n\n## Docker 镜像\n\nDocker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。\n\n#### 分层存储\n- 镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。\n- 镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。\n- 分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。\n\n\n#### 镜像操作\n指令 | 说明 \n:-: | :- \ndocker image ls</br> docker images| 列出镜像\ndocker image rm\t镜像ID</br>docker image 镜像名字:版本</br>docker rmi 镜像ID|删除镜像\ndocker image prune|删除虚悬镜像\n\n\n--------------------- \n\n## Docker容器\n\n#### 容器操作\n指令 | 说明 \n:-: | :-\ndocker container ls<br>docker ps|当前启动容器\ndocker container ls -a<br>docker ps -a | 全部容器\ndocker start 容器ID|启动一个容器\ndocker container start 容器ID | 启动已终止容器\ndocker container stop 容器ID|终止容器\ndocker container rm|来删除一个处于终止状态的容器<br>添加 -f 参数,删除一个运行中的容器\ndocker container prune|清理掉所有处于终止状态的容器。\ndocker exec -it 容器ID bash|以交互式进入容器\n\n- 通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止\n- docker attach 命令或 docker exec 命令进入容器进行操作\n\n\n--------------------- \n\n## Dockerfile 定制镜像\n\n## Docker Compose\n- Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速的部署分布式应用。\n\n##### Docker Compose 安装与卸载\n###### 二进制包\n从 [官方 GitHub Release](https://github.com/docker/compose/releases) 处获取最新版本。\n\n\n    curl -L https://github.com/docker/compose/releases/download/版本号/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n    chmod +x /usr/local/bin/docker-compose//设置可运行权限\n\n###### 在<font color=#A52A2A size=3 >docker-compose.yml </font>编写 <font color=#A52A2A size=3 >/usr/local/docker/tomcat</font> 文件，这个是 Compose 使用的主模板文件。 \n\n    version: '3.1'\n    services:\n      tomcat:\n        restart: always\n        image: tomcat\n        container_name: tomcat\n        ports:\n          - 8080:8080\n\n#### 常用操作\n指令 | 说明 \n:-: | :- \ndocker-compose up | 运行 compose 项目\ndocker-compose down |停止 up 命令所启动的容器，并移除网络(在.yml文件目录下运行)\ndocker-compose logs (-f) 容器ID |查看日志(监听日志)\ndocker-compose restart [options] [SERVICE...]|重启项目中的服务。\n\n#### 根据条件查询日志\ndocker logs 容器ID |grep '查询条件'   \ndocker logs 40873b5dc7f7 |grep 'Current Page'\n\n--------------------- \n## Docker三大核心概念\nDocker的三大核心概念分别是镜像、容器、仓库   \nDocker运行容器前需要本地存在对应的镜像，如果本地没有对应的镜像，Docker会尝试从默认的镜像仓库下载。当然用户也可以通过配置，使用自定义的镜像仓库。\n\n---------------------\n## Docker安装\n\n#### 卸载旧版本\n\n    $  apt-get remove docker \\\n               docker-engine \\\n               docker.io\n\n#### 使用脚本自动安装\n在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装：\n\n    $ curl -fsSL get.docker.com -o get-docker.sh\n    # 可能会出现 404 错误，请移步下面的特别说明\n    $ sudo sh get-docker.sh --mirror Aliyun\n\n----------------------------\n## 使用 APT 安装\n- 安装必要的一些系统工具\n\n      $  sudo apt-get update\n      $  sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common\n    \n- 安装 GPG 证书\n\n       $  curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n    \n- 写入软件源信息\n\n       $  sudo add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"\n\n- 更新并安装 Docker CE\n\n        $ sudo apt-get -y update\n        $ sudo apt-get -y install docker-ce\n\n-------------------------------------\n## Docker 镜像加速器\n#### Ubuntu 16.04+、Debian 8+、CentOS 7\n对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）\n\n    {\n      \"registry-mirrors\": [\n        \"https://registry.docker-cn.com\"\n      ]\n    }\n\n#### 重新启动服务。\n\n    $ sudo systemctl daemon-reload\n    $ sudo systemctl restart docker\n--------------------------------------------\n## Docker Compose 安装与卸载\n#### 二进制包\n在 Linux 上的也安装十分简单，从 官方 [GitHub Release](https://github.com/docker/compose/releases) 处直接下载编译好的二进制文件即可。\n\n例如，在 Linux 64 位系统上直接下载对应的二进制包\n\n    $ sudo curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n    $ sudo chmod +x /usr/local/bin/docker-compose\n\n-------------------------------\n## 基于 Docker 安装 Tomcat\n    version: '3.1'\n    services:\n      tomcat:\n        restart: always\n        image: tomcat\n        container_name: tomcat\n        ports:\n          - 8080:8080\n        volumes:\n          - /usr/local/docker/tomcat/webapps/test:/usr/local/tomcat/webapps/test\n        environment:\n          TZ: Asia/Shanghai\n\n## 基于 Docker 安装 MySQL\n##### MySQL5\n    version: '3.1'\n    services:\n      mysql:\n        restart: always\n        image: mysql:5.7.22\n        container_name: mysql\n        ports:\n          - 3306:3306\n        environment:\n          TZ: Asia/Shanghai\n          MYSQL_ROOT_PASSWORD: 123456\n        command:\n          --character-set-server=utf8mb4\n          --collation-server=utf8mb4_general_ci\n          --explicit_defaults_for_timestamp=true\n          --lower_case_table_names=1\n          --max_allowed_packet=128M\n          --sql-mode=\"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO\"\n        volumes:\n          - mysql-data:/var/lib/mysql\n    \n    volumes:\n      mysql-data:\n##### MySQL8\n    version: '3.1'\n    services:\n      db:\n        image: mysql\n        restart: always\n        environment:\n          MYSQL_ROOT_PASSWORD: 123456\n        command:\n          --default-authentication-plugin=mysql_native_password\n          --character-set-server=utf8mb4\n          --collation-server=utf8mb4_general_ci\n          --explicit_defaults_for_timestamp=true\n          --lower_case_table_names=1\n        ports:\n          - 3306:3306\n        volumes:\n          - ./data:/var/lib/mysql\n    \n      adminer:\n        image: adminer\n        restart: always\n        ports:\n          - 8080:8080\n------------------------------\n## 基于 Docker 安装 GitLab\n    version: '3'\n    services:\n        web:\n          image: 'twang2218/gitlab-ce-zh'\n          restart: always\n          hostname: '47.107.245.83'\n          environment:\n            TZ: 'Asia/Shanghai'\n            GITLAB_OMNIBUS_CONFIG: |\n              external_url 'http://47.107.245.83'\n              gitlab_rails['gitlab_shell_ssh_port'] = 2222\n              unicorn['port'] = 8888\n              nginx['listen_port'] = 80\n          ports:\n            - '80:80'\n            - '8443:443'\n            - '2222:22'\n          volumes:\n            - ./config:/etc/gitlab\n            - ./data:/var/opt/gitlab\n            - ./logs:/var/log/gitlab\n\n- 设置管理员初始密码，这里的密码最好是 字母 + 数字 组合，并且 大于等于 8 位\n- 配置完成后登录，管理员账号是 root\n-----------------------------------------\n## 基于 Docker 安装 Registry\n    version: '3'\n    services:\n        web:\n          image: 'twang2218/gitlab-ce-zh'\n          restart: always\n          hostname: '47.107.245.83'\n          environment:\n            TZ: 'Asia/Shanghai'\n            GITLAB_OMNIBUS_CONFIG: |\n              external_url 'http://47.107.245.83'\n              gitlab_rails['gitlab_shell_ssh_port'] = 2222\n              unicorn['port'] = 8888\n              nginx['listen_port'] = 80\n          ports:\n            - '80:80'\n            - '8443:443'\n            - '2222:22'\n          volumes:\n            - ./config:/etc/gitlab\n            - ./data:/var/opt/gitlab\n            - ./logs:/var/log/gitlab\n\n#### 配置 Docker Registry 客户端\n案例使用的是 Ubuntu Server 16.04 LTS 版本，属于 systemd 系统，需要在 /etc/docker/daemon.json 中增加如下内容（如果文件不存在请新建该文件）\n\n    {\n      \"registry-mirrors\": [\n        \"https://registry.docker-cn.com\"\n      ],\n      \"insecure-registries\": [\n        \"ip:5000\"\n      ]\n    }\n\n##### 之后重新启动服务。\n\n    $ sudo systemctl daemon-reload\n    $ sudo systemctl restart docker\n\n\n\n----------------------------------------\n## 基于 Docker 安装 Nexus\n    version: '3.1'\n    services:\n      nexus:\n        restart: always\n        image: sonatype/nexus3\n        container_name: nexus\n        ports:\n          - 8081:8081\n        volumes:\n          - /usr/local/docker/nexus/data:/nexus-data\n###### 注： 启动时如果出现权限问题可以使用：chmod 777 /usr/local/docker/nexus/data 赋予数据卷目录可读可写的权限\n##### 登录控制台验证安装\n地址：http://ip:port/   \n用户名：admin   \n密码：admin123   \n--------------------------------\n## 基于 Docker 安装 Zookeeper\n##### Zookeeper 部署有三种方式，单机模式、集群模式、伪集群模式，以下采用 Docker 的方式部署\n###### 单机模式\n###### docker-compose.yml\n    version: '3.1'\n    \n    services:\n        zoo1:\n            image: zookeeper\n            restart: always\n            hostname: zoo1\n            ports:\n                - 2181:2181\n            environment:\n                ZOO_MY_ID: 1\n                ZOO_SERVERS: server.1=zoo1:2888:3888\n\n\n##### 集群模式\n准备 3 台 Ubuntu Server 系统，并分别配置 Zookeeper\n\n###### 第一台主机\n###### docker-compose.yml\n    version: '3.1'\n    services:\n        zoo1:\n            image: zookeeper\n            restart: always\n            environment:\n                ZOO_MY_ID: 1\n                ZOO_SERVERS: server.1=192.168.75.130:2888:3888 server.2=192.168.75.134:2888:3888 server.3=192.168.75.135:2888:3888\n            network_mode: host\n##### 验证测试\n    root@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo1_1 /bin/bash\n    bash-4.3# ./bin/zkServer.sh status\n    ZooKeeper JMX enabled by default\n    Using config: /conf/zoo.cfg\n    Mode: leader\n##### 第二台主机\n###### docker-compose.yml\n    version: '3.1'\n    services:\n        zoo2:\n            image: zookeeper\n            restart: always\n            environment:\n                ZOO_MY_ID: 2\n                ZOO_SERVERS: server.1=192.168.75.130:2888:3888 server.2=192.168.75.134:2888:3888 server.3=192.168.75.135:2888:3888\n            network_mode: host\n###### 验证测试\n    root@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo2_1 /bin/bash\n    bash-4.3# ./bin/zkServer.sh status\n    ZooKeeper JMX enabled by default\n    Using config: /conf/zoo.cfg\n    Mode: follower\n##### 第三台主机\n###### docker-compose.yml\n    version: '3.1'\n    services:\n        zoo3:\n            image: zookeeper\n            restart: always\n            environment:\n                ZOO_MY_ID: 3\n                ZOO_SERVERS: server.1=192.168.75.130:2888:3888 server.2=192.168.75.134:2888:3888 server.3=192.168.75.135:2888:3888\n            network_mode: host\n##### 验证测试\n    root@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo3_1 /bin/bash\n    bash-4.3# ./bin/zkServer.sh status\n    ZooKeeper JMX enabled by default\n    Using config: /conf/zoo.cfg\n    Mode: follower\n\n\n##### 伪集群模式\n###### docker-compose.yml\n    version: '3.1'\n    services:\n        zoo1:\n            image: zookeeper\n            restart: always\n            hostname: zoo1\n            ports:\n                - 2181:2181\n            environment:\n                ZOO_MY_ID: 1\n                ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888\n        zoo2:\n            image: zookeeper\n            restart: always\n            hostname: zoo2\n            ports:\n                - 2182:2181\n            environment:\n                ZOO_MY_ID: 2\n                ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888\n    \n        zoo3:\n            image: zookeeper\n            restart: always\n            hostname: zoo3\n            ports:\n                - 2183:2181\n            environment:\n                ZOO_MY_ID: 3\n                ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888\n\n##### 验证是否安装成功\n###### 分别以交互方式进入容器查看\n    docker exec -it zookeeper_zoo1_1 /bin/bash\n    docker exec -it zookeeper_zoo2_1 /bin/bash\n    docker exec -it zookeeper_zoo3_1 /bin/bash\n###### 使用服务端工具检查服务器状态\n    root@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo1_1 /bin/bash\n    bash-4.3# ./bin/zkServer.sh status\n    ZooKeeper JMX enabled by default\n    Using config: /conf/zoo.cfg\n    Mode: follower\n    \n    root@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo2_1 /bin/bash\n    bash-4.3# ./bin/zkServer.sh status\n    ZooKeeper JMX enabled by default\n    Using config: /conf/zoo.cfg\n    Mode: follower","source":"_posts/Docker.md","raw":"---\ntitle: Docker\ndate: 2019-08-15 10:42:23\ntags:\n---\n\n# Docker 引擎\n\n**Docker引擎是一个客户服务器(c/s)应用程序，主要组件：**\n\n- 一种服务器，它是一种称为守护进程并且长时间运行的程序。\n- REST API用于指定程序可以用来与守护进程通信的接口，并指示它做什么。\n- 一个有命令行界面 (CLI) 工具的客户端。\n![avatar](https://414706657.oss-cn-shenzhen.aliyuncs.com/psb.png)\n\n--------------------- \n\n## Docker 系统架构\n\n- Docker 使用客户端-服务器 (C/S) 架构模式，使用远程 API 来管理和创建 Docker 容器。\n- Docker 容器通过 Docker 镜像来创建。\n- 容器与镜像的关系类似于面向对象编程中的对象与类。\n\nDocker | 面向对象 \n:-: | :- \n容器 | 对象\n镜像 | 类\n\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/psb_1.png)\n\n--------------------- \n\n标题 | 说明 \n:-: | :- \n镜像</br>(Images)|Docker 镜像是用于创建 Docker 容器的模板。\n容器</br>(Container)|容器是独立运行的一个或一组应用。\n客户端</br>(Client)|Docker 客户端通过命令行或者其他工具使用 Docker API (https://docs.docker.com/reference/api/docker_remote_api) 与 Docker 的守护进程通信。\n主机</br>(Host)|一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。\n仓库</br>(Registry)|Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(https://hub.docker.com) 提供了庞大的镜像集合供使用。\nDocker Machine|Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。\n\n--------------------- \n\n## Docker 镜像\n\nDocker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。\n\n#### 分层存储\n- 镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。\n- 镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。\n- 分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。\n\n\n#### 镜像操作\n指令 | 说明 \n:-: | :- \ndocker image ls</br> docker images| 列出镜像\ndocker image rm\t镜像ID</br>docker image 镜像名字:版本</br>docker rmi 镜像ID|删除镜像\ndocker image prune|删除虚悬镜像\n\n\n--------------------- \n\n## Docker容器\n\n#### 容器操作\n指令 | 说明 \n:-: | :-\ndocker container ls<br>docker ps|当前启动容器\ndocker container ls -a<br>docker ps -a | 全部容器\ndocker start 容器ID|启动一个容器\ndocker container start 容器ID | 启动已终止容器\ndocker container stop 容器ID|终止容器\ndocker container rm|来删除一个处于终止状态的容器<br>添加 -f 参数,删除一个运行中的容器\ndocker container prune|清理掉所有处于终止状态的容器。\ndocker exec -it 容器ID bash|以交互式进入容器\n\n- 通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止\n- docker attach 命令或 docker exec 命令进入容器进行操作\n\n\n--------------------- \n\n## Dockerfile 定制镜像\n\n## Docker Compose\n- Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速的部署分布式应用。\n\n##### Docker Compose 安装与卸载\n###### 二进制包\n从 [官方 GitHub Release](https://github.com/docker/compose/releases) 处获取最新版本。\n\n\n    curl -L https://github.com/docker/compose/releases/download/版本号/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n    chmod +x /usr/local/bin/docker-compose//设置可运行权限\n\n###### 在<font color=#A52A2A size=3 >docker-compose.yml </font>编写 <font color=#A52A2A size=3 >/usr/local/docker/tomcat</font> 文件，这个是 Compose 使用的主模板文件。 \n\n    version: '3.1'\n    services:\n      tomcat:\n        restart: always\n        image: tomcat\n        container_name: tomcat\n        ports:\n          - 8080:8080\n\n#### 常用操作\n指令 | 说明 \n:-: | :- \ndocker-compose up | 运行 compose 项目\ndocker-compose down |停止 up 命令所启动的容器，并移除网络(在.yml文件目录下运行)\ndocker-compose logs (-f) 容器ID |查看日志(监听日志)\ndocker-compose restart [options] [SERVICE...]|重启项目中的服务。\n\n#### 根据条件查询日志\ndocker logs 容器ID |grep '查询条件'   \ndocker logs 40873b5dc7f7 |grep 'Current Page'\n\n--------------------- \n## Docker三大核心概念\nDocker的三大核心概念分别是镜像、容器、仓库   \nDocker运行容器前需要本地存在对应的镜像，如果本地没有对应的镜像，Docker会尝试从默认的镜像仓库下载。当然用户也可以通过配置，使用自定义的镜像仓库。\n\n---------------------\n## Docker安装\n\n#### 卸载旧版本\n\n    $  apt-get remove docker \\\n               docker-engine \\\n               docker.io\n\n#### 使用脚本自动安装\n在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装：\n\n    $ curl -fsSL get.docker.com -o get-docker.sh\n    # 可能会出现 404 错误，请移步下面的特别说明\n    $ sudo sh get-docker.sh --mirror Aliyun\n\n----------------------------\n## 使用 APT 安装\n- 安装必要的一些系统工具\n\n      $  sudo apt-get update\n      $  sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common\n    \n- 安装 GPG 证书\n\n       $  curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n    \n- 写入软件源信息\n\n       $  sudo add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"\n\n- 更新并安装 Docker CE\n\n        $ sudo apt-get -y update\n        $ sudo apt-get -y install docker-ce\n\n-------------------------------------\n## Docker 镜像加速器\n#### Ubuntu 16.04+、Debian 8+、CentOS 7\n对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）\n\n    {\n      \"registry-mirrors\": [\n        \"https://registry.docker-cn.com\"\n      ]\n    }\n\n#### 重新启动服务。\n\n    $ sudo systemctl daemon-reload\n    $ sudo systemctl restart docker\n--------------------------------------------\n## Docker Compose 安装与卸载\n#### 二进制包\n在 Linux 上的也安装十分简单，从 官方 [GitHub Release](https://github.com/docker/compose/releases) 处直接下载编译好的二进制文件即可。\n\n例如，在 Linux 64 位系统上直接下载对应的二进制包\n\n    $ sudo curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n    $ sudo chmod +x /usr/local/bin/docker-compose\n\n-------------------------------\n## 基于 Docker 安装 Tomcat\n    version: '3.1'\n    services:\n      tomcat:\n        restart: always\n        image: tomcat\n        container_name: tomcat\n        ports:\n          - 8080:8080\n        volumes:\n          - /usr/local/docker/tomcat/webapps/test:/usr/local/tomcat/webapps/test\n        environment:\n          TZ: Asia/Shanghai\n\n## 基于 Docker 安装 MySQL\n##### MySQL5\n    version: '3.1'\n    services:\n      mysql:\n        restart: always\n        image: mysql:5.7.22\n        container_name: mysql\n        ports:\n          - 3306:3306\n        environment:\n          TZ: Asia/Shanghai\n          MYSQL_ROOT_PASSWORD: 123456\n        command:\n          --character-set-server=utf8mb4\n          --collation-server=utf8mb4_general_ci\n          --explicit_defaults_for_timestamp=true\n          --lower_case_table_names=1\n          --max_allowed_packet=128M\n          --sql-mode=\"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO\"\n        volumes:\n          - mysql-data:/var/lib/mysql\n    \n    volumes:\n      mysql-data:\n##### MySQL8\n    version: '3.1'\n    services:\n      db:\n        image: mysql\n        restart: always\n        environment:\n          MYSQL_ROOT_PASSWORD: 123456\n        command:\n          --default-authentication-plugin=mysql_native_password\n          --character-set-server=utf8mb4\n          --collation-server=utf8mb4_general_ci\n          --explicit_defaults_for_timestamp=true\n          --lower_case_table_names=1\n        ports:\n          - 3306:3306\n        volumes:\n          - ./data:/var/lib/mysql\n    \n      adminer:\n        image: adminer\n        restart: always\n        ports:\n          - 8080:8080\n------------------------------\n## 基于 Docker 安装 GitLab\n    version: '3'\n    services:\n        web:\n          image: 'twang2218/gitlab-ce-zh'\n          restart: always\n          hostname: '47.107.245.83'\n          environment:\n            TZ: 'Asia/Shanghai'\n            GITLAB_OMNIBUS_CONFIG: |\n              external_url 'http://47.107.245.83'\n              gitlab_rails['gitlab_shell_ssh_port'] = 2222\n              unicorn['port'] = 8888\n              nginx['listen_port'] = 80\n          ports:\n            - '80:80'\n            - '8443:443'\n            - '2222:22'\n          volumes:\n            - ./config:/etc/gitlab\n            - ./data:/var/opt/gitlab\n            - ./logs:/var/log/gitlab\n\n- 设置管理员初始密码，这里的密码最好是 字母 + 数字 组合，并且 大于等于 8 位\n- 配置完成后登录，管理员账号是 root\n-----------------------------------------\n## 基于 Docker 安装 Registry\n    version: '3'\n    services:\n        web:\n          image: 'twang2218/gitlab-ce-zh'\n          restart: always\n          hostname: '47.107.245.83'\n          environment:\n            TZ: 'Asia/Shanghai'\n            GITLAB_OMNIBUS_CONFIG: |\n              external_url 'http://47.107.245.83'\n              gitlab_rails['gitlab_shell_ssh_port'] = 2222\n              unicorn['port'] = 8888\n              nginx['listen_port'] = 80\n          ports:\n            - '80:80'\n            - '8443:443'\n            - '2222:22'\n          volumes:\n            - ./config:/etc/gitlab\n            - ./data:/var/opt/gitlab\n            - ./logs:/var/log/gitlab\n\n#### 配置 Docker Registry 客户端\n案例使用的是 Ubuntu Server 16.04 LTS 版本，属于 systemd 系统，需要在 /etc/docker/daemon.json 中增加如下内容（如果文件不存在请新建该文件）\n\n    {\n      \"registry-mirrors\": [\n        \"https://registry.docker-cn.com\"\n      ],\n      \"insecure-registries\": [\n        \"ip:5000\"\n      ]\n    }\n\n##### 之后重新启动服务。\n\n    $ sudo systemctl daemon-reload\n    $ sudo systemctl restart docker\n\n\n\n----------------------------------------\n## 基于 Docker 安装 Nexus\n    version: '3.1'\n    services:\n      nexus:\n        restart: always\n        image: sonatype/nexus3\n        container_name: nexus\n        ports:\n          - 8081:8081\n        volumes:\n          - /usr/local/docker/nexus/data:/nexus-data\n###### 注： 启动时如果出现权限问题可以使用：chmod 777 /usr/local/docker/nexus/data 赋予数据卷目录可读可写的权限\n##### 登录控制台验证安装\n地址：http://ip:port/   \n用户名：admin   \n密码：admin123   \n--------------------------------\n## 基于 Docker 安装 Zookeeper\n##### Zookeeper 部署有三种方式，单机模式、集群模式、伪集群模式，以下采用 Docker 的方式部署\n###### 单机模式\n###### docker-compose.yml\n    version: '3.1'\n    \n    services:\n        zoo1:\n            image: zookeeper\n            restart: always\n            hostname: zoo1\n            ports:\n                - 2181:2181\n            environment:\n                ZOO_MY_ID: 1\n                ZOO_SERVERS: server.1=zoo1:2888:3888\n\n\n##### 集群模式\n准备 3 台 Ubuntu Server 系统，并分别配置 Zookeeper\n\n###### 第一台主机\n###### docker-compose.yml\n    version: '3.1'\n    services:\n        zoo1:\n            image: zookeeper\n            restart: always\n            environment:\n                ZOO_MY_ID: 1\n                ZOO_SERVERS: server.1=192.168.75.130:2888:3888 server.2=192.168.75.134:2888:3888 server.3=192.168.75.135:2888:3888\n            network_mode: host\n##### 验证测试\n    root@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo1_1 /bin/bash\n    bash-4.3# ./bin/zkServer.sh status\n    ZooKeeper JMX enabled by default\n    Using config: /conf/zoo.cfg\n    Mode: leader\n##### 第二台主机\n###### docker-compose.yml\n    version: '3.1'\n    services:\n        zoo2:\n            image: zookeeper\n            restart: always\n            environment:\n                ZOO_MY_ID: 2\n                ZOO_SERVERS: server.1=192.168.75.130:2888:3888 server.2=192.168.75.134:2888:3888 server.3=192.168.75.135:2888:3888\n            network_mode: host\n###### 验证测试\n    root@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo2_1 /bin/bash\n    bash-4.3# ./bin/zkServer.sh status\n    ZooKeeper JMX enabled by default\n    Using config: /conf/zoo.cfg\n    Mode: follower\n##### 第三台主机\n###### docker-compose.yml\n    version: '3.1'\n    services:\n        zoo3:\n            image: zookeeper\n            restart: always\n            environment:\n                ZOO_MY_ID: 3\n                ZOO_SERVERS: server.1=192.168.75.130:2888:3888 server.2=192.168.75.134:2888:3888 server.3=192.168.75.135:2888:3888\n            network_mode: host\n##### 验证测试\n    root@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo3_1 /bin/bash\n    bash-4.3# ./bin/zkServer.sh status\n    ZooKeeper JMX enabled by default\n    Using config: /conf/zoo.cfg\n    Mode: follower\n\n\n##### 伪集群模式\n###### docker-compose.yml\n    version: '3.1'\n    services:\n        zoo1:\n            image: zookeeper\n            restart: always\n            hostname: zoo1\n            ports:\n                - 2181:2181\n            environment:\n                ZOO_MY_ID: 1\n                ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888\n        zoo2:\n            image: zookeeper\n            restart: always\n            hostname: zoo2\n            ports:\n                - 2182:2181\n            environment:\n                ZOO_MY_ID: 2\n                ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888\n    \n        zoo3:\n            image: zookeeper\n            restart: always\n            hostname: zoo3\n            ports:\n                - 2183:2181\n            environment:\n                ZOO_MY_ID: 3\n                ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888\n\n##### 验证是否安装成功\n###### 分别以交互方式进入容器查看\n    docker exec -it zookeeper_zoo1_1 /bin/bash\n    docker exec -it zookeeper_zoo2_1 /bin/bash\n    docker exec -it zookeeper_zoo3_1 /bin/bash\n###### 使用服务端工具检查服务器状态\n    root@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo1_1 /bin/bash\n    bash-4.3# ./bin/zkServer.sh status\n    ZooKeeper JMX enabled by default\n    Using config: /conf/zoo.cfg\n    Mode: follower\n    \n    root@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo2_1 /bin/bash\n    bash-4.3# ./bin/zkServer.sh status\n    ZooKeeper JMX enabled by default\n    Using config: /conf/zoo.cfg\n    Mode: follower","slug":"Docker","published":1,"updated":"2021-04-22T03:43:26.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcys10003ko9bij6ivhlc","content":"<h1 id=\"Docker-引擎\"><a href=\"#Docker-引擎\" class=\"headerlink\" title=\"Docker 引擎\"></a>Docker 引擎</h1><p><strong>Docker引擎是一个客户服务器(c/s)应用程序，主要组件：</strong></p>\n<ul>\n<li>一种服务器，它是一种称为守护进程并且长时间运行的程序。</li>\n<li>REST API用于指定程序可以用来与守护进程通信的接口，并指示它做什么。</li>\n<li>一个有命令行界面 (CLI) 工具的客户端。<br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/psb.png\" alt=\"avatar\"></li>\n</ul>\n<hr>\n<h2 id=\"Docker-系统架构\"><a href=\"#Docker-系统架构\" class=\"headerlink\" title=\"Docker 系统架构\"></a>Docker 系统架构</h2><ul>\n<li>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程 API 来管理和创建 Docker 容器。</li>\n<li>Docker 容器通过 Docker 镜像来创建。</li>\n<li>容器与镜像的关系类似于面向对象编程中的对象与类。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Docker</th>\n<th align=\"left\">面向对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">容器</td>\n<td align=\"left\">对象</td>\n</tr>\n<tr>\n<td align=\"center\">镜像</td>\n<td align=\"left\">类</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/psb_1.png\" alt></p>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"center\">标题</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">镜像<br>(Images)</td>\n<td align=\"left\">Docker 镜像是用于创建 Docker 容器的模板。</td>\n</tr>\n<tr>\n<td align=\"center\">容器<br>(Container)</td>\n<td align=\"left\">容器是独立运行的一个或一组应用。</td>\n</tr>\n<tr>\n<td align=\"center\">客户端<br>(Client)</td>\n<td align=\"left\">Docker 客户端通过命令行或者其他工具使用 Docker API (<a href=\"https://docs.docker.com/reference/api/docker_remote_api\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/reference/api/docker_remote_api</a>) 与 Docker 的守护进程通信。</td>\n</tr>\n<tr>\n<td align=\"center\">主机<br>(Host)</td>\n<td align=\"left\">一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。</td>\n</tr>\n<tr>\n<td align=\"center\">仓库<br>(Registry)</td>\n<td align=\"left\">Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(<a href=\"https://hub.docker.com\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com</a>) 提供了庞大的镜像集合供使用。</td>\n</tr>\n<tr>\n<td align=\"center\">Docker Machine</td>\n<td align=\"left\">Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Docker-镜像\"><a href=\"#Docker-镜像\" class=\"headerlink\" title=\"Docker 镜像\"></a>Docker 镜像</h2><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>\n<h4 id=\"分层存储\"><a href=\"#分层存储\" class=\"headerlink\" title=\"分层存储\"></a>分层存储</h4><ul>\n<li>镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</li>\n<li>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</li>\n<li>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</li>\n</ul>\n<h4 id=\"镜像操作\"><a href=\"#镜像操作\" class=\"headerlink\" title=\"镜像操作\"></a>镜像操作</h4><table>\n<thead>\n<tr>\n<th align=\"center\">指令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">docker image ls<br> docker images</td>\n<td align=\"left\">列出镜像</td>\n</tr>\n<tr>\n<td align=\"center\">docker image rm    镜像ID<br>docker image 镜像名字:版本<br>docker rmi 镜像ID</td>\n<td align=\"left\">删除镜像</td>\n</tr>\n<tr>\n<td align=\"center\">docker image prune</td>\n<td align=\"left\">删除虚悬镜像</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Docker容器\"><a href=\"#Docker容器\" class=\"headerlink\" title=\"Docker容器\"></a>Docker容器</h2><h4 id=\"容器操作\"><a href=\"#容器操作\" class=\"headerlink\" title=\"容器操作\"></a>容器操作</h4><table>\n<thead>\n<tr>\n<th align=\"center\">指令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">docker container ls<br>docker ps</td>\n<td align=\"left\">当前启动容器</td>\n</tr>\n<tr>\n<td align=\"center\">docker container ls -a<br>docker ps -a</td>\n<td align=\"left\">全部容器</td>\n</tr>\n<tr>\n<td align=\"center\">docker start 容器ID</td>\n<td align=\"left\">启动一个容器</td>\n</tr>\n<tr>\n<td align=\"center\">docker container start 容器ID</td>\n<td align=\"left\">启动已终止容器</td>\n</tr>\n<tr>\n<td align=\"center\">docker container stop 容器ID</td>\n<td align=\"left\">终止容器</td>\n</tr>\n<tr>\n<td align=\"center\">docker container rm</td>\n<td align=\"left\">来删除一个处于终止状态的容器<br>添加 -f 参数,删除一个运行中的容器</td>\n</tr>\n<tr>\n<td align=\"center\">docker container prune</td>\n<td align=\"left\">清理掉所有处于终止状态的容器。</td>\n</tr>\n<tr>\n<td align=\"center\">docker exec -it 容器ID bash</td>\n<td align=\"left\">以交互式进入容器</td>\n</tr>\n</tbody></table>\n<ul>\n<li>通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止</li>\n<li>docker attach 命令或 docker exec 命令进入容器进行操作</li>\n</ul>\n<hr>\n<h2 id=\"Dockerfile-定制镜像\"><a href=\"#Dockerfile-定制镜像\" class=\"headerlink\" title=\"Dockerfile 定制镜像\"></a>Dockerfile 定制镜像</h2><h2 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h2><ul>\n<li>Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速的部署分布式应用。</li>\n</ul>\n<h5 id=\"Docker-Compose-安装与卸载\"><a href=\"#Docker-Compose-安装与卸载\" class=\"headerlink\" title=\"Docker Compose 安装与卸载\"></a>Docker Compose 安装与卸载</h5><h6 id=\"二进制包\"><a href=\"#二进制包\" class=\"headerlink\" title=\"二进制包\"></a>二进制包</h6><p>从 <a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener\">官方 GitHub Release</a> 处获取最新版本。</p>\n<pre><code>curl -L https://github.com/docker/compose/releases/download/版本号/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose//设置可运行权限</code></pre><h6 id=\"在docker-compose-yml-编写-usr-local-docker-tomcat-文件，这个是-Compose-使用的主模板文件。\"><a href=\"#在docker-compose-yml-编写-usr-local-docker-tomcat-文件，这个是-Compose-使用的主模板文件。\" class=\"headerlink\" title=\"在docker-compose.yml 编写 /usr/local/docker/tomcat 文件，这个是 Compose 使用的主模板文件。\"></a>在<font color=\"#A52A2A\" size=\"3\">docker-compose.yml </font>编写 <font color=\"#A52A2A\" size=\"3\">/usr/local/docker/tomcat</font> 文件，这个是 Compose 使用的主模板文件。</h6><pre><code>version: &apos;3.1&apos;\nservices:\n  tomcat:\n    restart: always\n    image: tomcat\n    container_name: tomcat\n    ports:\n      - 8080:8080</code></pre><h4 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h4><table>\n<thead>\n<tr>\n<th align=\"center\">指令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">docker-compose up</td>\n<td align=\"left\">运行 compose 项目</td>\n</tr>\n<tr>\n<td align=\"center\">docker-compose down</td>\n<td align=\"left\">停止 up 命令所启动的容器，并移除网络(在.yml文件目录下运行)</td>\n</tr>\n<tr>\n<td align=\"center\">docker-compose logs (-f) 容器ID</td>\n<td align=\"left\">查看日志(监听日志)</td>\n</tr>\n<tr>\n<td align=\"center\">docker-compose restart [options] [SERVICE…]</td>\n<td align=\"left\">重启项目中的服务。</td>\n</tr>\n</tbody></table>\n<h4 id=\"根据条件查询日志\"><a href=\"#根据条件查询日志\" class=\"headerlink\" title=\"根据条件查询日志\"></a>根据条件查询日志</h4><p>docker logs 容器ID |grep ‘查询条件’<br>docker logs 40873b5dc7f7 |grep ‘Current Page’</p>\n<hr>\n<h2 id=\"Docker三大核心概念\"><a href=\"#Docker三大核心概念\" class=\"headerlink\" title=\"Docker三大核心概念\"></a>Docker三大核心概念</h2><p>Docker的三大核心概念分别是镜像、容器、仓库<br>Docker运行容器前需要本地存在对应的镜像，如果本地没有对应的镜像，Docker会尝试从默认的镜像仓库下载。当然用户也可以通过配置，使用自定义的镜像仓库。</p>\n<hr>\n<h2 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h2><h4 id=\"卸载旧版本\"><a href=\"#卸载旧版本\" class=\"headerlink\" title=\"卸载旧版本\"></a>卸载旧版本</h4><pre><code>$  apt-get remove docker \\\n           docker-engine \\\n           docker.io</code></pre><h4 id=\"使用脚本自动安装\"><a href=\"#使用脚本自动安装\" class=\"headerlink\" title=\"使用脚本自动安装\"></a>使用脚本自动安装</h4><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装：</p>\n<pre><code>$ curl -fsSL get.docker.com -o get-docker.sh\n# 可能会出现 404 错误，请移步下面的特别说明\n$ sudo sh get-docker.sh --mirror Aliyun</code></pre><hr>\n<h2 id=\"使用-APT-安装\"><a href=\"#使用-APT-安装\" class=\"headerlink\" title=\"使用 APT 安装\"></a>使用 APT 安装</h2><ul>\n<li><p>安装必要的一些系统工具</p>\n<pre><code>$  sudo apt-get update\n$  sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</code></pre></li>\n<li><p>安装 GPG 证书</p>\n<pre><code>$  curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</code></pre></li>\n<li><p>写入软件源信息</p>\n<pre><code>$  sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</code></pre></li>\n<li><p>更新并安装 Docker CE</p>\n<pre><code>$ sudo apt-get -y update\n$ sudo apt-get -y install docker-ce</code></pre></li>\n</ul>\n<hr>\n<h2 id=\"Docker-镜像加速器\"><a href=\"#Docker-镜像加速器\" class=\"headerlink\" title=\"Docker 镜像加速器\"></a>Docker 镜像加速器</h2><h4 id=\"Ubuntu-16-04-、Debian-8-、CentOS-7\"><a href=\"#Ubuntu-16-04-、Debian-8-、CentOS-7\" class=\"headerlink\" title=\"Ubuntu 16.04+、Debian 8+、CentOS 7\"></a>Ubuntu 16.04+、Debian 8+、CentOS 7</h4><p>对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）</p>\n<pre><code>{\n  &quot;registry-mirrors&quot;: [\n    &quot;https://registry.docker-cn.com&quot;\n  ]\n}</code></pre><h4 id=\"重新启动服务。\"><a href=\"#重新启动服务。\" class=\"headerlink\" title=\"重新启动服务。\"></a>重新启动服务。</h4><pre><code>$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker</code></pre><hr>\n<h2 id=\"Docker-Compose-安装与卸载-1\"><a href=\"#Docker-Compose-安装与卸载-1\" class=\"headerlink\" title=\"Docker Compose 安装与卸载\"></a>Docker Compose 安装与卸载</h2><h4 id=\"二进制包-1\"><a href=\"#二进制包-1\" class=\"headerlink\" title=\"二进制包\"></a>二进制包</h4><p>在 Linux 上的也安装十分简单，从 官方 <a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener\">GitHub Release</a> 处直接下载编译好的二进制文件即可。</p>\n<p>例如，在 Linux 64 位系统上直接下载对应的二进制包</p>\n<pre><code>$ sudo curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose\n$ sudo chmod +x /usr/local/bin/docker-compose</code></pre><hr>\n<h2 id=\"基于-Docker-安装-Tomcat\"><a href=\"#基于-Docker-安装-Tomcat\" class=\"headerlink\" title=\"基于 Docker 安装 Tomcat\"></a>基于 Docker 安装 Tomcat</h2><pre><code>version: &apos;3.1&apos;\nservices:\n  tomcat:\n    restart: always\n    image: tomcat\n    container_name: tomcat\n    ports:\n      - 8080:8080\n    volumes:\n      - /usr/local/docker/tomcat/webapps/test:/usr/local/tomcat/webapps/test\n    environment:\n      TZ: Asia/Shanghai</code></pre><h2 id=\"基于-Docker-安装-MySQL\"><a href=\"#基于-Docker-安装-MySQL\" class=\"headerlink\" title=\"基于 Docker 安装 MySQL\"></a>基于 Docker 安装 MySQL</h2><h5 id=\"MySQL5\"><a href=\"#MySQL5\" class=\"headerlink\" title=\"MySQL5\"></a>MySQL5</h5><pre><code>version: &apos;3.1&apos;\nservices:\n  mysql:\n    restart: always\n    image: mysql:5.7.22\n    container_name: mysql\n    ports:\n      - 3306:3306\n    environment:\n      TZ: Asia/Shanghai\n      MYSQL_ROOT_PASSWORD: 123456\n    command:\n      --character-set-server=utf8mb4\n      --collation-server=utf8mb4_general_ci\n      --explicit_defaults_for_timestamp=true\n      --lower_case_table_names=1\n      --max_allowed_packet=128M\n      --sql-mode=&quot;STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO&quot;\n    volumes:\n      - mysql-data:/var/lib/mysql\n\nvolumes:\n  mysql-data:</code></pre><h5 id=\"MySQL8\"><a href=\"#MySQL8\" class=\"headerlink\" title=\"MySQL8\"></a>MySQL8</h5><pre><code>version: &apos;3.1&apos;\nservices:\n  db:\n    image: mysql\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: 123456\n    command:\n      --default-authentication-plugin=mysql_native_password\n      --character-set-server=utf8mb4\n      --collation-server=utf8mb4_general_ci\n      --explicit_defaults_for_timestamp=true\n      --lower_case_table_names=1\n    ports:\n      - 3306:3306\n    volumes:\n      - ./data:/var/lib/mysql\n\n  adminer:\n    image: adminer\n    restart: always\n    ports:\n      - 8080:8080</code></pre><hr>\n<h2 id=\"基于-Docker-安装-GitLab\"><a href=\"#基于-Docker-安装-GitLab\" class=\"headerlink\" title=\"基于 Docker 安装 GitLab\"></a>基于 Docker 安装 GitLab</h2><pre><code>version: &apos;3&apos;\nservices:\n    web:\n      image: &apos;twang2218/gitlab-ce-zh&apos;\n      restart: always\n      hostname: &apos;47.107.245.83&apos;\n      environment:\n        TZ: &apos;Asia/Shanghai&apos;\n        GITLAB_OMNIBUS_CONFIG: |\n          external_url &apos;http://47.107.245.83&apos;\n          gitlab_rails[&apos;gitlab_shell_ssh_port&apos;] = 2222\n          unicorn[&apos;port&apos;] = 8888\n          nginx[&apos;listen_port&apos;] = 80\n      ports:\n        - &apos;80:80&apos;\n        - &apos;8443:443&apos;\n        - &apos;2222:22&apos;\n      volumes:\n        - ./config:/etc/gitlab\n        - ./data:/var/opt/gitlab\n        - ./logs:/var/log/gitlab</code></pre><ul>\n<li>设置管理员初始密码，这里的密码最好是 字母 + 数字 组合，并且 大于等于 8 位</li>\n<li>配置完成后登录，管理员账号是 root</li>\n</ul>\n<hr>\n<h2 id=\"基于-Docker-安装-Registry\"><a href=\"#基于-Docker-安装-Registry\" class=\"headerlink\" title=\"基于 Docker 安装 Registry\"></a>基于 Docker 安装 Registry</h2><pre><code>version: &apos;3&apos;\nservices:\n    web:\n      image: &apos;twang2218/gitlab-ce-zh&apos;\n      restart: always\n      hostname: &apos;47.107.245.83&apos;\n      environment:\n        TZ: &apos;Asia/Shanghai&apos;\n        GITLAB_OMNIBUS_CONFIG: |\n          external_url &apos;http://47.107.245.83&apos;\n          gitlab_rails[&apos;gitlab_shell_ssh_port&apos;] = 2222\n          unicorn[&apos;port&apos;] = 8888\n          nginx[&apos;listen_port&apos;] = 80\n      ports:\n        - &apos;80:80&apos;\n        - &apos;8443:443&apos;\n        - &apos;2222:22&apos;\n      volumes:\n        - ./config:/etc/gitlab\n        - ./data:/var/opt/gitlab\n        - ./logs:/var/log/gitlab</code></pre><h4 id=\"配置-Docker-Registry-客户端\"><a href=\"#配置-Docker-Registry-客户端\" class=\"headerlink\" title=\"配置 Docker Registry 客户端\"></a>配置 Docker Registry 客户端</h4><p>案例使用的是 Ubuntu Server 16.04 LTS 版本，属于 systemd 系统，需要在 /etc/docker/daemon.json 中增加如下内容（如果文件不存在请新建该文件）</p>\n<pre><code>{\n  &quot;registry-mirrors&quot;: [\n    &quot;https://registry.docker-cn.com&quot;\n  ],\n  &quot;insecure-registries&quot;: [\n    &quot;ip:5000&quot;\n  ]\n}</code></pre><h5 id=\"之后重新启动服务。\"><a href=\"#之后重新启动服务。\" class=\"headerlink\" title=\"之后重新启动服务。\"></a>之后重新启动服务。</h5><pre><code>$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker</code></pre><hr>\n<h2 id=\"基于-Docker-安装-Nexus\"><a href=\"#基于-Docker-安装-Nexus\" class=\"headerlink\" title=\"基于 Docker 安装 Nexus\"></a>基于 Docker 安装 Nexus</h2><pre><code>version: &apos;3.1&apos;\nservices:\n  nexus:\n    restart: always\n    image: sonatype/nexus3\n    container_name: nexus\n    ports:\n      - 8081:8081\n    volumes:\n      - /usr/local/docker/nexus/data:/nexus-data</code></pre><h6 id=\"注：-启动时如果出现权限问题可以使用：chmod-777-usr-local-docker-nexus-data-赋予数据卷目录可读可写的权限\"><a href=\"#注：-启动时如果出现权限问题可以使用：chmod-777-usr-local-docker-nexus-data-赋予数据卷目录可读可写的权限\" class=\"headerlink\" title=\"注： 启动时如果出现权限问题可以使用：chmod 777 /usr/local/docker/nexus/data 赋予数据卷目录可读可写的权限\"></a>注： 启动时如果出现权限问题可以使用：chmod 777 /usr/local/docker/nexus/data 赋予数据卷目录可读可写的权限</h6><h5 id=\"登录控制台验证安装\"><a href=\"#登录控制台验证安装\" class=\"headerlink\" title=\"登录控制台验证安装\"></a>登录控制台验证安装</h5><p>地址：<a href=\"http://ip:port/\" target=\"_blank\" rel=\"noopener\">http://ip:port/</a><br>用户名：admin   </p>\n<h2 id=\"密码：admin123\"><a href=\"#密码：admin123\" class=\"headerlink\" title=\"密码：admin123   \"></a>密码：admin123   </h2><h2 id=\"基于-Docker-安装-Zookeeper\"><a href=\"#基于-Docker-安装-Zookeeper\" class=\"headerlink\" title=\"基于 Docker 安装 Zookeeper\"></a>基于 Docker 安装 Zookeeper</h2><h5 id=\"Zookeeper-部署有三种方式，单机模式、集群模式、伪集群模式，以下采用-Docker-的方式部署\"><a href=\"#Zookeeper-部署有三种方式，单机模式、集群模式、伪集群模式，以下采用-Docker-的方式部署\" class=\"headerlink\" title=\"Zookeeper 部署有三种方式，单机模式、集群模式、伪集群模式，以下采用 Docker 的方式部署\"></a>Zookeeper 部署有三种方式，单机模式、集群模式、伪集群模式，以下采用 Docker 的方式部署</h5><h6 id=\"单机模式\"><a href=\"#单机模式\" class=\"headerlink\" title=\"单机模式\"></a>单机模式</h6><h6 id=\"docker-compose-yml\"><a href=\"#docker-compose-yml\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h6><pre><code>version: &apos;3.1&apos;\n\nservices:\n    zoo1:\n        image: zookeeper\n        restart: always\n        hostname: zoo1\n        ports:\n            - 2181:2181\n        environment:\n            ZOO_MY_ID: 1\n            ZOO_SERVERS: server.1=zoo1:2888:3888</code></pre><h5 id=\"集群模式\"><a href=\"#集群模式\" class=\"headerlink\" title=\"集群模式\"></a>集群模式</h5><p>准备 3 台 Ubuntu Server 系统，并分别配置 Zookeeper</p>\n<h6 id=\"第一台主机\"><a href=\"#第一台主机\" class=\"headerlink\" title=\"第一台主机\"></a>第一台主机</h6><h6 id=\"docker-compose-yml-1\"><a href=\"#docker-compose-yml-1\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h6><pre><code>version: &apos;3.1&apos;\nservices:\n    zoo1:\n        image: zookeeper\n        restart: always\n        environment:\n            ZOO_MY_ID: 1\n            ZOO_SERVERS: server.1=192.168.75.130:2888:3888 server.2=192.168.75.134:2888:3888 server.3=192.168.75.135:2888:3888\n        network_mode: host</code></pre><h5 id=\"验证测试\"><a href=\"#验证测试\" class=\"headerlink\" title=\"验证测试\"></a>验证测试</h5><pre><code>root@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo1_1 /bin/bash\nbash-4.3# ./bin/zkServer.sh status\nZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nMode: leader</code></pre><h5 id=\"第二台主机\"><a href=\"#第二台主机\" class=\"headerlink\" title=\"第二台主机\"></a>第二台主机</h5><h6 id=\"docker-compose-yml-2\"><a href=\"#docker-compose-yml-2\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h6><pre><code>version: &apos;3.1&apos;\nservices:\n    zoo2:\n        image: zookeeper\n        restart: always\n        environment:\n            ZOO_MY_ID: 2\n            ZOO_SERVERS: server.1=192.168.75.130:2888:3888 server.2=192.168.75.134:2888:3888 server.3=192.168.75.135:2888:3888\n        network_mode: host</code></pre><h6 id=\"验证测试-1\"><a href=\"#验证测试-1\" class=\"headerlink\" title=\"验证测试\"></a>验证测试</h6><pre><code>root@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo2_1 /bin/bash\nbash-4.3# ./bin/zkServer.sh status\nZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nMode: follower</code></pre><h5 id=\"第三台主机\"><a href=\"#第三台主机\" class=\"headerlink\" title=\"第三台主机\"></a>第三台主机</h5><h6 id=\"docker-compose-yml-3\"><a href=\"#docker-compose-yml-3\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h6><pre><code>version: &apos;3.1&apos;\nservices:\n    zoo3:\n        image: zookeeper\n        restart: always\n        environment:\n            ZOO_MY_ID: 3\n            ZOO_SERVERS: server.1=192.168.75.130:2888:3888 server.2=192.168.75.134:2888:3888 server.3=192.168.75.135:2888:3888\n        network_mode: host</code></pre><h5 id=\"验证测试-2\"><a href=\"#验证测试-2\" class=\"headerlink\" title=\"验证测试\"></a>验证测试</h5><pre><code>root@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo3_1 /bin/bash\nbash-4.3# ./bin/zkServer.sh status\nZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nMode: follower</code></pre><h5 id=\"伪集群模式\"><a href=\"#伪集群模式\" class=\"headerlink\" title=\"伪集群模式\"></a>伪集群模式</h5><h6 id=\"docker-compose-yml-4\"><a href=\"#docker-compose-yml-4\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h6><pre><code>version: &apos;3.1&apos;\nservices:\n    zoo1:\n        image: zookeeper\n        restart: always\n        hostname: zoo1\n        ports:\n            - 2181:2181\n        environment:\n            ZOO_MY_ID: 1\n            ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888\n    zoo2:\n        image: zookeeper\n        restart: always\n        hostname: zoo2\n        ports:\n            - 2182:2181\n        environment:\n            ZOO_MY_ID: 2\n            ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888\n\n    zoo3:\n        image: zookeeper\n        restart: always\n        hostname: zoo3\n        ports:\n            - 2183:2181\n        environment:\n            ZOO_MY_ID: 3\n            ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888</code></pre><h5 id=\"验证是否安装成功\"><a href=\"#验证是否安装成功\" class=\"headerlink\" title=\"验证是否安装成功\"></a>验证是否安装成功</h5><h6 id=\"分别以交互方式进入容器查看\"><a href=\"#分别以交互方式进入容器查看\" class=\"headerlink\" title=\"分别以交互方式进入容器查看\"></a>分别以交互方式进入容器查看</h6><pre><code>docker exec -it zookeeper_zoo1_1 /bin/bash\ndocker exec -it zookeeper_zoo2_1 /bin/bash\ndocker exec -it zookeeper_zoo3_1 /bin/bash</code></pre><h6 id=\"使用服务端工具检查服务器状态\"><a href=\"#使用服务端工具检查服务器状态\" class=\"headerlink\" title=\"使用服务端工具检查服务器状态\"></a>使用服务端工具检查服务器状态</h6><pre><code>root@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo1_1 /bin/bash\nbash-4.3# ./bin/zkServer.sh status\nZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nMode: follower\n\nroot@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo2_1 /bin/bash\nbash-4.3# ./bin/zkServer.sh status\nZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nMode: follower</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Docker-引擎\"><a href=\"#Docker-引擎\" class=\"headerlink\" title=\"Docker 引擎\"></a>Docker 引擎</h1><p><strong>Docker引擎是一个客户服务器(c/s)应用程序，主要组件：</strong></p>\n<ul>\n<li>一种服务器，它是一种称为守护进程并且长时间运行的程序。</li>\n<li>REST API用于指定程序可以用来与守护进程通信的接口，并指示它做什么。</li>\n<li>一个有命令行界面 (CLI) 工具的客户端。<br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/psb.png\" alt=\"avatar\"></li>\n</ul>\n<hr>\n<h2 id=\"Docker-系统架构\"><a href=\"#Docker-系统架构\" class=\"headerlink\" title=\"Docker 系统架构\"></a>Docker 系统架构</h2><ul>\n<li>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程 API 来管理和创建 Docker 容器。</li>\n<li>Docker 容器通过 Docker 镜像来创建。</li>\n<li>容器与镜像的关系类似于面向对象编程中的对象与类。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Docker</th>\n<th align=\"left\">面向对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">容器</td>\n<td align=\"left\">对象</td>\n</tr>\n<tr>\n<td align=\"center\">镜像</td>\n<td align=\"left\">类</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/psb_1.png\" alt></p>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"center\">标题</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">镜像<br>(Images)</td>\n<td align=\"left\">Docker 镜像是用于创建 Docker 容器的模板。</td>\n</tr>\n<tr>\n<td align=\"center\">容器<br>(Container)</td>\n<td align=\"left\">容器是独立运行的一个或一组应用。</td>\n</tr>\n<tr>\n<td align=\"center\">客户端<br>(Client)</td>\n<td align=\"left\">Docker 客户端通过命令行或者其他工具使用 Docker API (<a href=\"https://docs.docker.com/reference/api/docker_remote_api\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/reference/api/docker_remote_api</a>) 与 Docker 的守护进程通信。</td>\n</tr>\n<tr>\n<td align=\"center\">主机<br>(Host)</td>\n<td align=\"left\">一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。</td>\n</tr>\n<tr>\n<td align=\"center\">仓库<br>(Registry)</td>\n<td align=\"left\">Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(<a href=\"https://hub.docker.com\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com</a>) 提供了庞大的镜像集合供使用。</td>\n</tr>\n<tr>\n<td align=\"center\">Docker Machine</td>\n<td align=\"left\">Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Docker-镜像\"><a href=\"#Docker-镜像\" class=\"headerlink\" title=\"Docker 镜像\"></a>Docker 镜像</h2><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>\n<h4 id=\"分层存储\"><a href=\"#分层存储\" class=\"headerlink\" title=\"分层存储\"></a>分层存储</h4><ul>\n<li>镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</li>\n<li>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</li>\n<li>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</li>\n</ul>\n<h4 id=\"镜像操作\"><a href=\"#镜像操作\" class=\"headerlink\" title=\"镜像操作\"></a>镜像操作</h4><table>\n<thead>\n<tr>\n<th align=\"center\">指令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">docker image ls<br> docker images</td>\n<td align=\"left\">列出镜像</td>\n</tr>\n<tr>\n<td align=\"center\">docker image rm    镜像ID<br>docker image 镜像名字:版本<br>docker rmi 镜像ID</td>\n<td align=\"left\">删除镜像</td>\n</tr>\n<tr>\n<td align=\"center\">docker image prune</td>\n<td align=\"left\">删除虚悬镜像</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"Docker容器\"><a href=\"#Docker容器\" class=\"headerlink\" title=\"Docker容器\"></a>Docker容器</h2><h4 id=\"容器操作\"><a href=\"#容器操作\" class=\"headerlink\" title=\"容器操作\"></a>容器操作</h4><table>\n<thead>\n<tr>\n<th align=\"center\">指令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">docker container ls<br>docker ps</td>\n<td align=\"left\">当前启动容器</td>\n</tr>\n<tr>\n<td align=\"center\">docker container ls -a<br>docker ps -a</td>\n<td align=\"left\">全部容器</td>\n</tr>\n<tr>\n<td align=\"center\">docker start 容器ID</td>\n<td align=\"left\">启动一个容器</td>\n</tr>\n<tr>\n<td align=\"center\">docker container start 容器ID</td>\n<td align=\"left\">启动已终止容器</td>\n</tr>\n<tr>\n<td align=\"center\">docker container stop 容器ID</td>\n<td align=\"left\">终止容器</td>\n</tr>\n<tr>\n<td align=\"center\">docker container rm</td>\n<td align=\"left\">来删除一个处于终止状态的容器<br>添加 -f 参数,删除一个运行中的容器</td>\n</tr>\n<tr>\n<td align=\"center\">docker container prune</td>\n<td align=\"left\">清理掉所有处于终止状态的容器。</td>\n</tr>\n<tr>\n<td align=\"center\">docker exec -it 容器ID bash</td>\n<td align=\"left\">以交互式进入容器</td>\n</tr>\n</tbody></table>\n<ul>\n<li>通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止</li>\n<li>docker attach 命令或 docker exec 命令进入容器进行操作</li>\n</ul>\n<hr>\n<h2 id=\"Dockerfile-定制镜像\"><a href=\"#Dockerfile-定制镜像\" class=\"headerlink\" title=\"Dockerfile 定制镜像\"></a>Dockerfile 定制镜像</h2><h2 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h2><ul>\n<li>Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速的部署分布式应用。</li>\n</ul>\n<h5 id=\"Docker-Compose-安装与卸载\"><a href=\"#Docker-Compose-安装与卸载\" class=\"headerlink\" title=\"Docker Compose 安装与卸载\"></a>Docker Compose 安装与卸载</h5><h6 id=\"二进制包\"><a href=\"#二进制包\" class=\"headerlink\" title=\"二进制包\"></a>二进制包</h6><p>从 <a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener\">官方 GitHub Release</a> 处获取最新版本。</p>\n<pre><code>curl -L https://github.com/docker/compose/releases/download/版本号/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose//设置可运行权限</code></pre><h6 id=\"在docker-compose-yml-编写-usr-local-docker-tomcat-文件，这个是-Compose-使用的主模板文件。\"><a href=\"#在docker-compose-yml-编写-usr-local-docker-tomcat-文件，这个是-Compose-使用的主模板文件。\" class=\"headerlink\" title=\"在docker-compose.yml 编写 /usr/local/docker/tomcat 文件，这个是 Compose 使用的主模板文件。\"></a>在<font color=\"#A52A2A\" size=\"3\">docker-compose.yml </font>编写 <font color=\"#A52A2A\" size=\"3\">/usr/local/docker/tomcat</font> 文件，这个是 Compose 使用的主模板文件。</h6><pre><code>version: &apos;3.1&apos;\nservices:\n  tomcat:\n    restart: always\n    image: tomcat\n    container_name: tomcat\n    ports:\n      - 8080:8080</code></pre><h4 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h4><table>\n<thead>\n<tr>\n<th align=\"center\">指令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">docker-compose up</td>\n<td align=\"left\">运行 compose 项目</td>\n</tr>\n<tr>\n<td align=\"center\">docker-compose down</td>\n<td align=\"left\">停止 up 命令所启动的容器，并移除网络(在.yml文件目录下运行)</td>\n</tr>\n<tr>\n<td align=\"center\">docker-compose logs (-f) 容器ID</td>\n<td align=\"left\">查看日志(监听日志)</td>\n</tr>\n<tr>\n<td align=\"center\">docker-compose restart [options] [SERVICE…]</td>\n<td align=\"left\">重启项目中的服务。</td>\n</tr>\n</tbody></table>\n<h4 id=\"根据条件查询日志\"><a href=\"#根据条件查询日志\" class=\"headerlink\" title=\"根据条件查询日志\"></a>根据条件查询日志</h4><p>docker logs 容器ID |grep ‘查询条件’<br>docker logs 40873b5dc7f7 |grep ‘Current Page’</p>\n<hr>\n<h2 id=\"Docker三大核心概念\"><a href=\"#Docker三大核心概念\" class=\"headerlink\" title=\"Docker三大核心概念\"></a>Docker三大核心概念</h2><p>Docker的三大核心概念分别是镜像、容器、仓库<br>Docker运行容器前需要本地存在对应的镜像，如果本地没有对应的镜像，Docker会尝试从默认的镜像仓库下载。当然用户也可以通过配置，使用自定义的镜像仓库。</p>\n<hr>\n<h2 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h2><h4 id=\"卸载旧版本\"><a href=\"#卸载旧版本\" class=\"headerlink\" title=\"卸载旧版本\"></a>卸载旧版本</h4><pre><code>$  apt-get remove docker \\\n           docker-engine \\\n           docker.io</code></pre><h4 id=\"使用脚本自动安装\"><a href=\"#使用脚本自动安装\" class=\"headerlink\" title=\"使用脚本自动安装\"></a>使用脚本自动安装</h4><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装：</p>\n<pre><code>$ curl -fsSL get.docker.com -o get-docker.sh\n# 可能会出现 404 错误，请移步下面的特别说明\n$ sudo sh get-docker.sh --mirror Aliyun</code></pre><hr>\n<h2 id=\"使用-APT-安装\"><a href=\"#使用-APT-安装\" class=\"headerlink\" title=\"使用 APT 安装\"></a>使用 APT 安装</h2><ul>\n<li><p>安装必要的一些系统工具</p>\n<pre><code>$  sudo apt-get update\n$  sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</code></pre></li>\n<li><p>安装 GPG 证书</p>\n<pre><code>$  curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</code></pre></li>\n<li><p>写入软件源信息</p>\n<pre><code>$  sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</code></pre></li>\n<li><p>更新并安装 Docker CE</p>\n<pre><code>$ sudo apt-get -y update\n$ sudo apt-get -y install docker-ce</code></pre></li>\n</ul>\n<hr>\n<h2 id=\"Docker-镜像加速器\"><a href=\"#Docker-镜像加速器\" class=\"headerlink\" title=\"Docker 镜像加速器\"></a>Docker 镜像加速器</h2><h4 id=\"Ubuntu-16-04-、Debian-8-、CentOS-7\"><a href=\"#Ubuntu-16-04-、Debian-8-、CentOS-7\" class=\"headerlink\" title=\"Ubuntu 16.04+、Debian 8+、CentOS 7\"></a>Ubuntu 16.04+、Debian 8+、CentOS 7</h4><p>对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）</p>\n<pre><code>{\n  &quot;registry-mirrors&quot;: [\n    &quot;https://registry.docker-cn.com&quot;\n  ]\n}</code></pre><h4 id=\"重新启动服务。\"><a href=\"#重新启动服务。\" class=\"headerlink\" title=\"重新启动服务。\"></a>重新启动服务。</h4><pre><code>$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker</code></pre><hr>\n<h2 id=\"Docker-Compose-安装与卸载-1\"><a href=\"#Docker-Compose-安装与卸载-1\" class=\"headerlink\" title=\"Docker Compose 安装与卸载\"></a>Docker Compose 安装与卸载</h2><h4 id=\"二进制包-1\"><a href=\"#二进制包-1\" class=\"headerlink\" title=\"二进制包\"></a>二进制包</h4><p>在 Linux 上的也安装十分简单，从 官方 <a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener\">GitHub Release</a> 处直接下载编译好的二进制文件即可。</p>\n<p>例如，在 Linux 64 位系统上直接下载对应的二进制包</p>\n<pre><code>$ sudo curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose\n$ sudo chmod +x /usr/local/bin/docker-compose</code></pre><hr>\n<h2 id=\"基于-Docker-安装-Tomcat\"><a href=\"#基于-Docker-安装-Tomcat\" class=\"headerlink\" title=\"基于 Docker 安装 Tomcat\"></a>基于 Docker 安装 Tomcat</h2><pre><code>version: &apos;3.1&apos;\nservices:\n  tomcat:\n    restart: always\n    image: tomcat\n    container_name: tomcat\n    ports:\n      - 8080:8080\n    volumes:\n      - /usr/local/docker/tomcat/webapps/test:/usr/local/tomcat/webapps/test\n    environment:\n      TZ: Asia/Shanghai</code></pre><h2 id=\"基于-Docker-安装-MySQL\"><a href=\"#基于-Docker-安装-MySQL\" class=\"headerlink\" title=\"基于 Docker 安装 MySQL\"></a>基于 Docker 安装 MySQL</h2><h5 id=\"MySQL5\"><a href=\"#MySQL5\" class=\"headerlink\" title=\"MySQL5\"></a>MySQL5</h5><pre><code>version: &apos;3.1&apos;\nservices:\n  mysql:\n    restart: always\n    image: mysql:5.7.22\n    container_name: mysql\n    ports:\n      - 3306:3306\n    environment:\n      TZ: Asia/Shanghai\n      MYSQL_ROOT_PASSWORD: 123456\n    command:\n      --character-set-server=utf8mb4\n      --collation-server=utf8mb4_general_ci\n      --explicit_defaults_for_timestamp=true\n      --lower_case_table_names=1\n      --max_allowed_packet=128M\n      --sql-mode=&quot;STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO&quot;\n    volumes:\n      - mysql-data:/var/lib/mysql\n\nvolumes:\n  mysql-data:</code></pre><h5 id=\"MySQL8\"><a href=\"#MySQL8\" class=\"headerlink\" title=\"MySQL8\"></a>MySQL8</h5><pre><code>version: &apos;3.1&apos;\nservices:\n  db:\n    image: mysql\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: 123456\n    command:\n      --default-authentication-plugin=mysql_native_password\n      --character-set-server=utf8mb4\n      --collation-server=utf8mb4_general_ci\n      --explicit_defaults_for_timestamp=true\n      --lower_case_table_names=1\n    ports:\n      - 3306:3306\n    volumes:\n      - ./data:/var/lib/mysql\n\n  adminer:\n    image: adminer\n    restart: always\n    ports:\n      - 8080:8080</code></pre><hr>\n<h2 id=\"基于-Docker-安装-GitLab\"><a href=\"#基于-Docker-安装-GitLab\" class=\"headerlink\" title=\"基于 Docker 安装 GitLab\"></a>基于 Docker 安装 GitLab</h2><pre><code>version: &apos;3&apos;\nservices:\n    web:\n      image: &apos;twang2218/gitlab-ce-zh&apos;\n      restart: always\n      hostname: &apos;47.107.245.83&apos;\n      environment:\n        TZ: &apos;Asia/Shanghai&apos;\n        GITLAB_OMNIBUS_CONFIG: |\n          external_url &apos;http://47.107.245.83&apos;\n          gitlab_rails[&apos;gitlab_shell_ssh_port&apos;] = 2222\n          unicorn[&apos;port&apos;] = 8888\n          nginx[&apos;listen_port&apos;] = 80\n      ports:\n        - &apos;80:80&apos;\n        - &apos;8443:443&apos;\n        - &apos;2222:22&apos;\n      volumes:\n        - ./config:/etc/gitlab\n        - ./data:/var/opt/gitlab\n        - ./logs:/var/log/gitlab</code></pre><ul>\n<li>设置管理员初始密码，这里的密码最好是 字母 + 数字 组合，并且 大于等于 8 位</li>\n<li>配置完成后登录，管理员账号是 root</li>\n</ul>\n<hr>\n<h2 id=\"基于-Docker-安装-Registry\"><a href=\"#基于-Docker-安装-Registry\" class=\"headerlink\" title=\"基于 Docker 安装 Registry\"></a>基于 Docker 安装 Registry</h2><pre><code>version: &apos;3&apos;\nservices:\n    web:\n      image: &apos;twang2218/gitlab-ce-zh&apos;\n      restart: always\n      hostname: &apos;47.107.245.83&apos;\n      environment:\n        TZ: &apos;Asia/Shanghai&apos;\n        GITLAB_OMNIBUS_CONFIG: |\n          external_url &apos;http://47.107.245.83&apos;\n          gitlab_rails[&apos;gitlab_shell_ssh_port&apos;] = 2222\n          unicorn[&apos;port&apos;] = 8888\n          nginx[&apos;listen_port&apos;] = 80\n      ports:\n        - &apos;80:80&apos;\n        - &apos;8443:443&apos;\n        - &apos;2222:22&apos;\n      volumes:\n        - ./config:/etc/gitlab\n        - ./data:/var/opt/gitlab\n        - ./logs:/var/log/gitlab</code></pre><h4 id=\"配置-Docker-Registry-客户端\"><a href=\"#配置-Docker-Registry-客户端\" class=\"headerlink\" title=\"配置 Docker Registry 客户端\"></a>配置 Docker Registry 客户端</h4><p>案例使用的是 Ubuntu Server 16.04 LTS 版本，属于 systemd 系统，需要在 /etc/docker/daemon.json 中增加如下内容（如果文件不存在请新建该文件）</p>\n<pre><code>{\n  &quot;registry-mirrors&quot;: [\n    &quot;https://registry.docker-cn.com&quot;\n  ],\n  &quot;insecure-registries&quot;: [\n    &quot;ip:5000&quot;\n  ]\n}</code></pre><h5 id=\"之后重新启动服务。\"><a href=\"#之后重新启动服务。\" class=\"headerlink\" title=\"之后重新启动服务。\"></a>之后重新启动服务。</h5><pre><code>$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker</code></pre><hr>\n<h2 id=\"基于-Docker-安装-Nexus\"><a href=\"#基于-Docker-安装-Nexus\" class=\"headerlink\" title=\"基于 Docker 安装 Nexus\"></a>基于 Docker 安装 Nexus</h2><pre><code>version: &apos;3.1&apos;\nservices:\n  nexus:\n    restart: always\n    image: sonatype/nexus3\n    container_name: nexus\n    ports:\n      - 8081:8081\n    volumes:\n      - /usr/local/docker/nexus/data:/nexus-data</code></pre><h6 id=\"注：-启动时如果出现权限问题可以使用：chmod-777-usr-local-docker-nexus-data-赋予数据卷目录可读可写的权限\"><a href=\"#注：-启动时如果出现权限问题可以使用：chmod-777-usr-local-docker-nexus-data-赋予数据卷目录可读可写的权限\" class=\"headerlink\" title=\"注： 启动时如果出现权限问题可以使用：chmod 777 /usr/local/docker/nexus/data 赋予数据卷目录可读可写的权限\"></a>注： 启动时如果出现权限问题可以使用：chmod 777 /usr/local/docker/nexus/data 赋予数据卷目录可读可写的权限</h6><h5 id=\"登录控制台验证安装\"><a href=\"#登录控制台验证安装\" class=\"headerlink\" title=\"登录控制台验证安装\"></a>登录控制台验证安装</h5><p>地址：<a href=\"http://ip:port/\" target=\"_blank\" rel=\"noopener\">http://ip:port/</a><br>用户名：admin   </p>\n<h2 id=\"密码：admin123\"><a href=\"#密码：admin123\" class=\"headerlink\" title=\"密码：admin123   \"></a>密码：admin123   </h2><h2 id=\"基于-Docker-安装-Zookeeper\"><a href=\"#基于-Docker-安装-Zookeeper\" class=\"headerlink\" title=\"基于 Docker 安装 Zookeeper\"></a>基于 Docker 安装 Zookeeper</h2><h5 id=\"Zookeeper-部署有三种方式，单机模式、集群模式、伪集群模式，以下采用-Docker-的方式部署\"><a href=\"#Zookeeper-部署有三种方式，单机模式、集群模式、伪集群模式，以下采用-Docker-的方式部署\" class=\"headerlink\" title=\"Zookeeper 部署有三种方式，单机模式、集群模式、伪集群模式，以下采用 Docker 的方式部署\"></a>Zookeeper 部署有三种方式，单机模式、集群模式、伪集群模式，以下采用 Docker 的方式部署</h5><h6 id=\"单机模式\"><a href=\"#单机模式\" class=\"headerlink\" title=\"单机模式\"></a>单机模式</h6><h6 id=\"docker-compose-yml\"><a href=\"#docker-compose-yml\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h6><pre><code>version: &apos;3.1&apos;\n\nservices:\n    zoo1:\n        image: zookeeper\n        restart: always\n        hostname: zoo1\n        ports:\n            - 2181:2181\n        environment:\n            ZOO_MY_ID: 1\n            ZOO_SERVERS: server.1=zoo1:2888:3888</code></pre><h5 id=\"集群模式\"><a href=\"#集群模式\" class=\"headerlink\" title=\"集群模式\"></a>集群模式</h5><p>准备 3 台 Ubuntu Server 系统，并分别配置 Zookeeper</p>\n<h6 id=\"第一台主机\"><a href=\"#第一台主机\" class=\"headerlink\" title=\"第一台主机\"></a>第一台主机</h6><h6 id=\"docker-compose-yml-1\"><a href=\"#docker-compose-yml-1\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h6><pre><code>version: &apos;3.1&apos;\nservices:\n    zoo1:\n        image: zookeeper\n        restart: always\n        environment:\n            ZOO_MY_ID: 1\n            ZOO_SERVERS: server.1=192.168.75.130:2888:3888 server.2=192.168.75.134:2888:3888 server.3=192.168.75.135:2888:3888\n        network_mode: host</code></pre><h5 id=\"验证测试\"><a href=\"#验证测试\" class=\"headerlink\" title=\"验证测试\"></a>验证测试</h5><pre><code>root@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo1_1 /bin/bash\nbash-4.3# ./bin/zkServer.sh status\nZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nMode: leader</code></pre><h5 id=\"第二台主机\"><a href=\"#第二台主机\" class=\"headerlink\" title=\"第二台主机\"></a>第二台主机</h5><h6 id=\"docker-compose-yml-2\"><a href=\"#docker-compose-yml-2\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h6><pre><code>version: &apos;3.1&apos;\nservices:\n    zoo2:\n        image: zookeeper\n        restart: always\n        environment:\n            ZOO_MY_ID: 2\n            ZOO_SERVERS: server.1=192.168.75.130:2888:3888 server.2=192.168.75.134:2888:3888 server.3=192.168.75.135:2888:3888\n        network_mode: host</code></pre><h6 id=\"验证测试-1\"><a href=\"#验证测试-1\" class=\"headerlink\" title=\"验证测试\"></a>验证测试</h6><pre><code>root@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo2_1 /bin/bash\nbash-4.3# ./bin/zkServer.sh status\nZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nMode: follower</code></pre><h5 id=\"第三台主机\"><a href=\"#第三台主机\" class=\"headerlink\" title=\"第三台主机\"></a>第三台主机</h5><h6 id=\"docker-compose-yml-3\"><a href=\"#docker-compose-yml-3\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h6><pre><code>version: &apos;3.1&apos;\nservices:\n    zoo3:\n        image: zookeeper\n        restart: always\n        environment:\n            ZOO_MY_ID: 3\n            ZOO_SERVERS: server.1=192.168.75.130:2888:3888 server.2=192.168.75.134:2888:3888 server.3=192.168.75.135:2888:3888\n        network_mode: host</code></pre><h5 id=\"验证测试-2\"><a href=\"#验证测试-2\" class=\"headerlink\" title=\"验证测试\"></a>验证测试</h5><pre><code>root@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo3_1 /bin/bash\nbash-4.3# ./bin/zkServer.sh status\nZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nMode: follower</code></pre><h5 id=\"伪集群模式\"><a href=\"#伪集群模式\" class=\"headerlink\" title=\"伪集群模式\"></a>伪集群模式</h5><h6 id=\"docker-compose-yml-4\"><a href=\"#docker-compose-yml-4\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h6><pre><code>version: &apos;3.1&apos;\nservices:\n    zoo1:\n        image: zookeeper\n        restart: always\n        hostname: zoo1\n        ports:\n            - 2181:2181\n        environment:\n            ZOO_MY_ID: 1\n            ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888\n    zoo2:\n        image: zookeeper\n        restart: always\n        hostname: zoo2\n        ports:\n            - 2182:2181\n        environment:\n            ZOO_MY_ID: 2\n            ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888\n\n    zoo3:\n        image: zookeeper\n        restart: always\n        hostname: zoo3\n        ports:\n            - 2183:2181\n        environment:\n            ZOO_MY_ID: 3\n            ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888</code></pre><h5 id=\"验证是否安装成功\"><a href=\"#验证是否安装成功\" class=\"headerlink\" title=\"验证是否安装成功\"></a>验证是否安装成功</h5><h6 id=\"分别以交互方式进入容器查看\"><a href=\"#分别以交互方式进入容器查看\" class=\"headerlink\" title=\"分别以交互方式进入容器查看\"></a>分别以交互方式进入容器查看</h6><pre><code>docker exec -it zookeeper_zoo1_1 /bin/bash\ndocker exec -it zookeeper_zoo2_1 /bin/bash\ndocker exec -it zookeeper_zoo3_1 /bin/bash</code></pre><h6 id=\"使用服务端工具检查服务器状态\"><a href=\"#使用服务端工具检查服务器状态\" class=\"headerlink\" title=\"使用服务端工具检查服务器状态\"></a>使用服务端工具检查服务器状态</h6><pre><code>root@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo1_1 /bin/bash\nbash-4.3# ./bin/zkServer.sh status\nZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nMode: follower\n\nroot@UbuntuBase:/usr/local/docker/zookeeper# docker exec -it zookeeper_zoo2_1 /bin/bash\nbash-4.3# ./bin/zkServer.sh status\nZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nMode: follower</code></pre>"},{"title":"ElasticSearch","date":"2019-08-20T07:52:22.000Z","_content":"","source":"_posts/ElasticSearch.md","raw":"---\ntitle: ElasticSearch\ndate: 2019-08-20 15:52:22\ntags:\n---\n","slug":"ElasticSearch","published":1,"updated":"2021-04-22T03:43:26.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcys40005ko9bsfyhzjo3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Excel解析","date":"2019-09-03T09:54:03.000Z","_content":"","source":"_posts/Excel解析.md","raw":"---\ntitle: Excel解析\ndate: 2019-09-03 17:54:03\ntags:\n---\n","slug":"Excel解析","published":1,"updated":"2021-04-22T03:43:26.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcys50006ko9bc4jv5ttr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"GitLab基本使用","date":"2019-09-05T09:09:34.000Z","_content":"\n# 概述\nGitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。\n\n# 基于Docker安装GitLab\n\n```text\n\nversion: '3'\nservices:\n    web:\n      image: 'twang2218/gitlab-ce-zh:10.5'\n      restart: always\n      hostname: '192.168.2.129'\n      environment:\n        TZ: 'Asia/Shanghai'\n        GITLAB_OMNIBUS_CONFIG: |\n          external_url 'http://192.168.2.129:8080'\n          gitlab_rails['gitlab_shell_ssh_port'] = 2222\n          unicorn['port'] = 8888\n          nginx['listen_port'] = 8080\n      ports:\n        - '8080:8080'\n        - '8443:443'\n        - '2222:22'\n      volumes:\n        - /usr/local/docker/gitlab/config:/etc/gitlab\n        - /usr/local/docker/gitlab/data:/var/opt/gitlab\n        - /usr/local/docker/gitlab/logs:/var/log/gitlab\n\n```\n# 项目创建\n\n\n# 分支保护\n\n\n# 权限配置","source":"_posts/GitLab基本使用.md","raw":"---\ntitle: GitLab基本使用\ndate: 2019-09-05 17:09:34\ntags:\n---\n\n# 概述\nGitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。\n\n# 基于Docker安装GitLab\n\n```text\n\nversion: '3'\nservices:\n    web:\n      image: 'twang2218/gitlab-ce-zh:10.5'\n      restart: always\n      hostname: '192.168.2.129'\n      environment:\n        TZ: 'Asia/Shanghai'\n        GITLAB_OMNIBUS_CONFIG: |\n          external_url 'http://192.168.2.129:8080'\n          gitlab_rails['gitlab_shell_ssh_port'] = 2222\n          unicorn['port'] = 8888\n          nginx['listen_port'] = 8080\n      ports:\n        - '8080:8080'\n        - '8443:443'\n        - '2222:22'\n      volumes:\n        - /usr/local/docker/gitlab/config:/etc/gitlab\n        - /usr/local/docker/gitlab/data:/var/opt/gitlab\n        - /usr/local/docker/gitlab/logs:/var/log/gitlab\n\n```\n# 项目创建\n\n\n# 分支保护\n\n\n# 权限配置","slug":"GitLab基本使用","published":1,"updated":"2021-04-22T03:43:26.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcys60007ko9bii2wms47","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。</p>\n<h1 id=\"基于Docker安装GitLab\"><a href=\"#基于Docker安装GitLab\" class=\"headerlink\" title=\"基于Docker安装GitLab\"></a>基于Docker安装GitLab</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">version: &apos;3&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">    web:</span><br><span class=\"line\">      image: &apos;twang2218/gitlab-ce-zh:10.5&apos;</span><br><span class=\"line\">      restart: always</span><br><span class=\"line\">      hostname: &apos;192.168.2.129&apos;</span><br><span class=\"line\">      environment:</span><br><span class=\"line\">        TZ: &apos;Asia/Shanghai&apos;</span><br><span class=\"line\">        GITLAB_OMNIBUS_CONFIG: |</span><br><span class=\"line\">          external_url &apos;http://192.168.2.129:8080&apos;</span><br><span class=\"line\">          gitlab_rails[&apos;gitlab_shell_ssh_port&apos;] = 2222</span><br><span class=\"line\">          unicorn[&apos;port&apos;] = 8888</span><br><span class=\"line\">          nginx[&apos;listen_port&apos;] = 8080</span><br><span class=\"line\">      ports:</span><br><span class=\"line\">        - &apos;8080:8080&apos;</span><br><span class=\"line\">        - &apos;8443:443&apos;</span><br><span class=\"line\">        - &apos;2222:22&apos;</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">        - /usr/local/docker/gitlab/config:/etc/gitlab</span><br><span class=\"line\">        - /usr/local/docker/gitlab/data:/var/opt/gitlab</span><br><span class=\"line\">        - /usr/local/docker/gitlab/logs:/var/log/gitlab</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"项目创建\"><a href=\"#项目创建\" class=\"headerlink\" title=\"项目创建\"></a>项目创建</h1><h1 id=\"分支保护\"><a href=\"#分支保护\" class=\"headerlink\" title=\"分支保护\"></a>分支保护</h1><h1 id=\"权限配置\"><a href=\"#权限配置\" class=\"headerlink\" title=\"权限配置\"></a>权限配置</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。</p>\n<h1 id=\"基于Docker安装GitLab\"><a href=\"#基于Docker安装GitLab\" class=\"headerlink\" title=\"基于Docker安装GitLab\"></a>基于Docker安装GitLab</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">version: &apos;3&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">    web:</span><br><span class=\"line\">      image: &apos;twang2218/gitlab-ce-zh:10.5&apos;</span><br><span class=\"line\">      restart: always</span><br><span class=\"line\">      hostname: &apos;192.168.2.129&apos;</span><br><span class=\"line\">      environment:</span><br><span class=\"line\">        TZ: &apos;Asia/Shanghai&apos;</span><br><span class=\"line\">        GITLAB_OMNIBUS_CONFIG: |</span><br><span class=\"line\">          external_url &apos;http://192.168.2.129:8080&apos;</span><br><span class=\"line\">          gitlab_rails[&apos;gitlab_shell_ssh_port&apos;] = 2222</span><br><span class=\"line\">          unicorn[&apos;port&apos;] = 8888</span><br><span class=\"line\">          nginx[&apos;listen_port&apos;] = 8080</span><br><span class=\"line\">      ports:</span><br><span class=\"line\">        - &apos;8080:8080&apos;</span><br><span class=\"line\">        - &apos;8443:443&apos;</span><br><span class=\"line\">        - &apos;2222:22&apos;</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">        - /usr/local/docker/gitlab/config:/etc/gitlab</span><br><span class=\"line\">        - /usr/local/docker/gitlab/data:/var/opt/gitlab</span><br><span class=\"line\">        - /usr/local/docker/gitlab/logs:/var/log/gitlab</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"项目创建\"><a href=\"#项目创建\" class=\"headerlink\" title=\"项目创建\"></a>项目创建</h1><h1 id=\"分支保护\"><a href=\"#分支保护\" class=\"headerlink\" title=\"分支保护\"></a>分支保护</h1><h1 id=\"权限配置\"><a href=\"#权限配置\" class=\"headerlink\" title=\"权限配置\"></a>权限配置</h1>"},{"title":"Hexo搭建个人博客","date":"2021-04-22T02:17:47.000Z","_content":"","source":"_posts/Hexo搭建个人博客.md","raw":"---\ntitle: Hexo搭建个人博客\ndate: 2021-04-22 10:17:47\ntags:\n---\n","slug":"Hexo搭建个人博客","published":1,"updated":"2021-04-22T03:43:26.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcys70009ko9bi5vxokxb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Apache Dubbo","date":"2019-07-19T06:36:39.000Z","_content":"\n# Apache Dubbo\n**概述**\nApache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源 Java RPC 分布式服务框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。她最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看，Dubbo 采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）两个角色。\n- 官网 ：http://dubbo.apache.org/zh-cn\n- GitHub：https://github.com/apache/incubator-dubbo\n**Dubbo 的服务治理**\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/dubbo-1.png)\n\n**Dubbo 的核心功能**\n- Remoting：远程通讯，提供对多种 NIO 框架抽象封装，包括“同步转异步”和“请求-响应”模式的信息交换方式。\n- Cluster：服务框架，提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。\n- Registry：服务注册中心，服务自动发现: 基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。\n**Dubbo 的组件角色**\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/%E7%BB%84%E4%BB%B6-1.png)\n\n| 组件角色  | 说明                                   |\n| :-------- | :------------------------------------- |\n| Provider  | 暴露服务的服务提供方                   |\n| Consumer  | 调用远程服务的服务消费方               |\n| Registry  | 服务注册与发现的注册中心               |\n| Monitor   | 统计服务的调用次调和调用时间的监控中心 |\n| Container | 服务运行容器                           |\n\n\n**调用关系说明：**\n\n- 服务容器 `Container` 负责启动，加载，运行服务提供者。\n- 服务提供者 `Provider` 在启动时，向注册中心注册自己提供的服务。\n- 服务消费者 `Consumer` 在启动时，向注册中心订阅自己所需的服务。\n- 注册中心 `Registry` 返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。\n- 服务消费者 `Consumer`，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。\n- 服务消费者 `Consumer` 和提供者 `Provider`，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心 `Monitor`。\n\n# 第一个Dubbo应用程序\n\n## 创建服务接口项目\n创建一个名为`hello-dubbo-service-user-api`的项目，该项目只负责定义接口\n\n**POM**\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.funtl</groupId>\n    <artifactId>hello-dubbo-service-user-api</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n</project>\n```\n**定义服务接口**\n```java\npublic interface UserService {\n    String sayHi();\n}\n\n```\n\n## 创建服务提供者项目\n创建一个名为 `hello-dubbo-service-user-provider` 的项目，该项目主要用于实现接口\n\n**POM**\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.funtl</groupId>\n    <artifactId>hello-dubbo-service-user-provider</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>hello-dubbo-service-user-provider</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.6.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.alibaba.boot</groupId>\n            <artifactId>dubbo-spring-boot-starter</artifactId>\n            <version>0.2.0</version>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba.boot</groupId>\n            <artifactId>dubbo-spring-boot-actuator</artifactId>\n            <version>0.2.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.funtl</groupId>\n            <artifactId>hello-dubbo-service-user-api</artifactId>\n            <version>1.0.0-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <mainClass>com.funtl.hello.dubbo.service.user.provider.HelloDubboServiceUserProviderApplication</mainClass>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n主要增加了以下依赖：\n- `com.alibaba.boot:dubbo-spring-boot-starter` ：Dubbo Starter\n- `com.alibaba.boot:dubbo-spring-boot-actuator`: Dubbo 的服务状态检查\n- `com.funtl:hello-dubbo-service-user-api:1.0.0-SNAPSHOT` ：刚才创建的接口项目\n\n**通过 @Service 注解实现服务提供方**\n\n```java\nimport com.alibaba.dubbo.config.annotation.Service;\nimport com.funtl.hello.dubbo.service.user.api.UserService;\n\n@Service(version = \"${user.service.version}\")\npublic class UserServiceImpl implements UserService {\n    @Override\n    public String sayHi() {\n        return \"Hello Dubbo\";\n    }\n}\n```\n**application.yml**\n\n```java\n# Spring boot application\nspring:\n  application:\n    name: hello-dubbo-service-user-provider\n\n# UserService service version\nuser:\n  service:\n    version: 1.0.0\n\n# Dubbo Config properties\ndubbo:\n  ## Base packages to scan Dubbo Component：@com.alibaba.dubbo.config.annotation.Service\n  scan:\n    basePackages: com.funtl.hello.dubbo.service.user.provider.api\n  ## ApplicationConfig Bean\n  application:\n    id: hello-dubbo-service-user-provider\n    name: hello-dubbo-service-user-provider\n    qos-port: 22222\n    qos-enable: true\n  ## ProtocolConfig Bean\n  protocol:\n    id: dubbo\n    name: dubbo\n    port: 12345\n    status: server\n  ## RegistryConfig Bean\n  registry:\n    id: zookeeper\n    address: zookeeper://192.168.10.131:2181?backup=192.168.10.131:2182,192.168.10.131:2183\n\n# Enables Dubbo All Endpoints\nmanagement:\n  endpoint:\n    dubbo:\n      enabled: true\n    dubbo-shutdown:\n      enabled: true\n    dubbo-configs:\n      enabled: true\n    dubbo-services:\n      enabled: true\n    dubbo-references:\n      enabled: true\n    dubbo-properties:\n      enabled: true\n  # Dubbo Health\n  health:\n    dubbo:\n      status:\n        ## StatusChecker Name defaults (default : \"memory\", \"load\" )\n        defaults: memory\n        ## StatusChecker Name extras (default : empty )\n        extras: load,threadpool\n```\n\n## 创建服务消费者项目\n创建一个名为 `hello-dubbo-service-user-consumer` 的项目，该项目用于消费接口（调用接口）\n\n**POM**\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.funtl</groupId>\n    <artifactId>hello-dubbo-service-user-consumer</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>hello-dubbo-service-user-consumer</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.6.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.alibaba.boot</groupId>\n            <artifactId>dubbo-spring-boot-starter</artifactId>\n            <version>0.2.0</version>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba.boot</groupId>\n            <artifactId>dubbo-spring-boot-actuator</artifactId>\n            <version>0.2.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.funtl</groupId>\n            <artifactId>hello-dubbo-service-user-api</artifactId>\n            <version>1.0.0-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <mainClass>com.funtl.hello.dubbo.service.user.consumer.HelloDubboServiceUserConsumerApplication</mainClass>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n**通过 `@Reference` 注入 `UserService`**\n```java\nimport com.alibaba.dubbo.config.annotation.Reference;\nimport com.funtl.hello.dubbo.service.user.api.UserService;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class UserController {\n\n    @Reference(version = \"${user.service.version}\")\n    private UserService userService;\n\n    @RequestMapping(value = \"hi\")\n    public String sayHi() {\n        return userService.sayHi();\n    }\n}\n```\n\n**application.yml**\n```java\n# Spring boot application\nspring:\n  application:\n    name: hello-dubbo-service-user-consumer\nserver:\n  port: 9090\n\n# UserService service version\nuser:\n  service:\n    version: 1.0.0\n\n# Dubbo Config properties\ndubbo:\n  scan:\n    basePackages: com.funtl.hello.dubbo.service.user.consumer.controller\n  ## ApplicationConfig Bean\n  application:\n    id: hello-dubbo-service-user-consumer\n    name: hello-dubbo-service-user-consumer\n  ## RegistryConfig Bean\n  registry:\n    id: zookeeper\n    address: zookeeper://192.168.10.131:2181?backup=192.168.10.131:2182,192.168.10.131:2183\n\n# Dubbo Endpoint (default status is disable)\nendpoints:\n  dubbo:\n    enabled: true\n\nmanagement:\n  server:\n    port: 9091\n  # Dubbo Health\n  health:\n    dubbo:\n      status:\n        ## StatusChecker Name defaults (default : \"memory\", \"load\" )\n        defaults: memory\n  # Enables Dubbo All Endpoints\n  endpoint:\n    dubbo:\n      enabled: true\n    dubbo-shutdown:\n      enabled: true\n    dubbo-configs:\n      enabled: true\n    dubbo-services:\n      enabled: true\n    dubbo-references:\n      enabled: true\n    dubbo-properties:\n      enabled: true\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"\n```\n# Dubbo 的负载均衡\n## 概述\n在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 `random` 随机调用。\n## 负载均衡策略\n**Random LoadBalance**\n- **随机**，按权重设置随机概率。\n- 在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。\n**RoundRobin LoadBalance**\n- **轮询**，按公约后的权重设置轮询比率。\n- 存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。\n**LeastActive LoadBalance**\n- **最少活跃调用数**，相同活跃数的随机，活跃数指调用前后计数差。\n- 使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。\n**ConsistentHash LoadBalance**\n- **一致性 Hash**，相同参数的请求总是发到同一提供者。\n- 当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。\n- 算法参见：https://blog.csdn.net/u013679744/article/details/79166256\n- 缺省只对第一个参数 Hash，如果要修改，请配置 <dubbo:parameter key=\"hash.arguments\" value=\"0,1\" />\n- 缺省用 160 份虚拟节点，如果要修改，请配置 <dubbo:parameter key=\"hash.nodes\" value=\"320\" /\n\n## 配置\n**服务端服务级别**\n```java\ndubbo:\n  provider:\n    loadbalance: leastactive\n```\n**客户端服务级别**\n```java\ndubbo:\n  consumer:\n    loadbalance: leastactive\n```\n\n# Dubbo + Hystrix 实现服务熔断\n## 熔断器简介\n在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以通过 `RPC` 相互调用。为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证 100% 可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，`Servlet` 容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的 **“雪崩”** 效应。\n\n## Dubbo Provider 中使用熔断器\n**在`pom.xml`中增加依赖**\n```java\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n    <version>2.0.1.RELEASE</version>\n</dependency>\n```\n**在 Application 中增加 `@EnableHystrix` 注解**\n```java\nimport com.alibaba.dubbo.container.Main;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.hystrix.EnableHystrix;\n\n@EnableHystrix\n@SpringBootApplication\npublic class HelloDubboServiceUserProviderApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(HelloDubboServiceUserProviderApplication.class, args);\n        Main.main(args);\n    }\n}\n```\n**在 Service 中增加 `@HystrixCommand` 注解**\n在调用方法上增加 `@HystrixCommand` 配置，此时调用会经过 Hystrix 代理\n```java\nimport com.alibaba.dubbo.config.annotation.Service;\nimport com.funtl.hello.dubbo.service.user.api.UserService;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;\nimport org.springframework.beans.factory.annotation.Value;\n\n@Service(version = \"${user.service.version}\")\npublic class UserServiceImpl implements UserService {\n\n    @Value(\"${dubbo.protocol.port}\")\n    private String port;\n\n    @HystrixCommand(commandProperties = {\n            @HystrixProperty(name = \"circuitBreaker.requestVolumeThreshold\", value = \"10\"),\n            @HystrixProperty(name = \"execution.isolation.thread.timeoutInMilliseconds\", value = \"2000\")\n    })\n    @Override\n    public String sayHi() {\n//        return \"Hello Dubbo, i am from port:\" + port;\n        throw new RuntimeException(\"Exception to show hystrix enabled.\");\n    }\n}\n```\n\n## Dubbo Consumer 中使用熔断器\n**在 `pom.xml` 中增加依赖**\n```java\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n    <version>2.0.1.RELEASE</version>\n</dependency>\n```\n\n**在 Application 中增加 `@EnableHystrix` 注解**\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.hystrix.EnableHystrix;\n\n@EnableHystrix\n@SpringBootApplication\npublic class HelloDubboServiceUserConsumerApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(HelloDubboServiceUserConsumerApplication.class, args);\n    }\n}\n```\n\n**在调用方法上增加 `@HystrixCommand` 注解，并指定 `fallbackMethod` 方法**\n\n```java\nimport com.alibaba.dubbo.config.annotation.Reference;\nimport com.funtl.hello.dubbo.service.user.api.UserService;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class UserController {\n\n    @Reference(version = \"${user.service.version}\")\n    private UserService userService;\n\n    @HystrixCommand(fallbackMethod = \"hiError\")\n    @RequestMapping(value = \"hi\")\n    public String sayHi() {\n        return userService.sayHi();\n    }\n\n    public String hiError() {\n        return \"Hystrix fallback\";\n    }\n}\n```\n\n\n\n\n\n\n\n\n","source":"_posts/Dubbo.md","raw":"---\ntitle: Apache Dubbo\ndate: 2019-07-19 14:36:39\ntags:\n    - 分布式\n---\n\n# Apache Dubbo\n**概述**\nApache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源 Java RPC 分布式服务框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。她最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看，Dubbo 采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）两个角色。\n- 官网 ：http://dubbo.apache.org/zh-cn\n- GitHub：https://github.com/apache/incubator-dubbo\n**Dubbo 的服务治理**\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/dubbo-1.png)\n\n**Dubbo 的核心功能**\n- Remoting：远程通讯，提供对多种 NIO 框架抽象封装，包括“同步转异步”和“请求-响应”模式的信息交换方式。\n- Cluster：服务框架，提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。\n- Registry：服务注册中心，服务自动发现: 基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。\n**Dubbo 的组件角色**\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/%E7%BB%84%E4%BB%B6-1.png)\n\n| 组件角色  | 说明                                   |\n| :-------- | :------------------------------------- |\n| Provider  | 暴露服务的服务提供方                   |\n| Consumer  | 调用远程服务的服务消费方               |\n| Registry  | 服务注册与发现的注册中心               |\n| Monitor   | 统计服务的调用次调和调用时间的监控中心 |\n| Container | 服务运行容器                           |\n\n\n**调用关系说明：**\n\n- 服务容器 `Container` 负责启动，加载，运行服务提供者。\n- 服务提供者 `Provider` 在启动时，向注册中心注册自己提供的服务。\n- 服务消费者 `Consumer` 在启动时，向注册中心订阅自己所需的服务。\n- 注册中心 `Registry` 返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。\n- 服务消费者 `Consumer`，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。\n- 服务消费者 `Consumer` 和提供者 `Provider`，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心 `Monitor`。\n\n# 第一个Dubbo应用程序\n\n## 创建服务接口项目\n创建一个名为`hello-dubbo-service-user-api`的项目，该项目只负责定义接口\n\n**POM**\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.funtl</groupId>\n    <artifactId>hello-dubbo-service-user-api</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n</project>\n```\n**定义服务接口**\n```java\npublic interface UserService {\n    String sayHi();\n}\n\n```\n\n## 创建服务提供者项目\n创建一个名为 `hello-dubbo-service-user-provider` 的项目，该项目主要用于实现接口\n\n**POM**\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.funtl</groupId>\n    <artifactId>hello-dubbo-service-user-provider</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>hello-dubbo-service-user-provider</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.6.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.alibaba.boot</groupId>\n            <artifactId>dubbo-spring-boot-starter</artifactId>\n            <version>0.2.0</version>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba.boot</groupId>\n            <artifactId>dubbo-spring-boot-actuator</artifactId>\n            <version>0.2.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.funtl</groupId>\n            <artifactId>hello-dubbo-service-user-api</artifactId>\n            <version>1.0.0-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <mainClass>com.funtl.hello.dubbo.service.user.provider.HelloDubboServiceUserProviderApplication</mainClass>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n主要增加了以下依赖：\n- `com.alibaba.boot:dubbo-spring-boot-starter` ：Dubbo Starter\n- `com.alibaba.boot:dubbo-spring-boot-actuator`: Dubbo 的服务状态检查\n- `com.funtl:hello-dubbo-service-user-api:1.0.0-SNAPSHOT` ：刚才创建的接口项目\n\n**通过 @Service 注解实现服务提供方**\n\n```java\nimport com.alibaba.dubbo.config.annotation.Service;\nimport com.funtl.hello.dubbo.service.user.api.UserService;\n\n@Service(version = \"${user.service.version}\")\npublic class UserServiceImpl implements UserService {\n    @Override\n    public String sayHi() {\n        return \"Hello Dubbo\";\n    }\n}\n```\n**application.yml**\n\n```java\n# Spring boot application\nspring:\n  application:\n    name: hello-dubbo-service-user-provider\n\n# UserService service version\nuser:\n  service:\n    version: 1.0.0\n\n# Dubbo Config properties\ndubbo:\n  ## Base packages to scan Dubbo Component：@com.alibaba.dubbo.config.annotation.Service\n  scan:\n    basePackages: com.funtl.hello.dubbo.service.user.provider.api\n  ## ApplicationConfig Bean\n  application:\n    id: hello-dubbo-service-user-provider\n    name: hello-dubbo-service-user-provider\n    qos-port: 22222\n    qos-enable: true\n  ## ProtocolConfig Bean\n  protocol:\n    id: dubbo\n    name: dubbo\n    port: 12345\n    status: server\n  ## RegistryConfig Bean\n  registry:\n    id: zookeeper\n    address: zookeeper://192.168.10.131:2181?backup=192.168.10.131:2182,192.168.10.131:2183\n\n# Enables Dubbo All Endpoints\nmanagement:\n  endpoint:\n    dubbo:\n      enabled: true\n    dubbo-shutdown:\n      enabled: true\n    dubbo-configs:\n      enabled: true\n    dubbo-services:\n      enabled: true\n    dubbo-references:\n      enabled: true\n    dubbo-properties:\n      enabled: true\n  # Dubbo Health\n  health:\n    dubbo:\n      status:\n        ## StatusChecker Name defaults (default : \"memory\", \"load\" )\n        defaults: memory\n        ## StatusChecker Name extras (default : empty )\n        extras: load,threadpool\n```\n\n## 创建服务消费者项目\n创建一个名为 `hello-dubbo-service-user-consumer` 的项目，该项目用于消费接口（调用接口）\n\n**POM**\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.funtl</groupId>\n    <artifactId>hello-dubbo-service-user-consumer</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>hello-dubbo-service-user-consumer</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.6.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.alibaba.boot</groupId>\n            <artifactId>dubbo-spring-boot-starter</artifactId>\n            <version>0.2.0</version>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba.boot</groupId>\n            <artifactId>dubbo-spring-boot-actuator</artifactId>\n            <version>0.2.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.funtl</groupId>\n            <artifactId>hello-dubbo-service-user-api</artifactId>\n            <version>1.0.0-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <mainClass>com.funtl.hello.dubbo.service.user.consumer.HelloDubboServiceUserConsumerApplication</mainClass>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n**通过 `@Reference` 注入 `UserService`**\n```java\nimport com.alibaba.dubbo.config.annotation.Reference;\nimport com.funtl.hello.dubbo.service.user.api.UserService;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class UserController {\n\n    @Reference(version = \"${user.service.version}\")\n    private UserService userService;\n\n    @RequestMapping(value = \"hi\")\n    public String sayHi() {\n        return userService.sayHi();\n    }\n}\n```\n\n**application.yml**\n```java\n# Spring boot application\nspring:\n  application:\n    name: hello-dubbo-service-user-consumer\nserver:\n  port: 9090\n\n# UserService service version\nuser:\n  service:\n    version: 1.0.0\n\n# Dubbo Config properties\ndubbo:\n  scan:\n    basePackages: com.funtl.hello.dubbo.service.user.consumer.controller\n  ## ApplicationConfig Bean\n  application:\n    id: hello-dubbo-service-user-consumer\n    name: hello-dubbo-service-user-consumer\n  ## RegistryConfig Bean\n  registry:\n    id: zookeeper\n    address: zookeeper://192.168.10.131:2181?backup=192.168.10.131:2182,192.168.10.131:2183\n\n# Dubbo Endpoint (default status is disable)\nendpoints:\n  dubbo:\n    enabled: true\n\nmanagement:\n  server:\n    port: 9091\n  # Dubbo Health\n  health:\n    dubbo:\n      status:\n        ## StatusChecker Name defaults (default : \"memory\", \"load\" )\n        defaults: memory\n  # Enables Dubbo All Endpoints\n  endpoint:\n    dubbo:\n      enabled: true\n    dubbo-shutdown:\n      enabled: true\n    dubbo-configs:\n      enabled: true\n    dubbo-services:\n      enabled: true\n    dubbo-references:\n      enabled: true\n    dubbo-properties:\n      enabled: true\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"\n```\n# Dubbo 的负载均衡\n## 概述\n在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 `random` 随机调用。\n## 负载均衡策略\n**Random LoadBalance**\n- **随机**，按权重设置随机概率。\n- 在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。\n**RoundRobin LoadBalance**\n- **轮询**，按公约后的权重设置轮询比率。\n- 存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。\n**LeastActive LoadBalance**\n- **最少活跃调用数**，相同活跃数的随机，活跃数指调用前后计数差。\n- 使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。\n**ConsistentHash LoadBalance**\n- **一致性 Hash**，相同参数的请求总是发到同一提供者。\n- 当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。\n- 算法参见：https://blog.csdn.net/u013679744/article/details/79166256\n- 缺省只对第一个参数 Hash，如果要修改，请配置 <dubbo:parameter key=\"hash.arguments\" value=\"0,1\" />\n- 缺省用 160 份虚拟节点，如果要修改，请配置 <dubbo:parameter key=\"hash.nodes\" value=\"320\" /\n\n## 配置\n**服务端服务级别**\n```java\ndubbo:\n  provider:\n    loadbalance: leastactive\n```\n**客户端服务级别**\n```java\ndubbo:\n  consumer:\n    loadbalance: leastactive\n```\n\n# Dubbo + Hystrix 实现服务熔断\n## 熔断器简介\n在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以通过 `RPC` 相互调用。为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证 100% 可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，`Servlet` 容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的 **“雪崩”** 效应。\n\n## Dubbo Provider 中使用熔断器\n**在`pom.xml`中增加依赖**\n```java\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n    <version>2.0.1.RELEASE</version>\n</dependency>\n```\n**在 Application 中增加 `@EnableHystrix` 注解**\n```java\nimport com.alibaba.dubbo.container.Main;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.hystrix.EnableHystrix;\n\n@EnableHystrix\n@SpringBootApplication\npublic class HelloDubboServiceUserProviderApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(HelloDubboServiceUserProviderApplication.class, args);\n        Main.main(args);\n    }\n}\n```\n**在 Service 中增加 `@HystrixCommand` 注解**\n在调用方法上增加 `@HystrixCommand` 配置，此时调用会经过 Hystrix 代理\n```java\nimport com.alibaba.dubbo.config.annotation.Service;\nimport com.funtl.hello.dubbo.service.user.api.UserService;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;\nimport org.springframework.beans.factory.annotation.Value;\n\n@Service(version = \"${user.service.version}\")\npublic class UserServiceImpl implements UserService {\n\n    @Value(\"${dubbo.protocol.port}\")\n    private String port;\n\n    @HystrixCommand(commandProperties = {\n            @HystrixProperty(name = \"circuitBreaker.requestVolumeThreshold\", value = \"10\"),\n            @HystrixProperty(name = \"execution.isolation.thread.timeoutInMilliseconds\", value = \"2000\")\n    })\n    @Override\n    public String sayHi() {\n//        return \"Hello Dubbo, i am from port:\" + port;\n        throw new RuntimeException(\"Exception to show hystrix enabled.\");\n    }\n}\n```\n\n## Dubbo Consumer 中使用熔断器\n**在 `pom.xml` 中增加依赖**\n```java\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n    <version>2.0.1.RELEASE</version>\n</dependency>\n```\n\n**在 Application 中增加 `@EnableHystrix` 注解**\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.hystrix.EnableHystrix;\n\n@EnableHystrix\n@SpringBootApplication\npublic class HelloDubboServiceUserConsumerApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(HelloDubboServiceUserConsumerApplication.class, args);\n    }\n}\n```\n\n**在调用方法上增加 `@HystrixCommand` 注解，并指定 `fallbackMethod` 方法**\n\n```java\nimport com.alibaba.dubbo.config.annotation.Reference;\nimport com.funtl.hello.dubbo.service.user.api.UserService;\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class UserController {\n\n    @Reference(version = \"${user.service.version}\")\n    private UserService userService;\n\n    @HystrixCommand(fallbackMethod = \"hiError\")\n    @RequestMapping(value = \"hi\")\n    public String sayHi() {\n        return userService.sayHi();\n    }\n\n    public String hiError() {\n        return \"Hystrix fallback\";\n    }\n}\n```\n\n\n\n\n\n\n\n\n","slug":"Dubbo","published":1,"updated":"2021-04-22T03:43:26.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcys8000ako9b1fmf83ro","content":"<h1 id=\"Apache-Dubbo\"><a href=\"#Apache-Dubbo\" class=\"headerlink\" title=\"Apache Dubbo\"></a>Apache Dubbo</h1><p><strong>概述</strong><br>Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源 Java RPC 分布式服务框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。她最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看，Dubbo 采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）两个角色。</p>\n<ul>\n<li>官网 ：<a href=\"http://dubbo.apache.org/zh-cn\" target=\"_blank\" rel=\"noopener\">http://dubbo.apache.org/zh-cn</a></li>\n<li>GitHub：<a href=\"https://github.com/apache/incubator-dubbo\" target=\"_blank\" rel=\"noopener\">https://github.com/apache/incubator-dubbo</a></li>\n</ul>\n<p><strong>Dubbo 的服务治理</strong><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/dubbo-1.png\" alt></p>\n<p><strong>Dubbo 的核心功能</strong></p>\n<ul>\n<li>Remoting：远程通讯，提供对多种 NIO 框架抽象封装，包括“同步转异步”和“请求-响应”模式的信息交换方式。</li>\n<li>Cluster：服务框架，提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。</li>\n<li>Registry：服务注册中心，服务自动发现: 基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。</li>\n</ul>\n<p><strong>Dubbo 的组件角色</strong></p>\n<p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/%E7%BB%84%E4%BB%B6-1.png\" alt></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">组件角色</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Provider</td>\n<td align=\"left\">暴露服务的服务提供方</td>\n</tr>\n<tr>\n<td align=\"left\">Consumer</td>\n<td align=\"left\">调用远程服务的服务消费方</td>\n</tr>\n<tr>\n<td align=\"left\">Registry</td>\n<td align=\"left\">服务注册与发现的注册中心</td>\n</tr>\n<tr>\n<td align=\"left\">Monitor</td>\n<td align=\"left\">统计服务的调用次调和调用时间的监控中心</td>\n</tr>\n<tr>\n<td align=\"left\">Container</td>\n<td align=\"left\">服务运行容器</td>\n</tr>\n</tbody></table>\n<p><strong>调用关系说明：</strong></p>\n<ul>\n<li>服务容器 <code>Container</code> 负责启动，加载，运行服务提供者。</li>\n<li>服务提供者 <code>Provider</code> 在启动时，向注册中心注册自己提供的服务。</li>\n<li>服务消费者 <code>Consumer</code> 在启动时，向注册中心订阅自己所需的服务。</li>\n<li>注册中心 <code>Registry</code> 返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li>\n<li>服务消费者 <code>Consumer</code>，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li>\n<li>服务消费者 <code>Consumer</code> 和提供者 <code>Provider</code>，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心 <code>Monitor</code>。</li>\n</ul>\n<h1 id=\"第一个Dubbo应用程序\"><a href=\"#第一个Dubbo应用程序\" class=\"headerlink\" title=\"第一个Dubbo应用程序\"></a>第一个Dubbo应用程序</h1><h2 id=\"创建服务接口项目\"><a href=\"#创建服务接口项目\" class=\"headerlink\" title=\"创建服务接口项目\"></a>创建服务接口项目</h2><p>创建一个名为<code>hello-dubbo-service-user-api</code>的项目，该项目只负责定义接口</p>\n<p><strong>POM</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span><br><span class=\"line\">         xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.funtl&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;hello-dubbo-service-user-api&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>定义服务接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">sayHi</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建服务提供者项目\"><a href=\"#创建服务提供者项目\" class=\"headerlink\" title=\"创建服务提供者项目\"></a>创建服务提供者项目</h2><p>创建一个名为 <code>hello-dubbo-service-user-provider</code> 的项目，该项目主要用于实现接口</p>\n<p><strong>POM</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.funtl&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;hello-dubbo-service-user-provider&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;name&gt;hello-dubbo-service-user-provider&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;0.2.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;dubbo-spring-boot-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;0.2.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.funtl&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;hello-dubbo-service-user-api&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;mainClass&gt;com.funtl.hello.dubbo.service.user.provider.HelloDubboServiceUserProviderApplication&lt;/mainClass&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n<p>主要增加了以下依赖：</p>\n<ul>\n<li><code>com.alibaba.boot:dubbo-spring-boot-starter</code> ：Dubbo Starter</li>\n<li><code>com.alibaba.boot:dubbo-spring-boot-actuator</code>: Dubbo 的服务状态检查</li>\n<li><code>com.funtl:hello-dubbo-service-user-api:1.0.0-SNAPSHOT</code> ：刚才创建的接口项目</li>\n</ul>\n<p><strong>通过 @Service 注解实现服务提供方</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.funtl.hello.dubbo.service.user.api.UserService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span>(version = <span class=\"string\">\"$&#123;user.service.version&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello Dubbo\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Spring boot application</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: hello-dubbo-service-user-provider</span><br><span class=\"line\"></span><br><span class=\"line\"># UserService service version</span><br><span class=\"line\">user:</span><br><span class=\"line\">  service:</span><br><span class=\"line\">    version: <span class=\"number\">1.0</span>.0</span><br><span class=\"line\"></span><br><span class=\"line\"># Dubbo Config properties</span><br><span class=\"line\">dubbo:</span><br><span class=\"line\">  ## Base packages to scan Dubbo Component：@com.alibaba.dubbo.config.annotation.Service</span><br><span class=\"line\">  scan:</span><br><span class=\"line\">    basePackages: com.funtl.hello.dubbo.service.user.provider.api</span><br><span class=\"line\">  ## ApplicationConfig Bean</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    id: hello-dubbo-service-user-provider</span><br><span class=\"line\">    name: hello-dubbo-service-user-provider</span><br><span class=\"line\">    qos-port: <span class=\"number\">22222</span></span><br><span class=\"line\">    qos-enable: <span class=\"keyword\">true</span></span><br><span class=\"line\">  ## ProtocolConfig Bean</span><br><span class=\"line\">  protocol:</span><br><span class=\"line\">    id: dubbo</span><br><span class=\"line\">    name: dubbo</span><br><span class=\"line\">    port: <span class=\"number\">12345</span></span><br><span class=\"line\">    status: server</span><br><span class=\"line\">  ## RegistryConfig Bean</span><br><span class=\"line\">  registry:</span><br><span class=\"line\">    id: zookeeper</span><br><span class=\"line\">    address: zookeeper:<span class=\"comment\">//192.168.10.131:2181?backup=192.168.10.131:2182,192.168.10.131:2183</span></span><br><span class=\"line\"></span><br><span class=\"line\"># Enables Dubbo All Endpoints</span><br><span class=\"line\">management:</span><br><span class=\"line\">  endpoint:</span><br><span class=\"line\">    dubbo:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-shutdown:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-configs:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-services:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-references:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-properties:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">  # Dubbo Health</span><br><span class=\"line\">  health:</span><br><span class=\"line\">    dubbo:</span><br><span class=\"line\">      status:</span><br><span class=\"line\">        ## StatusChecker Name defaults (default : \"memory\", \"load\" )</span><br><span class=\"line\">        defaults: memory</span><br><span class=\"line\">        ## StatusChecker Name extras (default : empty )</span><br><span class=\"line\">        extras: load,threadpool</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建服务消费者项目\"><a href=\"#创建服务消费者项目\" class=\"headerlink\" title=\"创建服务消费者项目\"></a>创建服务消费者项目</h2><p>创建一个名为 <code>hello-dubbo-service-user-consumer</code> 的项目，该项目用于消费接口（调用接口）</p>\n<p><strong>POM</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.funtl&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;hello-dubbo-service-user-consumer&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;name&gt;hello-dubbo-service-user-consumer&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;0.2.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;dubbo-spring-boot-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;0.2.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.funtl&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;hello-dubbo-service-user-api&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;mainClass&gt;com.funtl.hello.dubbo.service.user.consumer.HelloDubboServiceUserConsumerApplication&lt;/mainClass&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>通过 <code>@Reference</code> 注入 <code>UserService</code></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.funtl.hello.dubbo.service.user.api.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Reference</span>(version = <span class=\"string\">\"$&#123;user.service.version&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"hi\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userService.sayHi();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Spring boot application</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: hello-dubbo-service-user-consumer</span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: <span class=\"number\">9090</span></span><br><span class=\"line\"></span><br><span class=\"line\"># UserService service version</span><br><span class=\"line\">user:</span><br><span class=\"line\">  service:</span><br><span class=\"line\">    version: <span class=\"number\">1.0</span>.0</span><br><span class=\"line\"></span><br><span class=\"line\"># Dubbo Config properties</span><br><span class=\"line\">dubbo:</span><br><span class=\"line\">  scan:</span><br><span class=\"line\">    basePackages: com.funtl.hello.dubbo.service.user.consumer.controller</span><br><span class=\"line\">  ## ApplicationConfig Bean</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    id: hello-dubbo-service-user-consumer</span><br><span class=\"line\">    name: hello-dubbo-service-user-consumer</span><br><span class=\"line\">  ## RegistryConfig Bean</span><br><span class=\"line\">  registry:</span><br><span class=\"line\">    id: zookeeper</span><br><span class=\"line\">    address: zookeeper:<span class=\"comment\">//192.168.10.131:2181?backup=192.168.10.131:2182,192.168.10.131:2183</span></span><br><span class=\"line\"></span><br><span class=\"line\"># Dubbo Endpoint (default status is disable)</span><br><span class=\"line\">endpoints:</span><br><span class=\"line\">  dubbo:</span><br><span class=\"line\">    enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">management:</span><br><span class=\"line\">  server:</span><br><span class=\"line\">    port: <span class=\"number\">9091</span></span><br><span class=\"line\">  # Dubbo Health</span><br><span class=\"line\">  health:</span><br><span class=\"line\">    dubbo:</span><br><span class=\"line\">      status:</span><br><span class=\"line\">        ## StatusChecker Name defaults (default : \"memory\", \"load\" )</span><br><span class=\"line\">        defaults: memory</span><br><span class=\"line\">  # Enables Dubbo All Endpoints</span><br><span class=\"line\">  endpoint:</span><br><span class=\"line\">    dubbo:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-shutdown:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-configs:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-services:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-references:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-properties:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">  endpoints:</span><br><span class=\"line\">    web:</span><br><span class=\"line\">      exposure:</span><br><span class=\"line\">        include: <span class=\"string\">\"*\"</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Dubbo-的负载均衡\"><a href=\"#Dubbo-的负载均衡\" class=\"headerlink\" title=\"Dubbo 的负载均衡\"></a>Dubbo 的负载均衡</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 <code>random</code> 随机调用。</p>\n<h2 id=\"负载均衡策略\"><a href=\"#负载均衡策略\" class=\"headerlink\" title=\"负载均衡策略\"></a>负载均衡策略</h2><p><strong>Random LoadBalance</strong></p>\n<ul>\n<li><strong>随机</strong>，按权重设置随机概率。</li>\n<li>在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</li>\n</ul>\n<p><strong>RoundRobin LoadBalance</strong></p>\n<ul>\n<li><strong>轮询</strong>，按公约后的权重设置轮询比率。</li>\n<li>存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</li>\n</ul>\n<p><strong>LeastActive LoadBalance</strong></p>\n<ul>\n<li><strong>最少活跃调用数</strong>，相同活跃数的随机，活跃数指调用前后计数差。</li>\n<li>使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</li>\n</ul>\n<p><strong>ConsistentHash LoadBalance</strong></p>\n<ul>\n<li><strong>一致性 Hash</strong>，相同参数的请求总是发到同一提供者。</li>\n<li>当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。</li>\n<li>算法参见：<a href=\"https://blog.csdn.net/u013679744/article/details/79166256\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u013679744/article/details/79166256</a></li>\n<li>缺省只对第一个参数 Hash，如果要修改，请配置 &lt;dubbo:parameter key=”hash.arguments” value=”0,1” /&gt;</li>\n<li>缺省用 160 份虚拟节点，如果要修改，请配置 &lt;dubbo:parameter key=”hash.nodes” value=”320” /</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p><strong>服务端服务级别</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dubbo:</span><br><span class=\"line\">  provider:</span><br><span class=\"line\">    loadbalance: leastactive</span><br></pre></td></tr></table></figure>\n\n<p><strong>客户端服务级别</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dubbo:</span><br><span class=\"line\">  consumer:</span><br><span class=\"line\">    loadbalance: leastactive</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Dubbo-Hystrix-实现服务熔断\"><a href=\"#Dubbo-Hystrix-实现服务熔断\" class=\"headerlink\" title=\"Dubbo + Hystrix 实现服务熔断\"></a>Dubbo + Hystrix 实现服务熔断</h1><h2 id=\"熔断器简介\"><a href=\"#熔断器简介\" class=\"headerlink\" title=\"熔断器简介\"></a>熔断器简介</h2><p>在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以通过 <code>RPC</code> 相互调用。为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证 100% 可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，<code>Servlet</code> 容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的 <strong>“雪崩”</strong> 效应。</p>\n<h2 id=\"Dubbo-Provider-中使用熔断器\"><a href=\"#Dubbo-Provider-中使用熔断器\" class=\"headerlink\" title=\"Dubbo Provider 中使用熔断器\"></a>Dubbo Provider 中使用熔断器</h2><p><strong>在<code>pom.xml</code>中增加依赖</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在 Application 中增加 <code>@EnableHystrix</code> 注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.container.Main;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EnableHystrix</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloDubboServiceUserProviderApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(HelloDubboServiceUserProviderApplication.class, args);</span><br><span class=\"line\">        Main.main(args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在 Service 中增加 <code>@HystrixCommand</code> 注解</strong><br>在调用方法上增加 <code>@HystrixCommand</code> 配置，此时调用会经过 Hystrix 代理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.funtl.hello.dubbo.service.user.api.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span>(version = <span class=\"string\">\"$&#123;user.service.version&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;dubbo.protocol.port&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String port;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@HystrixCommand</span>(commandProperties = &#123;</span><br><span class=\"line\">            <span class=\"meta\">@HystrixProperty</span>(name = <span class=\"string\">\"circuitBreaker.requestVolumeThreshold\"</span>, value = <span class=\"string\">\"10\"</span>),</span><br><span class=\"line\">            <span class=\"meta\">@HystrixProperty</span>(name = <span class=\"string\">\"execution.isolation.thread.timeoutInMilliseconds\"</span>, value = <span class=\"string\">\"2000\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        return \"Hello Dubbo, i am from port:\" + port;</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Exception to show hystrix enabled.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Dubbo-Consumer-中使用熔断器\"><a href=\"#Dubbo-Consumer-中使用熔断器\" class=\"headerlink\" title=\"Dubbo Consumer 中使用熔断器\"></a>Dubbo Consumer 中使用熔断器</h2><p><strong>在 <code>pom.xml</code> 中增加依赖</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在 Application 中增加 <code>@EnableHystrix</code> 注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EnableHystrix</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloDubboServiceUserConsumerApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(HelloDubboServiceUserConsumerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在调用方法上增加 <code>@HystrixCommand</code> 注解，并指定 <code>fallbackMethod</code> 方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.funtl.hello.dubbo.service.user.api.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Reference</span>(version = <span class=\"string\">\"$&#123;user.service.version&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@HystrixCommand</span>(fallbackMethod = <span class=\"string\">\"hiError\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"hi\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userService.sayHi();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hiError</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hystrix fallback\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Apache-Dubbo\"><a href=\"#Apache-Dubbo\" class=\"headerlink\" title=\"Apache Dubbo\"></a>Apache Dubbo</h1><p><strong>概述</strong><br>Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源 Java RPC 分布式服务框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。她最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看，Dubbo 采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）两个角色。</p>\n<ul>\n<li>官网 ：<a href=\"http://dubbo.apache.org/zh-cn\" target=\"_blank\" rel=\"noopener\">http://dubbo.apache.org/zh-cn</a></li>\n<li>GitHub：<a href=\"https://github.com/apache/incubator-dubbo\" target=\"_blank\" rel=\"noopener\">https://github.com/apache/incubator-dubbo</a></li>\n</ul>\n<p><strong>Dubbo 的服务治理</strong><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/dubbo-1.png\" alt></p>\n<p><strong>Dubbo 的核心功能</strong></p>\n<ul>\n<li>Remoting：远程通讯，提供对多种 NIO 框架抽象封装，包括“同步转异步”和“请求-响应”模式的信息交换方式。</li>\n<li>Cluster：服务框架，提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。</li>\n<li>Registry：服务注册中心，服务自动发现: 基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。</li>\n</ul>\n<p><strong>Dubbo 的组件角色</strong></p>\n<p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/%E7%BB%84%E4%BB%B6-1.png\" alt></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">组件角色</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Provider</td>\n<td align=\"left\">暴露服务的服务提供方</td>\n</tr>\n<tr>\n<td align=\"left\">Consumer</td>\n<td align=\"left\">调用远程服务的服务消费方</td>\n</tr>\n<tr>\n<td align=\"left\">Registry</td>\n<td align=\"left\">服务注册与发现的注册中心</td>\n</tr>\n<tr>\n<td align=\"left\">Monitor</td>\n<td align=\"left\">统计服务的调用次调和调用时间的监控中心</td>\n</tr>\n<tr>\n<td align=\"left\">Container</td>\n<td align=\"left\">服务运行容器</td>\n</tr>\n</tbody></table>\n<p><strong>调用关系说明：</strong></p>\n<ul>\n<li>服务容器 <code>Container</code> 负责启动，加载，运行服务提供者。</li>\n<li>服务提供者 <code>Provider</code> 在启动时，向注册中心注册自己提供的服务。</li>\n<li>服务消费者 <code>Consumer</code> 在启动时，向注册中心订阅自己所需的服务。</li>\n<li>注册中心 <code>Registry</code> 返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li>\n<li>服务消费者 <code>Consumer</code>，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li>\n<li>服务消费者 <code>Consumer</code> 和提供者 <code>Provider</code>，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心 <code>Monitor</code>。</li>\n</ul>\n<h1 id=\"第一个Dubbo应用程序\"><a href=\"#第一个Dubbo应用程序\" class=\"headerlink\" title=\"第一个Dubbo应用程序\"></a>第一个Dubbo应用程序</h1><h2 id=\"创建服务接口项目\"><a href=\"#创建服务接口项目\" class=\"headerlink\" title=\"创建服务接口项目\"></a>创建服务接口项目</h2><p>创建一个名为<code>hello-dubbo-service-user-api</code>的项目，该项目只负责定义接口</p>\n<p><strong>POM</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span><br><span class=\"line\">         xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.funtl&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;hello-dubbo-service-user-api&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>定义服务接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">sayHi</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建服务提供者项目\"><a href=\"#创建服务提供者项目\" class=\"headerlink\" title=\"创建服务提供者项目\"></a>创建服务提供者项目</h2><p>创建一个名为 <code>hello-dubbo-service-user-provider</code> 的项目，该项目主要用于实现接口</p>\n<p><strong>POM</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.funtl&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;hello-dubbo-service-user-provider&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;name&gt;hello-dubbo-service-user-provider&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;0.2.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;dubbo-spring-boot-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;0.2.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.funtl&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;hello-dubbo-service-user-api&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;mainClass&gt;com.funtl.hello.dubbo.service.user.provider.HelloDubboServiceUserProviderApplication&lt;/mainClass&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n<p>主要增加了以下依赖：</p>\n<ul>\n<li><code>com.alibaba.boot:dubbo-spring-boot-starter</code> ：Dubbo Starter</li>\n<li><code>com.alibaba.boot:dubbo-spring-boot-actuator</code>: Dubbo 的服务状态检查</li>\n<li><code>com.funtl:hello-dubbo-service-user-api:1.0.0-SNAPSHOT</code> ：刚才创建的接口项目</li>\n</ul>\n<p><strong>通过 @Service 注解实现服务提供方</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.funtl.hello.dubbo.service.user.api.UserService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span>(version = <span class=\"string\">\"$&#123;user.service.version&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello Dubbo\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Spring boot application</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: hello-dubbo-service-user-provider</span><br><span class=\"line\"></span><br><span class=\"line\"># UserService service version</span><br><span class=\"line\">user:</span><br><span class=\"line\">  service:</span><br><span class=\"line\">    version: <span class=\"number\">1.0</span>.0</span><br><span class=\"line\"></span><br><span class=\"line\"># Dubbo Config properties</span><br><span class=\"line\">dubbo:</span><br><span class=\"line\">  ## Base packages to scan Dubbo Component：@com.alibaba.dubbo.config.annotation.Service</span><br><span class=\"line\">  scan:</span><br><span class=\"line\">    basePackages: com.funtl.hello.dubbo.service.user.provider.api</span><br><span class=\"line\">  ## ApplicationConfig Bean</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    id: hello-dubbo-service-user-provider</span><br><span class=\"line\">    name: hello-dubbo-service-user-provider</span><br><span class=\"line\">    qos-port: <span class=\"number\">22222</span></span><br><span class=\"line\">    qos-enable: <span class=\"keyword\">true</span></span><br><span class=\"line\">  ## ProtocolConfig Bean</span><br><span class=\"line\">  protocol:</span><br><span class=\"line\">    id: dubbo</span><br><span class=\"line\">    name: dubbo</span><br><span class=\"line\">    port: <span class=\"number\">12345</span></span><br><span class=\"line\">    status: server</span><br><span class=\"line\">  ## RegistryConfig Bean</span><br><span class=\"line\">  registry:</span><br><span class=\"line\">    id: zookeeper</span><br><span class=\"line\">    address: zookeeper:<span class=\"comment\">//192.168.10.131:2181?backup=192.168.10.131:2182,192.168.10.131:2183</span></span><br><span class=\"line\"></span><br><span class=\"line\"># Enables Dubbo All Endpoints</span><br><span class=\"line\">management:</span><br><span class=\"line\">  endpoint:</span><br><span class=\"line\">    dubbo:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-shutdown:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-configs:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-services:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-references:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-properties:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">  # Dubbo Health</span><br><span class=\"line\">  health:</span><br><span class=\"line\">    dubbo:</span><br><span class=\"line\">      status:</span><br><span class=\"line\">        ## StatusChecker Name defaults (default : \"memory\", \"load\" )</span><br><span class=\"line\">        defaults: memory</span><br><span class=\"line\">        ## StatusChecker Name extras (default : empty )</span><br><span class=\"line\">        extras: load,threadpool</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建服务消费者项目\"><a href=\"#创建服务消费者项目\" class=\"headerlink\" title=\"创建服务消费者项目\"></a>创建服务消费者项目</h2><p>创建一个名为 <code>hello-dubbo-service-user-consumer</code> 的项目，该项目用于消费接口（调用接口）</p>\n<p><strong>POM</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.funtl&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;hello-dubbo-service-user-consumer&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;name&gt;hello-dubbo-service-user-consumer&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;0.2.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;dubbo-spring-boot-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;0.2.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.funtl&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;hello-dubbo-service-user-api&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;mainClass&gt;com.funtl.hello.dubbo.service.user.consumer.HelloDubboServiceUserConsumerApplication&lt;/mainClass&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>通过 <code>@Reference</code> 注入 <code>UserService</code></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.funtl.hello.dubbo.service.user.api.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Reference</span>(version = <span class=\"string\">\"$&#123;user.service.version&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"hi\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userService.sayHi();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Spring boot application</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: hello-dubbo-service-user-consumer</span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: <span class=\"number\">9090</span></span><br><span class=\"line\"></span><br><span class=\"line\"># UserService service version</span><br><span class=\"line\">user:</span><br><span class=\"line\">  service:</span><br><span class=\"line\">    version: <span class=\"number\">1.0</span>.0</span><br><span class=\"line\"></span><br><span class=\"line\"># Dubbo Config properties</span><br><span class=\"line\">dubbo:</span><br><span class=\"line\">  scan:</span><br><span class=\"line\">    basePackages: com.funtl.hello.dubbo.service.user.consumer.controller</span><br><span class=\"line\">  ## ApplicationConfig Bean</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    id: hello-dubbo-service-user-consumer</span><br><span class=\"line\">    name: hello-dubbo-service-user-consumer</span><br><span class=\"line\">  ## RegistryConfig Bean</span><br><span class=\"line\">  registry:</span><br><span class=\"line\">    id: zookeeper</span><br><span class=\"line\">    address: zookeeper:<span class=\"comment\">//192.168.10.131:2181?backup=192.168.10.131:2182,192.168.10.131:2183</span></span><br><span class=\"line\"></span><br><span class=\"line\"># Dubbo Endpoint (default status is disable)</span><br><span class=\"line\">endpoints:</span><br><span class=\"line\">  dubbo:</span><br><span class=\"line\">    enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">management:</span><br><span class=\"line\">  server:</span><br><span class=\"line\">    port: <span class=\"number\">9091</span></span><br><span class=\"line\">  # Dubbo Health</span><br><span class=\"line\">  health:</span><br><span class=\"line\">    dubbo:</span><br><span class=\"line\">      status:</span><br><span class=\"line\">        ## StatusChecker Name defaults (default : \"memory\", \"load\" )</span><br><span class=\"line\">        defaults: memory</span><br><span class=\"line\">  # Enables Dubbo All Endpoints</span><br><span class=\"line\">  endpoint:</span><br><span class=\"line\">    dubbo:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-shutdown:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-configs:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-services:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-references:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">    dubbo-properties:</span><br><span class=\"line\">      enabled: <span class=\"keyword\">true</span></span><br><span class=\"line\">  endpoints:</span><br><span class=\"line\">    web:</span><br><span class=\"line\">      exposure:</span><br><span class=\"line\">        include: <span class=\"string\">\"*\"</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Dubbo-的负载均衡\"><a href=\"#Dubbo-的负载均衡\" class=\"headerlink\" title=\"Dubbo 的负载均衡\"></a>Dubbo 的负载均衡</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 <code>random</code> 随机调用。</p>\n<h2 id=\"负载均衡策略\"><a href=\"#负载均衡策略\" class=\"headerlink\" title=\"负载均衡策略\"></a>负载均衡策略</h2><p><strong>Random LoadBalance</strong></p>\n<ul>\n<li><strong>随机</strong>，按权重设置随机概率。</li>\n<li>在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</li>\n</ul>\n<p><strong>RoundRobin LoadBalance</strong></p>\n<ul>\n<li><strong>轮询</strong>，按公约后的权重设置轮询比率。</li>\n<li>存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</li>\n</ul>\n<p><strong>LeastActive LoadBalance</strong></p>\n<ul>\n<li><strong>最少活跃调用数</strong>，相同活跃数的随机，活跃数指调用前后计数差。</li>\n<li>使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</li>\n</ul>\n<p><strong>ConsistentHash LoadBalance</strong></p>\n<ul>\n<li><strong>一致性 Hash</strong>，相同参数的请求总是发到同一提供者。</li>\n<li>当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。</li>\n<li>算法参见：<a href=\"https://blog.csdn.net/u013679744/article/details/79166256\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u013679744/article/details/79166256</a></li>\n<li>缺省只对第一个参数 Hash，如果要修改，请配置 &lt;dubbo:parameter key=”hash.arguments” value=”0,1” /&gt;</li>\n<li>缺省用 160 份虚拟节点，如果要修改，请配置 &lt;dubbo:parameter key=”hash.nodes” value=”320” /</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p><strong>服务端服务级别</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dubbo:</span><br><span class=\"line\">  provider:</span><br><span class=\"line\">    loadbalance: leastactive</span><br></pre></td></tr></table></figure>\n\n<p><strong>客户端服务级别</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dubbo:</span><br><span class=\"line\">  consumer:</span><br><span class=\"line\">    loadbalance: leastactive</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Dubbo-Hystrix-实现服务熔断\"><a href=\"#Dubbo-Hystrix-实现服务熔断\" class=\"headerlink\" title=\"Dubbo + Hystrix 实现服务熔断\"></a>Dubbo + Hystrix 实现服务熔断</h1><h2 id=\"熔断器简介\"><a href=\"#熔断器简介\" class=\"headerlink\" title=\"熔断器简介\"></a>熔断器简介</h2><p>在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以通过 <code>RPC</code> 相互调用。为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证 100% 可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，<code>Servlet</code> 容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的 <strong>“雪崩”</strong> 效应。</p>\n<h2 id=\"Dubbo-Provider-中使用熔断器\"><a href=\"#Dubbo-Provider-中使用熔断器\" class=\"headerlink\" title=\"Dubbo Provider 中使用熔断器\"></a>Dubbo Provider 中使用熔断器</h2><p><strong>在<code>pom.xml</code>中增加依赖</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在 Application 中增加 <code>@EnableHystrix</code> 注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.container.Main;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EnableHystrix</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloDubboServiceUserProviderApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(HelloDubboServiceUserProviderApplication.class, args);</span><br><span class=\"line\">        Main.main(args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在 Service 中增加 <code>@HystrixCommand</code> 注解</strong><br>在调用方法上增加 <code>@HystrixCommand</code> 配置，此时调用会经过 Hystrix 代理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.funtl.hello.dubbo.service.user.api.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span>(version = <span class=\"string\">\"$&#123;user.service.version&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;dubbo.protocol.port&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String port;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@HystrixCommand</span>(commandProperties = &#123;</span><br><span class=\"line\">            <span class=\"meta\">@HystrixProperty</span>(name = <span class=\"string\">\"circuitBreaker.requestVolumeThreshold\"</span>, value = <span class=\"string\">\"10\"</span>),</span><br><span class=\"line\">            <span class=\"meta\">@HystrixProperty</span>(name = <span class=\"string\">\"execution.isolation.thread.timeoutInMilliseconds\"</span>, value = <span class=\"string\">\"2000\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        return \"Hello Dubbo, i am from port:\" + port;</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Exception to show hystrix enabled.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Dubbo-Consumer-中使用熔断器\"><a href=\"#Dubbo-Consumer-中使用熔断器\" class=\"headerlink\" title=\"Dubbo Consumer 中使用熔断器\"></a>Dubbo Consumer 中使用熔断器</h2><p><strong>在 <code>pom.xml</code> 中增加依赖</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在 Application 中增加 <code>@EnableHystrix</code> 注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EnableHystrix</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloDubboServiceUserConsumerApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(HelloDubboServiceUserConsumerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在调用方法上增加 <code>@HystrixCommand</code> 注解，并指定 <code>fallbackMethod</code> 方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.funtl.hello.dubbo.service.user.api.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Reference</span>(version = <span class=\"string\">\"$&#123;user.service.version&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@HystrixCommand</span>(fallbackMethod = <span class=\"string\">\"hiError\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"hi\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userService.sayHi();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hiError</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hystrix fallback\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Git","date":"2019-08-16T02:46:55.000Z","_content":"\n# 概述\n\nGit是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 \nGit 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\nGit 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。\n\n# Git 常用命令\n\n|指令 | 说明 |\n| ------------------------------- | ------------------------------------------------------------ |\n| git init      | 初始化：创建一个git仓库，创建之后就会在当前目录生成一个.git的文件 |\n| git add filename| 添加文件：把文件添加到缓冲区                             |\n| git add . <br/>                git add --all | 添加所有文件到缓冲区（从目前掌握的水平看，和后面加“.”的区别在于，加all可以添加被手动删除的文件，而加“.”不行） |\n| git rm filename | 删除文件 |\n| git commit -m \"提交的说明\" | 提交：提交缓冲区的所有修改到仓库 |\n| git status | 查看git库的状态，未提交的文件，分为两种，add过已经在缓冲区的，未add过的 |\n| git diff filename | 比较：如果文件修改了，还没有提交，就可以比较文件修改前后的差异 |\n| git log | 查看日志 |\n| git reset | 版本回退：可以将当前仓库回退到历史的某个版本 |\n| git reset --hard HEAD^ | 回退到上一个版本（HEAD代表当前版本，有一个^代表上一个版本，以此类推） |\n| git reset --hard d7b5 | 回退到指定版本(其中d7b5是想回退的指定版本号的前几位) |\n| git reflog | 查看命令历史：查看仓库的操作历史 |\n| git branch | 查看分支的情况，前面带*号的就是当前分支 |\n| git branch 分支名 | 创建分支 |\n| git checkout 分支名 | 切换当前分支到指定分支 |\n| git checkout  -b 分支名 | 创建分支并切换到创建的分支 |\n| git merge 分支名 | 合并某分支的内容到当前分支 |\n| git branch -d 分支名 | 删除分支 |\n| git tag | 查看所有标签 |\n| git show 标签名 | 查看标签的详细信息 |\n| git push origin --tags | 推送所有tag |\n| git push origin v1.0 | 推送某个tag |\n\n# IDEA常用的git操作\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/idea-git.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/idet-git2.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/idat-git3.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/idea-git4.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/idea-git5.png)\n**版本回退**\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20190823162426.png)\n\n# Git 工作流简介\n\n## 概述\n\n工作流有各式各样的用法，但也正因此使得在实际工作中如何上手使用增加了难度。这篇指南通过总览公司团队中最常用的几种 Git 工作流让大家可以上手使用。\n\n在阅读的过程中请记住，本文中的几种工作流是作为方案指导而不是条例规定。在展示了各种工作流可能的用法后，你可以从不同的工作流中挑选或揉合出一个满足你自己需求的工作流\n\n## 集中式工作流\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/git-workflow-svn.png)\n转到分布式版本控制系统看起来像个令人生畏的任务，但不改变已用的工作流你也可以用上 Git 带来的收益。团队可以用和 Subversion 完全不变的方式来开发项目。\n\n但使用 Git 加强开发的工作流，Git 比 SVN 有几个优势。首先，每个开发可以有属于自己的整个工程的本地拷贝。隔离的环境让各个开发者的工作和项目的其他部分（修改）独立开来 —— 即自由地提交到自己的本地仓库，先完全忽略上游的开发，直到方便的时候再把修改反馈上去。\n\n其次，Git 提供了强壮的分支和合并模型。不像 SVN，Git 的分支设计成可以做为一种用来在仓库之间集成代码和分享修改的『失败安全』的机制。\n\n**工作方式**\n像 Subversion 一样，集中式工作流以中央仓库作为项目所有修改的单点实体。相比 SVN 缺省的开发分支 trunk，Git 叫做 master，所有修改提交到这个分支上。该工作流只用到 master 这一个分支。\n\n开发者开始先克隆中央仓库。在自己的项目拷贝中，像 SVN 一样的编辑文件和提交修改；但修改是存在本地的，和中央仓库是完全隔离的。开发者可以把和上游的同步延后到一个方便时间点。\n\n要发布修改到正式项目中，开发者要把本地 master 分支的修改『推（push）』到中央仓库中。这相当于 svn commit 操作，但 push 操作会把所有还不在中央仓库的本地提交都推上去。\n![](https://www.funtl.com/assets/git-workflow-svn-push-local.png)\n\n**解决冲突**\n中央仓库代表了正式项目，所以提交历史应该被尊重且是稳定不变的。如果开发者本地的提交历史和中央仓库有分歧，Git 会拒绝 push 提交否则会覆盖已经在中央库的正式提交。\n\n![](https://www.funtl.com/assets/git-workflow-svn-managingconflicts.png)\n\n在开发者提交自己功能修改到中央库前，需要先 fetch 在中央库的新增提交，rebase 自己提交到中央库提交历史之上。这样做的意思是在说，『我要把自己的修改加到别人已经完成的修改上。』最终的结果是一个完美的线性历史，就像以前的SVN 的工作流中一样。\n\n如果本地修改和上游提交有冲突，Git 会暂停 rebase 过程，给你手动解决冲突的机会。Git 解决合并冲突，用和生成提交一样的 git status 和 git add 命令，很一致方便。还有一点，如果解决冲突时遇到麻烦，Git 可以很简单中止整个 rebase 操作，重来一次（或者让别人来帮助解决）。\n\n## GitFlow 工作流\n\n**概述**\n![](https://www.funtl.com/assets/git-workflows-gitflow.png)\nGitFlow 工作流定义了一个围绕项目发布的严格分支模型。虽然比功能分支工作流复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。\n\nGitFlow 工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个很明确的角色，并定义分支之间如何和什么时候进行交互。除了使用功能分支，在做准备、维护和记录发布也使用各自的分支。当然你可以用上功能分支工作流所有的好处：Pull Requests、隔离实验性开发和更高效的协作。\n\nGitFlow 工作流定义了一个围绕项目发布的严格分支模型。虽然比功能分支工作流复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。\n\nGitFlow 工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个很明确的角色，并定义分支之间如何和什么时候进行交互。除了使用功能分支，在做准备、维护和记录发布也使用各自的分支。当然你可以用上功能分支工作流所有的好处：Pull Requests、隔离实验性开发和更高效的协作。\n\n#### 工作方式\n\nGitFlow 工作流仍然用中央仓库作为所有开发者的交互中心。和其它的工作流一样，开发者在本地工作并 push 分支到中央仓库中。\n\n#### 历史分支\n\n相对使用仅有的一个 master 分支，GitFlow 工作流使用2个分支来记录项目的历史。master 分支存储了正式发布的历史，而 develop 分支作为功能的集成分支。这样也方便 master 分支上的所有提交分配一个版本号。\n![](https://www.funtl.com/assets/git-workflow-release-cycle-1historical.png)\n\n剩下要说明的问题围绕着这2个分支的区别展开。\n\n#### 功能分支\n\n每个新功能位于一个自己的分支，这样可以 push 到中央仓库以备份和协作。但功能分支不是从 master 分支上拉出新分支，而是使用 develop 分支作为父分支。当新功能完成时，合并回 develop 分支。新功能提交应该从不直接与 master 分支交互。\n![](https://www.funtl.com/assets/git-workflow-release-cycle-2feature.png)\n\n注意，从各种含义和目的上来看，功能分支加上 develop 分支就是功能分支工作流的用法。但 GitFlow 工作流没有在这里止步。\n\n#### 发布分支\n\n![](https://www.funtl.com/assets/git-workflow-release-cycle-3release.png)\n\n一旦 develop 分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从 develop 分支上 fork 一个发布分支。新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上 —— 这个分支只应该做 Bug 修复、文档生成和其它面向发布任务。一旦对外发布的工作都完成了，发布分支合并到 master 分支并分配一个版本号打好 Tag。另外，这些从新建发布分支以来的做的修改要合并回 develop 分支。\n\n使用一个用于发布准备的专门分支，使得一个团队可以在完善当前的发布版本的同时，另一个团队可以继续开发下个版本的功能。这也打造定义良好的开发阶段（比如，可以很轻松地说，『这周我们要做准备发布版本 4.0』，并且在仓库的目录结构中可以实际看到）。\n\n常用的分支约定：\n\n用于新建发布分支的分支: develop\n用于合并的分支: master\n分支命名: release-* 或 release/*\n\n#### 维护分支\n\n![](https://www.funtl.com/assets/git-workflow-release-cycle-4maintenance.png)\n维护分支或说是热修复（hotfix）分支用于生成快速给产品发布版本（production releases）打补丁，这是唯一可以直接从 master 分支 fork 出来的分支。修复完成，修改应该马上合并回 master 分支和 develop 分支（当前的发布分支），master 分支应该用新的版本号打好 Tag。\n\n为 Bug 修复使用专门分支，让团队可以处理掉问题而不用打断其它工作或是等待下一个发布循环。你可以把维护分支想成是一个直接在 master 分支上处理的临时发布。\n","source":"_posts/Git.md","raw":"---\ntitle: Git\ndate: 2019-08-16 10:46:55\ntags:\n---\n\n# 概述\n\nGit是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 \nGit 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\nGit 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。\n\n# Git 常用命令\n\n|指令 | 说明 |\n| ------------------------------- | ------------------------------------------------------------ |\n| git init      | 初始化：创建一个git仓库，创建之后就会在当前目录生成一个.git的文件 |\n| git add filename| 添加文件：把文件添加到缓冲区                             |\n| git add . <br/>                git add --all | 添加所有文件到缓冲区（从目前掌握的水平看，和后面加“.”的区别在于，加all可以添加被手动删除的文件，而加“.”不行） |\n| git rm filename | 删除文件 |\n| git commit -m \"提交的说明\" | 提交：提交缓冲区的所有修改到仓库 |\n| git status | 查看git库的状态，未提交的文件，分为两种，add过已经在缓冲区的，未add过的 |\n| git diff filename | 比较：如果文件修改了，还没有提交，就可以比较文件修改前后的差异 |\n| git log | 查看日志 |\n| git reset | 版本回退：可以将当前仓库回退到历史的某个版本 |\n| git reset --hard HEAD^ | 回退到上一个版本（HEAD代表当前版本，有一个^代表上一个版本，以此类推） |\n| git reset --hard d7b5 | 回退到指定版本(其中d7b5是想回退的指定版本号的前几位) |\n| git reflog | 查看命令历史：查看仓库的操作历史 |\n| git branch | 查看分支的情况，前面带*号的就是当前分支 |\n| git branch 分支名 | 创建分支 |\n| git checkout 分支名 | 切换当前分支到指定分支 |\n| git checkout  -b 分支名 | 创建分支并切换到创建的分支 |\n| git merge 分支名 | 合并某分支的内容到当前分支 |\n| git branch -d 分支名 | 删除分支 |\n| git tag | 查看所有标签 |\n| git show 标签名 | 查看标签的详细信息 |\n| git push origin --tags | 推送所有tag |\n| git push origin v1.0 | 推送某个tag |\n\n# IDEA常用的git操作\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/idea-git.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/idet-git2.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/idat-git3.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/idea-git4.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/idea-git5.png)\n**版本回退**\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20190823162426.png)\n\n# Git 工作流简介\n\n## 概述\n\n工作流有各式各样的用法，但也正因此使得在实际工作中如何上手使用增加了难度。这篇指南通过总览公司团队中最常用的几种 Git 工作流让大家可以上手使用。\n\n在阅读的过程中请记住，本文中的几种工作流是作为方案指导而不是条例规定。在展示了各种工作流可能的用法后，你可以从不同的工作流中挑选或揉合出一个满足你自己需求的工作流\n\n## 集中式工作流\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/git-workflow-svn.png)\n转到分布式版本控制系统看起来像个令人生畏的任务，但不改变已用的工作流你也可以用上 Git 带来的收益。团队可以用和 Subversion 完全不变的方式来开发项目。\n\n但使用 Git 加强开发的工作流，Git 比 SVN 有几个优势。首先，每个开发可以有属于自己的整个工程的本地拷贝。隔离的环境让各个开发者的工作和项目的其他部分（修改）独立开来 —— 即自由地提交到自己的本地仓库，先完全忽略上游的开发，直到方便的时候再把修改反馈上去。\n\n其次，Git 提供了强壮的分支和合并模型。不像 SVN，Git 的分支设计成可以做为一种用来在仓库之间集成代码和分享修改的『失败安全』的机制。\n\n**工作方式**\n像 Subversion 一样，集中式工作流以中央仓库作为项目所有修改的单点实体。相比 SVN 缺省的开发分支 trunk，Git 叫做 master，所有修改提交到这个分支上。该工作流只用到 master 这一个分支。\n\n开发者开始先克隆中央仓库。在自己的项目拷贝中，像 SVN 一样的编辑文件和提交修改；但修改是存在本地的，和中央仓库是完全隔离的。开发者可以把和上游的同步延后到一个方便时间点。\n\n要发布修改到正式项目中，开发者要把本地 master 分支的修改『推（push）』到中央仓库中。这相当于 svn commit 操作，但 push 操作会把所有还不在中央仓库的本地提交都推上去。\n![](https://www.funtl.com/assets/git-workflow-svn-push-local.png)\n\n**解决冲突**\n中央仓库代表了正式项目，所以提交历史应该被尊重且是稳定不变的。如果开发者本地的提交历史和中央仓库有分歧，Git 会拒绝 push 提交否则会覆盖已经在中央库的正式提交。\n\n![](https://www.funtl.com/assets/git-workflow-svn-managingconflicts.png)\n\n在开发者提交自己功能修改到中央库前，需要先 fetch 在中央库的新增提交，rebase 自己提交到中央库提交历史之上。这样做的意思是在说，『我要把自己的修改加到别人已经完成的修改上。』最终的结果是一个完美的线性历史，就像以前的SVN 的工作流中一样。\n\n如果本地修改和上游提交有冲突，Git 会暂停 rebase 过程，给你手动解决冲突的机会。Git 解决合并冲突，用和生成提交一样的 git status 和 git add 命令，很一致方便。还有一点，如果解决冲突时遇到麻烦，Git 可以很简单中止整个 rebase 操作，重来一次（或者让别人来帮助解决）。\n\n## GitFlow 工作流\n\n**概述**\n![](https://www.funtl.com/assets/git-workflows-gitflow.png)\nGitFlow 工作流定义了一个围绕项目发布的严格分支模型。虽然比功能分支工作流复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。\n\nGitFlow 工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个很明确的角色，并定义分支之间如何和什么时候进行交互。除了使用功能分支，在做准备、维护和记录发布也使用各自的分支。当然你可以用上功能分支工作流所有的好处：Pull Requests、隔离实验性开发和更高效的协作。\n\nGitFlow 工作流定义了一个围绕项目发布的严格分支模型。虽然比功能分支工作流复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。\n\nGitFlow 工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个很明确的角色，并定义分支之间如何和什么时候进行交互。除了使用功能分支，在做准备、维护和记录发布也使用各自的分支。当然你可以用上功能分支工作流所有的好处：Pull Requests、隔离实验性开发和更高效的协作。\n\n#### 工作方式\n\nGitFlow 工作流仍然用中央仓库作为所有开发者的交互中心。和其它的工作流一样，开发者在本地工作并 push 分支到中央仓库中。\n\n#### 历史分支\n\n相对使用仅有的一个 master 分支，GitFlow 工作流使用2个分支来记录项目的历史。master 分支存储了正式发布的历史，而 develop 分支作为功能的集成分支。这样也方便 master 分支上的所有提交分配一个版本号。\n![](https://www.funtl.com/assets/git-workflow-release-cycle-1historical.png)\n\n剩下要说明的问题围绕着这2个分支的区别展开。\n\n#### 功能分支\n\n每个新功能位于一个自己的分支，这样可以 push 到中央仓库以备份和协作。但功能分支不是从 master 分支上拉出新分支，而是使用 develop 分支作为父分支。当新功能完成时，合并回 develop 分支。新功能提交应该从不直接与 master 分支交互。\n![](https://www.funtl.com/assets/git-workflow-release-cycle-2feature.png)\n\n注意，从各种含义和目的上来看，功能分支加上 develop 分支就是功能分支工作流的用法。但 GitFlow 工作流没有在这里止步。\n\n#### 发布分支\n\n![](https://www.funtl.com/assets/git-workflow-release-cycle-3release.png)\n\n一旦 develop 分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从 develop 分支上 fork 一个发布分支。新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上 —— 这个分支只应该做 Bug 修复、文档生成和其它面向发布任务。一旦对外发布的工作都完成了，发布分支合并到 master 分支并分配一个版本号打好 Tag。另外，这些从新建发布分支以来的做的修改要合并回 develop 分支。\n\n使用一个用于发布准备的专门分支，使得一个团队可以在完善当前的发布版本的同时，另一个团队可以继续开发下个版本的功能。这也打造定义良好的开发阶段（比如，可以很轻松地说，『这周我们要做准备发布版本 4.0』，并且在仓库的目录结构中可以实际看到）。\n\n常用的分支约定：\n\n用于新建发布分支的分支: develop\n用于合并的分支: master\n分支命名: release-* 或 release/*\n\n#### 维护分支\n\n![](https://www.funtl.com/assets/git-workflow-release-cycle-4maintenance.png)\n维护分支或说是热修复（hotfix）分支用于生成快速给产品发布版本（production releases）打补丁，这是唯一可以直接从 master 分支 fork 出来的分支。修复完成，修改应该马上合并回 master 分支和 develop 分支（当前的发布分支），master 分支应该用新的版本号打好 Tag。\n\n为 Bug 修复使用专门分支，让团队可以处理掉问题而不用打断其它工作或是等待下一个发布循环。你可以把维护分支想成是一个直接在 master 分支上处理的临时发布。\n","slug":"Git","published":1,"updated":"2021-04-22T07:26:09.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcys9000bko9bc696uck9","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。<br>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p>\n<h1 id=\"Git-常用命令\"><a href=\"#Git-常用命令\" class=\"headerlink\" title=\"Git 常用命令\"></a>Git 常用命令</h1><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git init</td>\n<td>初始化：创建一个git仓库，创建之后就会在当前目录生成一个.git的文件</td>\n</tr>\n<tr>\n<td>git add filename</td>\n<td>添加文件：把文件添加到缓冲区</td>\n</tr>\n<tr>\n<td>git add . <br>                git add –all</td>\n<td>添加所有文件到缓冲区（从目前掌握的水平看，和后面加“.”的区别在于，加all可以添加被手动删除的文件，而加“.”不行）</td>\n</tr>\n<tr>\n<td>git rm filename</td>\n<td>删除文件</td>\n</tr>\n<tr>\n<td>git commit -m “提交的说明”</td>\n<td>提交：提交缓冲区的所有修改到仓库</td>\n</tr>\n<tr>\n<td>git status</td>\n<td>查看git库的状态，未提交的文件，分为两种，add过已经在缓冲区的，未add过的</td>\n</tr>\n<tr>\n<td>git diff filename</td>\n<td>比较：如果文件修改了，还没有提交，就可以比较文件修改前后的差异</td>\n</tr>\n<tr>\n<td>git log</td>\n<td>查看日志</td>\n</tr>\n<tr>\n<td>git reset</td>\n<td>版本回退：可以将当前仓库回退到历史的某个版本</td>\n</tr>\n<tr>\n<td>git reset –hard HEAD^</td>\n<td>回退到上一个版本（HEAD代表当前版本，有一个^代表上一个版本，以此类推）</td>\n</tr>\n<tr>\n<td>git reset –hard d7b5</td>\n<td>回退到指定版本(其中d7b5是想回退的指定版本号的前几位)</td>\n</tr>\n<tr>\n<td>git reflog</td>\n<td>查看命令历史：查看仓库的操作历史</td>\n</tr>\n<tr>\n<td>git branch</td>\n<td>查看分支的情况，前面带*号的就是当前分支</td>\n</tr>\n<tr>\n<td>git branch 分支名</td>\n<td>创建分支</td>\n</tr>\n<tr>\n<td>git checkout 分支名</td>\n<td>切换当前分支到指定分支</td>\n</tr>\n<tr>\n<td>git checkout  -b 分支名</td>\n<td>创建分支并切换到创建的分支</td>\n</tr>\n<tr>\n<td>git merge 分支名</td>\n<td>合并某分支的内容到当前分支</td>\n</tr>\n<tr>\n<td>git branch -d 分支名</td>\n<td>删除分支</td>\n</tr>\n<tr>\n<td>git tag</td>\n<td>查看所有标签</td>\n</tr>\n<tr>\n<td>git show 标签名</td>\n<td>查看标签的详细信息</td>\n</tr>\n<tr>\n<td>git push origin –tags</td>\n<td>推送所有tag</td>\n</tr>\n<tr>\n<td>git push origin v1.0</td>\n<td>推送某个tag</td>\n</tr>\n</tbody></table>\n<h1 id=\"IDEA常用的git操作\"><a href=\"#IDEA常用的git操作\" class=\"headerlink\" title=\"IDEA常用的git操作\"></a>IDEA常用的git操作</h1><p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/idea-git.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/idet-git2.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/idat-git3.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/idea-git4.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/idea-git5.png\" alt><br><strong>版本回退</strong><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20190823162426.png\" alt></p>\n<h1 id=\"Git-工作流简介\"><a href=\"#Git-工作流简介\" class=\"headerlink\" title=\"Git 工作流简介\"></a>Git 工作流简介</h1><h2 id=\"概述-1\"><a href=\"#概述-1\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>工作流有各式各样的用法，但也正因此使得在实际工作中如何上手使用增加了难度。这篇指南通过总览公司团队中最常用的几种 Git 工作流让大家可以上手使用。</p>\n<p>在阅读的过程中请记住，本文中的几种工作流是作为方案指导而不是条例规定。在展示了各种工作流可能的用法后，你可以从不同的工作流中挑选或揉合出一个满足你自己需求的工作流</p>\n<h2 id=\"集中式工作流\"><a href=\"#集中式工作流\" class=\"headerlink\" title=\"集中式工作流\"></a>集中式工作流</h2><p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/git-workflow-svn.png\" alt><br>转到分布式版本控制系统看起来像个令人生畏的任务，但不改变已用的工作流你也可以用上 Git 带来的收益。团队可以用和 Subversion 完全不变的方式来开发项目。</p>\n<p>但使用 Git 加强开发的工作流，Git 比 SVN 有几个优势。首先，每个开发可以有属于自己的整个工程的本地拷贝。隔离的环境让各个开发者的工作和项目的其他部分（修改）独立开来 —— 即自由地提交到自己的本地仓库，先完全忽略上游的开发，直到方便的时候再把修改反馈上去。</p>\n<p>其次，Git 提供了强壮的分支和合并模型。不像 SVN，Git 的分支设计成可以做为一种用来在仓库之间集成代码和分享修改的『失败安全』的机制。</p>\n<p><strong>工作方式</strong><br>像 Subversion 一样，集中式工作流以中央仓库作为项目所有修改的单点实体。相比 SVN 缺省的开发分支 trunk，Git 叫做 master，所有修改提交到这个分支上。该工作流只用到 master 这一个分支。</p>\n<p>开发者开始先克隆中央仓库。在自己的项目拷贝中，像 SVN 一样的编辑文件和提交修改；但修改是存在本地的，和中央仓库是完全隔离的。开发者可以把和上游的同步延后到一个方便时间点。</p>\n<p>要发布修改到正式项目中，开发者要把本地 master 分支的修改『推（push）』到中央仓库中。这相当于 svn commit 操作，但 push 操作会把所有还不在中央仓库的本地提交都推上去。<br><img src=\"https://www.funtl.com/assets/git-workflow-svn-push-local.png\" alt></p>\n<p><strong>解决冲突</strong><br>中央仓库代表了正式项目，所以提交历史应该被尊重且是稳定不变的。如果开发者本地的提交历史和中央仓库有分歧，Git 会拒绝 push 提交否则会覆盖已经在中央库的正式提交。</p>\n<p><img src=\"https://www.funtl.com/assets/git-workflow-svn-managingconflicts.png\" alt></p>\n<p>在开发者提交自己功能修改到中央库前，需要先 fetch 在中央库的新增提交，rebase 自己提交到中央库提交历史之上。这样做的意思是在说，『我要把自己的修改加到别人已经完成的修改上。』最终的结果是一个完美的线性历史，就像以前的SVN 的工作流中一样。</p>\n<p>如果本地修改和上游提交有冲突，Git 会暂停 rebase 过程，给你手动解决冲突的机会。Git 解决合并冲突，用和生成提交一样的 git status 和 git add 命令，很一致方便。还有一点，如果解决冲突时遇到麻烦，Git 可以很简单中止整个 rebase 操作，重来一次（或者让别人来帮助解决）。</p>\n<h2 id=\"GitFlow-工作流\"><a href=\"#GitFlow-工作流\" class=\"headerlink\" title=\"GitFlow 工作流\"></a>GitFlow 工作流</h2><p><strong>概述</strong><br><img src=\"https://www.funtl.com/assets/git-workflows-gitflow.png\" alt><br>GitFlow 工作流定义了一个围绕项目发布的严格分支模型。虽然比功能分支工作流复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。</p>\n<p>GitFlow 工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个很明确的角色，并定义分支之间如何和什么时候进行交互。除了使用功能分支，在做准备、维护和记录发布也使用各自的分支。当然你可以用上功能分支工作流所有的好处：Pull Requests、隔离实验性开发和更高效的协作。</p>\n<p>GitFlow 工作流定义了一个围绕项目发布的严格分支模型。虽然比功能分支工作流复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。</p>\n<p>GitFlow 工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个很明确的角色，并定义分支之间如何和什么时候进行交互。除了使用功能分支，在做准备、维护和记录发布也使用各自的分支。当然你可以用上功能分支工作流所有的好处：Pull Requests、隔离实验性开发和更高效的协作。</p>\n<h4 id=\"工作方式\"><a href=\"#工作方式\" class=\"headerlink\" title=\"工作方式\"></a>工作方式</h4><p>GitFlow 工作流仍然用中央仓库作为所有开发者的交互中心。和其它的工作流一样，开发者在本地工作并 push 分支到中央仓库中。</p>\n<h4 id=\"历史分支\"><a href=\"#历史分支\" class=\"headerlink\" title=\"历史分支\"></a>历史分支</h4><p>相对使用仅有的一个 master 分支，GitFlow 工作流使用2个分支来记录项目的历史。master 分支存储了正式发布的历史，而 develop 分支作为功能的集成分支。这样也方便 master 分支上的所有提交分配一个版本号。<br><img src=\"https://www.funtl.com/assets/git-workflow-release-cycle-1historical.png\" alt></p>\n<p>剩下要说明的问题围绕着这2个分支的区别展开。</p>\n<h4 id=\"功能分支\"><a href=\"#功能分支\" class=\"headerlink\" title=\"功能分支\"></a>功能分支</h4><p>每个新功能位于一个自己的分支，这样可以 push 到中央仓库以备份和协作。但功能分支不是从 master 分支上拉出新分支，而是使用 develop 分支作为父分支。当新功能完成时，合并回 develop 分支。新功能提交应该从不直接与 master 分支交互。<br><img src=\"https://www.funtl.com/assets/git-workflow-release-cycle-2feature.png\" alt></p>\n<p>注意，从各种含义和目的上来看，功能分支加上 develop 分支就是功能分支工作流的用法。但 GitFlow 工作流没有在这里止步。</p>\n<h4 id=\"发布分支\"><a href=\"#发布分支\" class=\"headerlink\" title=\"发布分支\"></a>发布分支</h4><p><img src=\"https://www.funtl.com/assets/git-workflow-release-cycle-3release.png\" alt></p>\n<p>一旦 develop 分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从 develop 分支上 fork 一个发布分支。新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上 —— 这个分支只应该做 Bug 修复、文档生成和其它面向发布任务。一旦对外发布的工作都完成了，发布分支合并到 master 分支并分配一个版本号打好 Tag。另外，这些从新建发布分支以来的做的修改要合并回 develop 分支。</p>\n<p>使用一个用于发布准备的专门分支，使得一个团队可以在完善当前的发布版本的同时，另一个团队可以继续开发下个版本的功能。这也打造定义良好的开发阶段（比如，可以很轻松地说，『这周我们要做准备发布版本 4.0』，并且在仓库的目录结构中可以实际看到）。</p>\n<p>常用的分支约定：</p>\n<p>用于新建发布分支的分支: develop<br>用于合并的分支: master<br>分支命名: release-* 或 release/*</p>\n<h4 id=\"维护分支\"><a href=\"#维护分支\" class=\"headerlink\" title=\"维护分支\"></a>维护分支</h4><p><img src=\"https://www.funtl.com/assets/git-workflow-release-cycle-4maintenance.png\" alt><br>维护分支或说是热修复（hotfix）分支用于生成快速给产品发布版本（production releases）打补丁，这是唯一可以直接从 master 分支 fork 出来的分支。修复完成，修改应该马上合并回 master 分支和 develop 分支（当前的发布分支），master 分支应该用新的版本号打好 Tag。</p>\n<p>为 Bug 修复使用专门分支，让团队可以处理掉问题而不用打断其它工作或是等待下一个发布循环。你可以把维护分支想成是一个直接在 master 分支上处理的临时发布。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。<br>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p>\n<h1 id=\"Git-常用命令\"><a href=\"#Git-常用命令\" class=\"headerlink\" title=\"Git 常用命令\"></a>Git 常用命令</h1><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git init</td>\n<td>初始化：创建一个git仓库，创建之后就会在当前目录生成一个.git的文件</td>\n</tr>\n<tr>\n<td>git add filename</td>\n<td>添加文件：把文件添加到缓冲区</td>\n</tr>\n<tr>\n<td>git add . <br>                git add –all</td>\n<td>添加所有文件到缓冲区（从目前掌握的水平看，和后面加“.”的区别在于，加all可以添加被手动删除的文件，而加“.”不行）</td>\n</tr>\n<tr>\n<td>git rm filename</td>\n<td>删除文件</td>\n</tr>\n<tr>\n<td>git commit -m “提交的说明”</td>\n<td>提交：提交缓冲区的所有修改到仓库</td>\n</tr>\n<tr>\n<td>git status</td>\n<td>查看git库的状态，未提交的文件，分为两种，add过已经在缓冲区的，未add过的</td>\n</tr>\n<tr>\n<td>git diff filename</td>\n<td>比较：如果文件修改了，还没有提交，就可以比较文件修改前后的差异</td>\n</tr>\n<tr>\n<td>git log</td>\n<td>查看日志</td>\n</tr>\n<tr>\n<td>git reset</td>\n<td>版本回退：可以将当前仓库回退到历史的某个版本</td>\n</tr>\n<tr>\n<td>git reset –hard HEAD^</td>\n<td>回退到上一个版本（HEAD代表当前版本，有一个^代表上一个版本，以此类推）</td>\n</tr>\n<tr>\n<td>git reset –hard d7b5</td>\n<td>回退到指定版本(其中d7b5是想回退的指定版本号的前几位)</td>\n</tr>\n<tr>\n<td>git reflog</td>\n<td>查看命令历史：查看仓库的操作历史</td>\n</tr>\n<tr>\n<td>git branch</td>\n<td>查看分支的情况，前面带*号的就是当前分支</td>\n</tr>\n<tr>\n<td>git branch 分支名</td>\n<td>创建分支</td>\n</tr>\n<tr>\n<td>git checkout 分支名</td>\n<td>切换当前分支到指定分支</td>\n</tr>\n<tr>\n<td>git checkout  -b 分支名</td>\n<td>创建分支并切换到创建的分支</td>\n</tr>\n<tr>\n<td>git merge 分支名</td>\n<td>合并某分支的内容到当前分支</td>\n</tr>\n<tr>\n<td>git branch -d 分支名</td>\n<td>删除分支</td>\n</tr>\n<tr>\n<td>git tag</td>\n<td>查看所有标签</td>\n</tr>\n<tr>\n<td>git show 标签名</td>\n<td>查看标签的详细信息</td>\n</tr>\n<tr>\n<td>git push origin –tags</td>\n<td>推送所有tag</td>\n</tr>\n<tr>\n<td>git push origin v1.0</td>\n<td>推送某个tag</td>\n</tr>\n</tbody></table>\n<h1 id=\"IDEA常用的git操作\"><a href=\"#IDEA常用的git操作\" class=\"headerlink\" title=\"IDEA常用的git操作\"></a>IDEA常用的git操作</h1><p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/idea-git.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/idet-git2.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/idat-git3.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/idea-git4.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/idea-git5.png\" alt><br><strong>版本回退</strong><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20190823162426.png\" alt></p>\n<h1 id=\"Git-工作流简介\"><a href=\"#Git-工作流简介\" class=\"headerlink\" title=\"Git 工作流简介\"></a>Git 工作流简介</h1><h2 id=\"概述-1\"><a href=\"#概述-1\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>工作流有各式各样的用法，但也正因此使得在实际工作中如何上手使用增加了难度。这篇指南通过总览公司团队中最常用的几种 Git 工作流让大家可以上手使用。</p>\n<p>在阅读的过程中请记住，本文中的几种工作流是作为方案指导而不是条例规定。在展示了各种工作流可能的用法后，你可以从不同的工作流中挑选或揉合出一个满足你自己需求的工作流</p>\n<h2 id=\"集中式工作流\"><a href=\"#集中式工作流\" class=\"headerlink\" title=\"集中式工作流\"></a>集中式工作流</h2><p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/git-workflow-svn.png\" alt><br>转到分布式版本控制系统看起来像个令人生畏的任务，但不改变已用的工作流你也可以用上 Git 带来的收益。团队可以用和 Subversion 完全不变的方式来开发项目。</p>\n<p>但使用 Git 加强开发的工作流，Git 比 SVN 有几个优势。首先，每个开发可以有属于自己的整个工程的本地拷贝。隔离的环境让各个开发者的工作和项目的其他部分（修改）独立开来 —— 即自由地提交到自己的本地仓库，先完全忽略上游的开发，直到方便的时候再把修改反馈上去。</p>\n<p>其次，Git 提供了强壮的分支和合并模型。不像 SVN，Git 的分支设计成可以做为一种用来在仓库之间集成代码和分享修改的『失败安全』的机制。</p>\n<p><strong>工作方式</strong><br>像 Subversion 一样，集中式工作流以中央仓库作为项目所有修改的单点实体。相比 SVN 缺省的开发分支 trunk，Git 叫做 master，所有修改提交到这个分支上。该工作流只用到 master 这一个分支。</p>\n<p>开发者开始先克隆中央仓库。在自己的项目拷贝中，像 SVN 一样的编辑文件和提交修改；但修改是存在本地的，和中央仓库是完全隔离的。开发者可以把和上游的同步延后到一个方便时间点。</p>\n<p>要发布修改到正式项目中，开发者要把本地 master 分支的修改『推（push）』到中央仓库中。这相当于 svn commit 操作，但 push 操作会把所有还不在中央仓库的本地提交都推上去。<br><img src=\"https://www.funtl.com/assets/git-workflow-svn-push-local.png\" alt></p>\n<p><strong>解决冲突</strong><br>中央仓库代表了正式项目，所以提交历史应该被尊重且是稳定不变的。如果开发者本地的提交历史和中央仓库有分歧，Git 会拒绝 push 提交否则会覆盖已经在中央库的正式提交。</p>\n<p><img src=\"https://www.funtl.com/assets/git-workflow-svn-managingconflicts.png\" alt></p>\n<p>在开发者提交自己功能修改到中央库前，需要先 fetch 在中央库的新增提交，rebase 自己提交到中央库提交历史之上。这样做的意思是在说，『我要把自己的修改加到别人已经完成的修改上。』最终的结果是一个完美的线性历史，就像以前的SVN 的工作流中一样。</p>\n<p>如果本地修改和上游提交有冲突，Git 会暂停 rebase 过程，给你手动解决冲突的机会。Git 解决合并冲突，用和生成提交一样的 git status 和 git add 命令，很一致方便。还有一点，如果解决冲突时遇到麻烦，Git 可以很简单中止整个 rebase 操作，重来一次（或者让别人来帮助解决）。</p>\n<h2 id=\"GitFlow-工作流\"><a href=\"#GitFlow-工作流\" class=\"headerlink\" title=\"GitFlow 工作流\"></a>GitFlow 工作流</h2><p><strong>概述</strong><br><img src=\"https://www.funtl.com/assets/git-workflows-gitflow.png\" alt><br>GitFlow 工作流定义了一个围绕项目发布的严格分支模型。虽然比功能分支工作流复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。</p>\n<p>GitFlow 工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个很明确的角色，并定义分支之间如何和什么时候进行交互。除了使用功能分支，在做准备、维护和记录发布也使用各自的分支。当然你可以用上功能分支工作流所有的好处：Pull Requests、隔离实验性开发和更高效的协作。</p>\n<p>GitFlow 工作流定义了一个围绕项目发布的严格分支模型。虽然比功能分支工作流复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。</p>\n<p>GitFlow 工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个很明确的角色，并定义分支之间如何和什么时候进行交互。除了使用功能分支，在做准备、维护和记录发布也使用各自的分支。当然你可以用上功能分支工作流所有的好处：Pull Requests、隔离实验性开发和更高效的协作。</p>\n<h4 id=\"工作方式\"><a href=\"#工作方式\" class=\"headerlink\" title=\"工作方式\"></a>工作方式</h4><p>GitFlow 工作流仍然用中央仓库作为所有开发者的交互中心。和其它的工作流一样，开发者在本地工作并 push 分支到中央仓库中。</p>\n<h4 id=\"历史分支\"><a href=\"#历史分支\" class=\"headerlink\" title=\"历史分支\"></a>历史分支</h4><p>相对使用仅有的一个 master 分支，GitFlow 工作流使用2个分支来记录项目的历史。master 分支存储了正式发布的历史，而 develop 分支作为功能的集成分支。这样也方便 master 分支上的所有提交分配一个版本号。<br><img src=\"https://www.funtl.com/assets/git-workflow-release-cycle-1historical.png\" alt></p>\n<p>剩下要说明的问题围绕着这2个分支的区别展开。</p>\n<h4 id=\"功能分支\"><a href=\"#功能分支\" class=\"headerlink\" title=\"功能分支\"></a>功能分支</h4><p>每个新功能位于一个自己的分支，这样可以 push 到中央仓库以备份和协作。但功能分支不是从 master 分支上拉出新分支，而是使用 develop 分支作为父分支。当新功能完成时，合并回 develop 分支。新功能提交应该从不直接与 master 分支交互。<br><img src=\"https://www.funtl.com/assets/git-workflow-release-cycle-2feature.png\" alt></p>\n<p>注意，从各种含义和目的上来看，功能分支加上 develop 分支就是功能分支工作流的用法。但 GitFlow 工作流没有在这里止步。</p>\n<h4 id=\"发布分支\"><a href=\"#发布分支\" class=\"headerlink\" title=\"发布分支\"></a>发布分支</h4><p><img src=\"https://www.funtl.com/assets/git-workflow-release-cycle-3release.png\" alt></p>\n<p>一旦 develop 分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从 develop 分支上 fork 一个发布分支。新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上 —— 这个分支只应该做 Bug 修复、文档生成和其它面向发布任务。一旦对外发布的工作都完成了，发布分支合并到 master 分支并分配一个版本号打好 Tag。另外，这些从新建发布分支以来的做的修改要合并回 develop 分支。</p>\n<p>使用一个用于发布准备的专门分支，使得一个团队可以在完善当前的发布版本的同时，另一个团队可以继续开发下个版本的功能。这也打造定义良好的开发阶段（比如，可以很轻松地说，『这周我们要做准备发布版本 4.0』，并且在仓库的目录结构中可以实际看到）。</p>\n<p>常用的分支约定：</p>\n<p>用于新建发布分支的分支: develop<br>用于合并的分支: master<br>分支命名: release-* 或 release/*</p>\n<h4 id=\"维护分支\"><a href=\"#维护分支\" class=\"headerlink\" title=\"维护分支\"></a>维护分支</h4><p><img src=\"https://www.funtl.com/assets/git-workflow-release-cycle-4maintenance.png\" alt><br>维护分支或说是热修复（hotfix）分支用于生成快速给产品发布版本（production releases）打补丁，这是唯一可以直接从 master 分支 fork 出来的分支。修复完成，修改应该马上合并回 master 分支和 develop 分支（当前的发布分支），master 分支应该用新的版本号打好 Tag。</p>\n<p>为 Bug 修复使用专门分支，让团队可以处理掉问题而不用打断其它工作或是等待下一个发布循环。你可以把维护分支想成是一个直接在 master 分支上处理的临时发布。</p>\n"},{"title":"Hibernate","date":"2019-07-19T08:02:31.000Z","_content":"\n# 概述\nHibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，它将POJO与数据库表建立映射关系，是一个全自动的orm框架，hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端程序使用，也可以在Servlet/JSP的Web应用中使用。\nHibernate 是传统 Java 对象和数据库服务器之间的桥梁，用来处理基于 O/R 映射机制和模式的那些对象。\n\n![](https://atts.w3cschool.cn/attachments/image/wk/hibernate/hibernate_position.jpg)\n\n# Hibernate 优势\n\n- Hibernate 使用 XML 文件来处理映射 Java 类别到数据库表格中，并且不用编写任何代码。\n- 为在数据库中直接储存和检索 Java 对象提供简单的 APIs。\n- 如果在数据库中或任何其它表格中出现变化，那么仅需要改变 XML 文件属性。\n- 抽象不熟悉的 SQL 类型，并为我们提供工作中所熟悉的 Java 对象。\n- Hibernate 不需要应用程序服务器来操作。\n- 操控你数据库中对象复杂的关联。\n- 最小化与访问数据库的智能提取策略。\n- 提供简单的数据询问。\n\n# Hibernate 架构\nHibernate 架构是分层的，作为数据访问层，你不必知道底层 API 。Hibernate 利用数据库以及配置数据来为应用程序提供持续性服务（以及持续性对象）。\n\n![](https://atts.w3cschool.cn/attachments/image/wk/hibernate/hibernate_architecture.jpg)\n\n## 配置对象\n\n配置对象是你在任何 Hibernate 应用程序中创造的第一个 Hibernate 对象，并且经常只在应用程序初始化期间创造。它代表了 Hibernate 所需一个配置或属性文件。配置对象提供了两种基础组件。\n\n- **数据库连接**：由 Hibernate 支持的一个或多个配置文件处理。这些文件是 **hibernate.properties** 和 **hibernate.cfg.xml**。\n- **类映射设置**：这个组件创造了 Java 类和数据库表格之间的联系。\n\n## SessionFactory 对象\n\n配置对象被用于创造一个 SessionFactory 对象，使用提供的配置文件为应用程序依次配置 Hibernate，并允许实例化一个会话对象。SessionFactory 是一个线程安全对象并由应用程序所有的线程所使用。\n\nSessionFactory 是一个重量级对象所以通常它都是在应用程序启动时创造然后留存为以后使用。每个数据库需要一个 SessionFactory 对象使用一个单独的配置文件。所以如果你使用多种数据库那么你要创造多种 SessionFactory 对象。\n\n## Session 对象\n\n一个会话被用于与数据库的物理连接。Session 对象是轻量级的，并被设计为每次实例化都需要与数据库的交互。持久对象通过 Session 对象保存和检索。\n\nSession 对象不应该长时间保持开启状态因为它们通常情况下并非线程安全，并且它们应该按照所需创造和销毁。\n\n## Transaction 对象\n\n一个事务代表了与数据库工作的一个单元并且大部分 RDBMS 支持事务功能。在 Hibernate 中事务由底层事务管理器和事务（来自 JDBC 或者 JTA）处理。\n\n这是一个选择性对象，Hibernate 应用程序可能不选择使用这个接口，而是在自己应用程序代码中管理事务。\n\n## Query 对象\n\nQuery 对象使用 SQL 或者 Hibernate 查询语言（HQL）字符串在数据库中来检索数据并创造对象。一个查询的实例被用于连结查询参数，限制由查询返回的结果数量，并最终执行查询。\n\n## Criteria 对象\n\nCriteria 对象被用于创造和执行面向规则查询的对象来检索对象。\n\n#### @Modifying注解\n```text\n这个注解是通知jpa，这是一个update或者delete操作，在更新或者删除操作时，此注解必须加，否则会抛出下面异常\n\norg.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.hql.internal.QueryExecutionRequestException: Not supported for DML operations [update com.xhx.springboot.entity.Account set name=:name, money=:money,version=:version+1 where id=:id and version=:version]; nested exception is java.lang.IllegalStateException: org.hibernate.hql.internal.QueryExecutionRequestException: Not supported for DML operations [update com.xhx.springboot.entity.Account set name=:name, money=:money,version=:version+1 where id=:id and version=:version]\n\n必须加事务，不加事务，会报下面错\n\norg.springframework.dao.InvalidDataAccessApiUsageException: Executing an update/delete query; nested exception is javax.persistence.TransactionRequiredException: Executing an update/delete query\n\n```\n\n```sql\n    @Query(\"SELECT ior from ComparisonShareUrl ior where ior.id = :uuid \")\n    ComparisonShareUrl findByUuid(@Param(\"uuid\") Integer uuid);\n\n    @Query(nativeQuery = true, value = \"SELECT * from comparison_share_url ior where ior.created_at > ?1 ORDER BY ior.created_at  LIMIT 1\")\n    ComparisonShareUrl findByTime(@Param(\"date\") Date date);\n\n    nativeQuery = true时，是可以执行原生sql语句，所谓原生sql，也就是说这段sql拷贝到数据库中，然后把参数值给一下就能运行\n```","source":"_posts/Hibernate.md","raw":"---\ntitle: Hibernate\ndate: 2019-07-19 16:02:31\ntags:\n    - 数据库\n---\n\n# 概述\nHibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，它将POJO与数据库表建立映射关系，是一个全自动的orm框架，hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端程序使用，也可以在Servlet/JSP的Web应用中使用。\nHibernate 是传统 Java 对象和数据库服务器之间的桥梁，用来处理基于 O/R 映射机制和模式的那些对象。\n\n![](https://atts.w3cschool.cn/attachments/image/wk/hibernate/hibernate_position.jpg)\n\n# Hibernate 优势\n\n- Hibernate 使用 XML 文件来处理映射 Java 类别到数据库表格中，并且不用编写任何代码。\n- 为在数据库中直接储存和检索 Java 对象提供简单的 APIs。\n- 如果在数据库中或任何其它表格中出现变化，那么仅需要改变 XML 文件属性。\n- 抽象不熟悉的 SQL 类型，并为我们提供工作中所熟悉的 Java 对象。\n- Hibernate 不需要应用程序服务器来操作。\n- 操控你数据库中对象复杂的关联。\n- 最小化与访问数据库的智能提取策略。\n- 提供简单的数据询问。\n\n# Hibernate 架构\nHibernate 架构是分层的，作为数据访问层，你不必知道底层 API 。Hibernate 利用数据库以及配置数据来为应用程序提供持续性服务（以及持续性对象）。\n\n![](https://atts.w3cschool.cn/attachments/image/wk/hibernate/hibernate_architecture.jpg)\n\n## 配置对象\n\n配置对象是你在任何 Hibernate 应用程序中创造的第一个 Hibernate 对象，并且经常只在应用程序初始化期间创造。它代表了 Hibernate 所需一个配置或属性文件。配置对象提供了两种基础组件。\n\n- **数据库连接**：由 Hibernate 支持的一个或多个配置文件处理。这些文件是 **hibernate.properties** 和 **hibernate.cfg.xml**。\n- **类映射设置**：这个组件创造了 Java 类和数据库表格之间的联系。\n\n## SessionFactory 对象\n\n配置对象被用于创造一个 SessionFactory 对象，使用提供的配置文件为应用程序依次配置 Hibernate，并允许实例化一个会话对象。SessionFactory 是一个线程安全对象并由应用程序所有的线程所使用。\n\nSessionFactory 是一个重量级对象所以通常它都是在应用程序启动时创造然后留存为以后使用。每个数据库需要一个 SessionFactory 对象使用一个单独的配置文件。所以如果你使用多种数据库那么你要创造多种 SessionFactory 对象。\n\n## Session 对象\n\n一个会话被用于与数据库的物理连接。Session 对象是轻量级的，并被设计为每次实例化都需要与数据库的交互。持久对象通过 Session 对象保存和检索。\n\nSession 对象不应该长时间保持开启状态因为它们通常情况下并非线程安全，并且它们应该按照所需创造和销毁。\n\n## Transaction 对象\n\n一个事务代表了与数据库工作的一个单元并且大部分 RDBMS 支持事务功能。在 Hibernate 中事务由底层事务管理器和事务（来自 JDBC 或者 JTA）处理。\n\n这是一个选择性对象，Hibernate 应用程序可能不选择使用这个接口，而是在自己应用程序代码中管理事务。\n\n## Query 对象\n\nQuery 对象使用 SQL 或者 Hibernate 查询语言（HQL）字符串在数据库中来检索数据并创造对象。一个查询的实例被用于连结查询参数，限制由查询返回的结果数量，并最终执行查询。\n\n## Criteria 对象\n\nCriteria 对象被用于创造和执行面向规则查询的对象来检索对象。\n\n#### @Modifying注解\n```text\n这个注解是通知jpa，这是一个update或者delete操作，在更新或者删除操作时，此注解必须加，否则会抛出下面异常\n\norg.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.hql.internal.QueryExecutionRequestException: Not supported for DML operations [update com.xhx.springboot.entity.Account set name=:name, money=:money,version=:version+1 where id=:id and version=:version]; nested exception is java.lang.IllegalStateException: org.hibernate.hql.internal.QueryExecutionRequestException: Not supported for DML operations [update com.xhx.springboot.entity.Account set name=:name, money=:money,version=:version+1 where id=:id and version=:version]\n\n必须加事务，不加事务，会报下面错\n\norg.springframework.dao.InvalidDataAccessApiUsageException: Executing an update/delete query; nested exception is javax.persistence.TransactionRequiredException: Executing an update/delete query\n\n```\n\n```sql\n    @Query(\"SELECT ior from ComparisonShareUrl ior where ior.id = :uuid \")\n    ComparisonShareUrl findByUuid(@Param(\"uuid\") Integer uuid);\n\n    @Query(nativeQuery = true, value = \"SELECT * from comparison_share_url ior where ior.created_at > ?1 ORDER BY ior.created_at  LIMIT 1\")\n    ComparisonShareUrl findByTime(@Param(\"date\") Date date);\n\n    nativeQuery = true时，是可以执行原生sql语句，所谓原生sql，也就是说这段sql拷贝到数据库中，然后把参数值给一下就能运行\n```","slug":"Hibernate","published":1,"updated":"2021-04-22T03:43:26.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysa000dko9bg3scclkv","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，它将POJO与数据库表建立映射关系，是一个全自动的orm框架，hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端程序使用，也可以在Servlet/JSP的Web应用中使用。<br>Hibernate 是传统 Java 对象和数据库服务器之间的桥梁，用来处理基于 O/R 映射机制和模式的那些对象。</p>\n<p><img src=\"https://atts.w3cschool.cn/attachments/image/wk/hibernate/hibernate_position.jpg\" alt></p>\n<h1 id=\"Hibernate-优势\"><a href=\"#Hibernate-优势\" class=\"headerlink\" title=\"Hibernate 优势\"></a>Hibernate 优势</h1><ul>\n<li>Hibernate 使用 XML 文件来处理映射 Java 类别到数据库表格中，并且不用编写任何代码。</li>\n<li>为在数据库中直接储存和检索 Java 对象提供简单的 APIs。</li>\n<li>如果在数据库中或任何其它表格中出现变化，那么仅需要改变 XML 文件属性。</li>\n<li>抽象不熟悉的 SQL 类型，并为我们提供工作中所熟悉的 Java 对象。</li>\n<li>Hibernate 不需要应用程序服务器来操作。</li>\n<li>操控你数据库中对象复杂的关联。</li>\n<li>最小化与访问数据库的智能提取策略。</li>\n<li>提供简单的数据询问。</li>\n</ul>\n<h1 id=\"Hibernate-架构\"><a href=\"#Hibernate-架构\" class=\"headerlink\" title=\"Hibernate 架构\"></a>Hibernate 架构</h1><p>Hibernate 架构是分层的，作为数据访问层，你不必知道底层 API 。Hibernate 利用数据库以及配置数据来为应用程序提供持续性服务（以及持续性对象）。</p>\n<p><img src=\"https://atts.w3cschool.cn/attachments/image/wk/hibernate/hibernate_architecture.jpg\" alt></p>\n<h2 id=\"配置对象\"><a href=\"#配置对象\" class=\"headerlink\" title=\"配置对象\"></a>配置对象</h2><p>配置对象是你在任何 Hibernate 应用程序中创造的第一个 Hibernate 对象，并且经常只在应用程序初始化期间创造。它代表了 Hibernate 所需一个配置或属性文件。配置对象提供了两种基础组件。</p>\n<ul>\n<li><strong>数据库连接</strong>：由 Hibernate 支持的一个或多个配置文件处理。这些文件是 <strong>hibernate.properties</strong> 和 <strong>hibernate.cfg.xml</strong>。</li>\n<li><strong>类映射设置</strong>：这个组件创造了 Java 类和数据库表格之间的联系。</li>\n</ul>\n<h2 id=\"SessionFactory-对象\"><a href=\"#SessionFactory-对象\" class=\"headerlink\" title=\"SessionFactory 对象\"></a>SessionFactory 对象</h2><p>配置对象被用于创造一个 SessionFactory 对象，使用提供的配置文件为应用程序依次配置 Hibernate，并允许实例化一个会话对象。SessionFactory 是一个线程安全对象并由应用程序所有的线程所使用。</p>\n<p>SessionFactory 是一个重量级对象所以通常它都是在应用程序启动时创造然后留存为以后使用。每个数据库需要一个 SessionFactory 对象使用一个单独的配置文件。所以如果你使用多种数据库那么你要创造多种 SessionFactory 对象。</p>\n<h2 id=\"Session-对象\"><a href=\"#Session-对象\" class=\"headerlink\" title=\"Session 对象\"></a>Session 对象</h2><p>一个会话被用于与数据库的物理连接。Session 对象是轻量级的，并被设计为每次实例化都需要与数据库的交互。持久对象通过 Session 对象保存和检索。</p>\n<p>Session 对象不应该长时间保持开启状态因为它们通常情况下并非线程安全，并且它们应该按照所需创造和销毁。</p>\n<h2 id=\"Transaction-对象\"><a href=\"#Transaction-对象\" class=\"headerlink\" title=\"Transaction 对象\"></a>Transaction 对象</h2><p>一个事务代表了与数据库工作的一个单元并且大部分 RDBMS 支持事务功能。在 Hibernate 中事务由底层事务管理器和事务（来自 JDBC 或者 JTA）处理。</p>\n<p>这是一个选择性对象，Hibernate 应用程序可能不选择使用这个接口，而是在自己应用程序代码中管理事务。</p>\n<h2 id=\"Query-对象\"><a href=\"#Query-对象\" class=\"headerlink\" title=\"Query 对象\"></a>Query 对象</h2><p>Query 对象使用 SQL 或者 Hibernate 查询语言（HQL）字符串在数据库中来检索数据并创造对象。一个查询的实例被用于连结查询参数，限制由查询返回的结果数量，并最终执行查询。</p>\n<h2 id=\"Criteria-对象\"><a href=\"#Criteria-对象\" class=\"headerlink\" title=\"Criteria 对象\"></a>Criteria 对象</h2><p>Criteria 对象被用于创造和执行面向规则查询的对象来检索对象。</p>\n<h4 id=\"Modifying注解\"><a href=\"#Modifying注解\" class=\"headerlink\" title=\"@Modifying注解\"></a>@Modifying注解</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个注解是通知jpa，这是一个update或者delete操作，在更新或者删除操作时，此注解必须加，否则会抛出下面异常</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.hql.internal.QueryExecutionRequestException: Not supported for DML operations [update com.xhx.springboot.entity.Account set name=:name, money=:money,version=:version+1 where id=:id and version=:version]; nested exception is java.lang.IllegalStateException: org.hibernate.hql.internal.QueryExecutionRequestException: Not supported for DML operations [update com.xhx.springboot.entity.Account set name=:name, money=:money,version=:version+1 where id=:id and version=:version]</span><br><span class=\"line\"></span><br><span class=\"line\">必须加事务，不加事务，会报下面错</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: Executing an update/delete query; nested exception is javax.persistence.TransactionRequiredException: Executing an update/delete query</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Query(\"<span class=\"keyword\">SELECT</span> ior <span class=\"keyword\">from</span> ComparisonShareUrl ior <span class=\"keyword\">where</span> ior.id = :<span class=\"keyword\">uuid</span> <span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">ComparisonShareUrl findByUuid(@Param(\"</span><span class=\"keyword\">uuid</span><span class=\"string\">\") Integer uuid);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">@Query(nativeQuery = true, value = \"</span><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">from</span> comparison_share_url ior <span class=\"keyword\">where</span> ior.created_at &gt; ?<span class=\"number\">1</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> ior.created_at  <span class=\"keyword\">LIMIT</span> <span class=\"number\">1</span><span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">ComparisonShareUrl findByTime(@Param(\"</span><span class=\"built_in\">date</span><span class=\"string\">\") Date date);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">nativeQuery = true时，是可以执行原生sql语句，所谓原生sql，也就是说这段sql拷贝到数据库中，然后把参数值给一下就能运行</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，它将POJO与数据库表建立映射关系，是一个全自动的orm框架，hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端程序使用，也可以在Servlet/JSP的Web应用中使用。<br>Hibernate 是传统 Java 对象和数据库服务器之间的桥梁，用来处理基于 O/R 映射机制和模式的那些对象。</p>\n<p><img src=\"https://atts.w3cschool.cn/attachments/image/wk/hibernate/hibernate_position.jpg\" alt></p>\n<h1 id=\"Hibernate-优势\"><a href=\"#Hibernate-优势\" class=\"headerlink\" title=\"Hibernate 优势\"></a>Hibernate 优势</h1><ul>\n<li>Hibernate 使用 XML 文件来处理映射 Java 类别到数据库表格中，并且不用编写任何代码。</li>\n<li>为在数据库中直接储存和检索 Java 对象提供简单的 APIs。</li>\n<li>如果在数据库中或任何其它表格中出现变化，那么仅需要改变 XML 文件属性。</li>\n<li>抽象不熟悉的 SQL 类型，并为我们提供工作中所熟悉的 Java 对象。</li>\n<li>Hibernate 不需要应用程序服务器来操作。</li>\n<li>操控你数据库中对象复杂的关联。</li>\n<li>最小化与访问数据库的智能提取策略。</li>\n<li>提供简单的数据询问。</li>\n</ul>\n<h1 id=\"Hibernate-架构\"><a href=\"#Hibernate-架构\" class=\"headerlink\" title=\"Hibernate 架构\"></a>Hibernate 架构</h1><p>Hibernate 架构是分层的，作为数据访问层，你不必知道底层 API 。Hibernate 利用数据库以及配置数据来为应用程序提供持续性服务（以及持续性对象）。</p>\n<p><img src=\"https://atts.w3cschool.cn/attachments/image/wk/hibernate/hibernate_architecture.jpg\" alt></p>\n<h2 id=\"配置对象\"><a href=\"#配置对象\" class=\"headerlink\" title=\"配置对象\"></a>配置对象</h2><p>配置对象是你在任何 Hibernate 应用程序中创造的第一个 Hibernate 对象，并且经常只在应用程序初始化期间创造。它代表了 Hibernate 所需一个配置或属性文件。配置对象提供了两种基础组件。</p>\n<ul>\n<li><strong>数据库连接</strong>：由 Hibernate 支持的一个或多个配置文件处理。这些文件是 <strong>hibernate.properties</strong> 和 <strong>hibernate.cfg.xml</strong>。</li>\n<li><strong>类映射设置</strong>：这个组件创造了 Java 类和数据库表格之间的联系。</li>\n</ul>\n<h2 id=\"SessionFactory-对象\"><a href=\"#SessionFactory-对象\" class=\"headerlink\" title=\"SessionFactory 对象\"></a>SessionFactory 对象</h2><p>配置对象被用于创造一个 SessionFactory 对象，使用提供的配置文件为应用程序依次配置 Hibernate，并允许实例化一个会话对象。SessionFactory 是一个线程安全对象并由应用程序所有的线程所使用。</p>\n<p>SessionFactory 是一个重量级对象所以通常它都是在应用程序启动时创造然后留存为以后使用。每个数据库需要一个 SessionFactory 对象使用一个单独的配置文件。所以如果你使用多种数据库那么你要创造多种 SessionFactory 对象。</p>\n<h2 id=\"Session-对象\"><a href=\"#Session-对象\" class=\"headerlink\" title=\"Session 对象\"></a>Session 对象</h2><p>一个会话被用于与数据库的物理连接。Session 对象是轻量级的，并被设计为每次实例化都需要与数据库的交互。持久对象通过 Session 对象保存和检索。</p>\n<p>Session 对象不应该长时间保持开启状态因为它们通常情况下并非线程安全，并且它们应该按照所需创造和销毁。</p>\n<h2 id=\"Transaction-对象\"><a href=\"#Transaction-对象\" class=\"headerlink\" title=\"Transaction 对象\"></a>Transaction 对象</h2><p>一个事务代表了与数据库工作的一个单元并且大部分 RDBMS 支持事务功能。在 Hibernate 中事务由底层事务管理器和事务（来自 JDBC 或者 JTA）处理。</p>\n<p>这是一个选择性对象，Hibernate 应用程序可能不选择使用这个接口，而是在自己应用程序代码中管理事务。</p>\n<h2 id=\"Query-对象\"><a href=\"#Query-对象\" class=\"headerlink\" title=\"Query 对象\"></a>Query 对象</h2><p>Query 对象使用 SQL 或者 Hibernate 查询语言（HQL）字符串在数据库中来检索数据并创造对象。一个查询的实例被用于连结查询参数，限制由查询返回的结果数量，并最终执行查询。</p>\n<h2 id=\"Criteria-对象\"><a href=\"#Criteria-对象\" class=\"headerlink\" title=\"Criteria 对象\"></a>Criteria 对象</h2><p>Criteria 对象被用于创造和执行面向规则查询的对象来检索对象。</p>\n<h4 id=\"Modifying注解\"><a href=\"#Modifying注解\" class=\"headerlink\" title=\"@Modifying注解\"></a>@Modifying注解</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个注解是通知jpa，这是一个update或者delete操作，在更新或者删除操作时，此注解必须加，否则会抛出下面异常</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.hql.internal.QueryExecutionRequestException: Not supported for DML operations [update com.xhx.springboot.entity.Account set name=:name, money=:money,version=:version+1 where id=:id and version=:version]; nested exception is java.lang.IllegalStateException: org.hibernate.hql.internal.QueryExecutionRequestException: Not supported for DML operations [update com.xhx.springboot.entity.Account set name=:name, money=:money,version=:version+1 where id=:id and version=:version]</span><br><span class=\"line\"></span><br><span class=\"line\">必须加事务，不加事务，会报下面错</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.dao.InvalidDataAccessApiUsageException: Executing an update/delete query; nested exception is javax.persistence.TransactionRequiredException: Executing an update/delete query</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Query(\"<span class=\"keyword\">SELECT</span> ior <span class=\"keyword\">from</span> ComparisonShareUrl ior <span class=\"keyword\">where</span> ior.id = :<span class=\"keyword\">uuid</span> <span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">ComparisonShareUrl findByUuid(@Param(\"</span><span class=\"keyword\">uuid</span><span class=\"string\">\") Integer uuid);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">@Query(nativeQuery = true, value = \"</span><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">from</span> comparison_share_url ior <span class=\"keyword\">where</span> ior.created_at &gt; ?<span class=\"number\">1</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> ior.created_at  <span class=\"keyword\">LIMIT</span> <span class=\"number\">1</span><span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">ComparisonShareUrl findByTime(@Param(\"</span><span class=\"built_in\">date</span><span class=\"string\">\") Date date);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">nativeQuery = true时，是可以执行原生sql语句，所谓原生sql，也就是说这段sql拷贝到数据库中，然后把参数值给一下就能运行</span></span><br></pre></td></tr></table></figure>"},{"title":"JAVA锁","date":"2019-08-16T02:47:51.000Z","_content":"\n# 概述\n\nJava提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-1.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-2.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-3.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-4.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-5.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-6.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-7.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-8.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-9.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-10AQS.png)\n\n# 线程同步\n - 使用synchronized关键字 \n - wait和notify\n    - wait():使一个线程处于等待状态，并且释放所持有的对象的lock。\n    - sleep():使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要捕捉InterruptedException异常。\n    - notify():唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且不是按优先级。\n    - Allnotity():唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让它们竞争。\n - 使用特殊域变量volatile实现线程同步\n - 使用重入锁实现线程同步\n - 使用阻塞队列实现线程同步","source":"_posts/JAVA锁.md","raw":"---\ntitle: JAVA锁\ndate: 2019-08-16 10:47:51\ntags:\n    - JAVA\n---\n\n# 概述\n\nJava提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-1.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-2.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-3.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-4.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-5.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-6.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-7.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-8.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-9.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-10AQS.png)\n\n# 线程同步\n - 使用synchronized关键字 \n - wait和notify\n    - wait():使一个线程处于等待状态，并且释放所持有的对象的lock。\n    - sleep():使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要捕捉InterruptedException异常。\n    - notify():唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且不是按优先级。\n    - Allnotity():唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让它们竞争。\n - 使用特殊域变量volatile实现线程同步\n - 使用重入锁实现线程同步\n - 使用阻塞队列实现线程同步","slug":"JAVA锁","published":1,"updated":"2021-04-22T03:43:26.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysb000eko9bchjxc2p9","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Java提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率</p>\n<p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-1.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-2.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-3.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-4.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-5.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-6.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-7.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-8.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-9.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-10AQS.png\" alt></p>\n<h1 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h1><ul>\n<li>使用synchronized关键字 </li>\n<li>wait和notify<ul>\n<li>wait():使一个线程处于等待状态，并且释放所持有的对象的lock。</li>\n<li>sleep():使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要捕捉InterruptedException异常。</li>\n<li>notify():唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且不是按优先级。</li>\n<li>Allnotity():唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让它们竞争。</li>\n</ul>\n</li>\n<li>使用特殊域变量volatile实现线程同步</li>\n<li>使用重入锁实现线程同步</li>\n<li>使用阻塞队列实现线程同步</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Java提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率</p>\n<p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-1.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-2.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-3.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-4.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-5.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-6.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-7.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-8.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-9.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/lock-10AQS.png\" alt></p>\n<h1 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h1><ul>\n<li>使用synchronized关键字 </li>\n<li>wait和notify<ul>\n<li>wait():使一个线程处于等待状态，并且释放所持有的对象的lock。</li>\n<li>sleep():使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要捕捉InterruptedException异常。</li>\n<li>notify():唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且不是按优先级。</li>\n<li>Allnotity():唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让它们竞争。</li>\n</ul>\n</li>\n<li>使用特殊域变量volatile实现线程同步</li>\n<li>使用重入锁实现线程同步</li>\n<li>使用阻塞队列实现线程同步</li>\n</ul>\n"},{"title":"JVM性能调优","date":"2020-01-14T14:50:40.000Z","_content":"","source":"_posts/JVM性能调优.md","raw":"---\ntitle: JVM性能调优\ndate: 2020-01-14 22:50:40\ntags:\n---\n","slug":"JVM性能调优","published":1,"updated":"2021-04-22T03:43:26.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysc000fko9bkt9d4rwb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"JdbcTemplate","date":"2019-08-13T02:34:08.000Z","_content":"\n\n\n# JdbcTemplate简介\n\nSpring提供的一个操作数据库的技术JdbcTemplate，是对Jdbc的封装。语法风格非常接近DBUtils。 \nJdbcTemplate可以直接操作数据库，加快效率，而且学这个JdbcTemplate也是为声明式事务做准备，毕竟要对数据库中的数据进行操纵！ \nJdbcTemplate中并没有提供一级缓存，以及类与类之间的关联关系！就像是spring提供的一个DBUtils。 \nSpring对数据库的操作使用JdbcTemplate来封装JDBC，结合Spring的注入特性可以很方便的实现对数据库的访问操作。使用JdbcTemplate可以像JDBC一样来编写数据库的操作代码\n\n\n# jdbcTemplate更新数据库常用方法\n\n- update (更新数据)\n- batchUpdate (批量更新数据库)\n- queryForObject (查询单行)\n- query （查询多行）\n- queryForObject (单值查询)不同的\n\n# 更新操作\n\n```java\n            String sql = \"UPDATE student SET age = ? WHERE sid = ?\";\n            template.update(sql, 13,21020);//第一个是sql语句，后面的按着顺序传入参数即可，这个update方法是接收的可变参数！\n```\n\n# 批量插入\n\n```java\n        String sql=\"INSERT INTO employee(`emp_name`,`salary`) VALUES(?,?)\";\n        //执行sql语句需要传递的参数\n        //      Object[][] params = new Object[3][2];\n        //      params[0] = new Object[]{\"Tom2015\",1000};\n        //      params[1] = new Object[]{\"Tom2016\",2000};\n        //      params[2] = new Object[]{\"Tom2017\",3000};\n        List<Object[]> list = new ArrayList<Object[]>();\n        list.add(new Object[]{\"Tom2015\",1000});\n        list.add(new Object[]{\"Tom2016\",2000});\n        list.add(new Object[]{\"Tom2017\",3000});\n        template.batchUpdate(sql, list);\n```\n\n# 单个查询\n\n```java\nString sql = \"SELECT emp_id AS empId,emp_name AS empName,salary FROM employee WHERE emp_id=?\";\n//RowMapper是一个接口,这里我们使用其子类\nRowMapper<Employee> rowMapper = new BeanPropertyRowMapper<Employee>(Employee.class);\n//最后一个参数是可变参数，用于向sql语句中依次传递参数!\nEmployee employee = template.queryForObject(sql, rowMapper, 5);\n```\n\n# 多数查询\n\n```java\n//查询salary>4000的数据库记录，封装为List集合返回\n\n//需要注意的是：sql语句中的别名要与对应实体类的属性名保持一致！\nString sql = \"SELECT emp_id AS empId,emp_name AS empName,salary FROM employee WHERE salary > ?\";\n//RowMapper是一个接口,这里我们使用其子类\nRowMapper<Employee> rowMapper = new BeanPropertyRowMapper<Employee>(Employee.class);\n//该query方法查询出来的是一个list列表,query方法的最后一个参数是可变参数！\nList<Employee> list = template.query(sql, rowMapper, 4000);\n```\n\n\n```java\nsb.append(\"select b.STATIS_DATE , b.STORE_ID , nvl(DAY_TOTAL_MONEY, 0) DAY_TOTAL_MONEY\"\n    + \", nvl(MONTH_TOTAL_MONEY, 0) MONTH_TOTAL_MONEY, nvl(ACC_TOTAL_MONEY, 0) ACC_TOTAL_MONEY\"\n    + \", nvl(CMP_ORDERS_AMNT, 0) CMP_ORDERS_AMNT, nvl(OSG_ORDERS_AMNT, 0) OSG_ORDERS_AMNT\"\n    + \", nvl(ORDER_AMNT, 0) ORDER_AMNT, nvl(NEW_USERS, 0) NEW_USERS, nvl(OLD_USERS, 0) OLD_USERS\"\n    + \", nvl(TOTAL_USERS, 0) TOTAL_USERS from tb_store_report_d@dblink_177_161 b where b.store_id = ?\"\n    + \" and b.statis_date between ? and ? order by b.statis_date asc\");\n}\nList<DayData> query = jdbcTemplate.query(sb.toString(), new Object[]{storeId, startDate, endDate}, new DayData());\n```\n\n# 函数使用\n\n```java\n//查询最大salary\nString sql = \"SELECT MAX(salary) FROM employee\";\n//需要指定返回值的类型,而且类型必须是包装类型\nDouble maxSalary = template.queryForObject(sql, Double.class);\n\n//count()函数\nString sql = \"SELECT count(*) FROM SRT_SPU \";\nint count= jdbcTemplate.queryForObject(sql, Integer.class);\n```\n\n\n\n\n","source":"_posts/JdbcTemplate.md","raw":"---\ntitle: JdbcTemplate\ndate: 2019-08-13 10:34:08\ntags:\n    - java\n---\n\n\n\n# JdbcTemplate简介\n\nSpring提供的一个操作数据库的技术JdbcTemplate，是对Jdbc的封装。语法风格非常接近DBUtils。 \nJdbcTemplate可以直接操作数据库，加快效率，而且学这个JdbcTemplate也是为声明式事务做准备，毕竟要对数据库中的数据进行操纵！ \nJdbcTemplate中并没有提供一级缓存，以及类与类之间的关联关系！就像是spring提供的一个DBUtils。 \nSpring对数据库的操作使用JdbcTemplate来封装JDBC，结合Spring的注入特性可以很方便的实现对数据库的访问操作。使用JdbcTemplate可以像JDBC一样来编写数据库的操作代码\n\n\n# jdbcTemplate更新数据库常用方法\n\n- update (更新数据)\n- batchUpdate (批量更新数据库)\n- queryForObject (查询单行)\n- query （查询多行）\n- queryForObject (单值查询)不同的\n\n# 更新操作\n\n```java\n            String sql = \"UPDATE student SET age = ? WHERE sid = ?\";\n            template.update(sql, 13,21020);//第一个是sql语句，后面的按着顺序传入参数即可，这个update方法是接收的可变参数！\n```\n\n# 批量插入\n\n```java\n        String sql=\"INSERT INTO employee(`emp_name`,`salary`) VALUES(?,?)\";\n        //执行sql语句需要传递的参数\n        //      Object[][] params = new Object[3][2];\n        //      params[0] = new Object[]{\"Tom2015\",1000};\n        //      params[1] = new Object[]{\"Tom2016\",2000};\n        //      params[2] = new Object[]{\"Tom2017\",3000};\n        List<Object[]> list = new ArrayList<Object[]>();\n        list.add(new Object[]{\"Tom2015\",1000});\n        list.add(new Object[]{\"Tom2016\",2000});\n        list.add(new Object[]{\"Tom2017\",3000});\n        template.batchUpdate(sql, list);\n```\n\n# 单个查询\n\n```java\nString sql = \"SELECT emp_id AS empId,emp_name AS empName,salary FROM employee WHERE emp_id=?\";\n//RowMapper是一个接口,这里我们使用其子类\nRowMapper<Employee> rowMapper = new BeanPropertyRowMapper<Employee>(Employee.class);\n//最后一个参数是可变参数，用于向sql语句中依次传递参数!\nEmployee employee = template.queryForObject(sql, rowMapper, 5);\n```\n\n# 多数查询\n\n```java\n//查询salary>4000的数据库记录，封装为List集合返回\n\n//需要注意的是：sql语句中的别名要与对应实体类的属性名保持一致！\nString sql = \"SELECT emp_id AS empId,emp_name AS empName,salary FROM employee WHERE salary > ?\";\n//RowMapper是一个接口,这里我们使用其子类\nRowMapper<Employee> rowMapper = new BeanPropertyRowMapper<Employee>(Employee.class);\n//该query方法查询出来的是一个list列表,query方法的最后一个参数是可变参数！\nList<Employee> list = template.query(sql, rowMapper, 4000);\n```\n\n\n```java\nsb.append(\"select b.STATIS_DATE , b.STORE_ID , nvl(DAY_TOTAL_MONEY, 0) DAY_TOTAL_MONEY\"\n    + \", nvl(MONTH_TOTAL_MONEY, 0) MONTH_TOTAL_MONEY, nvl(ACC_TOTAL_MONEY, 0) ACC_TOTAL_MONEY\"\n    + \", nvl(CMP_ORDERS_AMNT, 0) CMP_ORDERS_AMNT, nvl(OSG_ORDERS_AMNT, 0) OSG_ORDERS_AMNT\"\n    + \", nvl(ORDER_AMNT, 0) ORDER_AMNT, nvl(NEW_USERS, 0) NEW_USERS, nvl(OLD_USERS, 0) OLD_USERS\"\n    + \", nvl(TOTAL_USERS, 0) TOTAL_USERS from tb_store_report_d@dblink_177_161 b where b.store_id = ?\"\n    + \" and b.statis_date between ? and ? order by b.statis_date asc\");\n}\nList<DayData> query = jdbcTemplate.query(sb.toString(), new Object[]{storeId, startDate, endDate}, new DayData());\n```\n\n# 函数使用\n\n```java\n//查询最大salary\nString sql = \"SELECT MAX(salary) FROM employee\";\n//需要指定返回值的类型,而且类型必须是包装类型\nDouble maxSalary = template.queryForObject(sql, Double.class);\n\n//count()函数\nString sql = \"SELECT count(*) FROM SRT_SPU \";\nint count= jdbcTemplate.queryForObject(sql, Integer.class);\n```\n\n\n\n\n","slug":"JdbcTemplate","published":1,"updated":"2021-04-22T03:43:26.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysd000iko9b0typc415","content":"<h1 id=\"JdbcTemplate简介\"><a href=\"#JdbcTemplate简介\" class=\"headerlink\" title=\"JdbcTemplate简介\"></a>JdbcTemplate简介</h1><p>Spring提供的一个操作数据库的技术JdbcTemplate，是对Jdbc的封装。语法风格非常接近DBUtils。<br>JdbcTemplate可以直接操作数据库，加快效率，而且学这个JdbcTemplate也是为声明式事务做准备，毕竟要对数据库中的数据进行操纵！<br>JdbcTemplate中并没有提供一级缓存，以及类与类之间的关联关系！就像是spring提供的一个DBUtils。<br>Spring对数据库的操作使用JdbcTemplate来封装JDBC，结合Spring的注入特性可以很方便的实现对数据库的访问操作。使用JdbcTemplate可以像JDBC一样来编写数据库的操作代码</p>\n<h1 id=\"jdbcTemplate更新数据库常用方法\"><a href=\"#jdbcTemplate更新数据库常用方法\" class=\"headerlink\" title=\"jdbcTemplate更新数据库常用方法\"></a>jdbcTemplate更新数据库常用方法</h1><ul>\n<li>update (更新数据)</li>\n<li>batchUpdate (批量更新数据库)</li>\n<li>queryForObject (查询单行)</li>\n<li>query （查询多行）</li>\n<li>queryForObject (单值查询)不同的</li>\n</ul>\n<h1 id=\"更新操作\"><a href=\"#更新操作\" class=\"headerlink\" title=\"更新操作\"></a>更新操作</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String sql = <span class=\"string\">\"UPDATE student SET age = ? WHERE sid = ?\"</span>;</span><br><span class=\"line\">template.update(sql, <span class=\"number\">13</span>,<span class=\"number\">21020</span>);<span class=\"comment\">//第一个是sql语句，后面的按着顺序传入参数即可，这个update方法是接收的可变参数！</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"批量插入\"><a href=\"#批量插入\" class=\"headerlink\" title=\"批量插入\"></a>批量插入</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String sql=<span class=\"string\">\"INSERT INTO employee(`emp_name`,`salary`) VALUES(?,?)\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//执行sql语句需要传递的参数</span></span><br><span class=\"line\"><span class=\"comment\">//      Object[][] params = new Object[3][2];</span></span><br><span class=\"line\"><span class=\"comment\">//      params[0] = new Object[]&#123;\"Tom2015\",1000&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">//      params[1] = new Object[]&#123;\"Tom2016\",2000&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">//      params[2] = new Object[]&#123;\"Tom2017\",3000&#125;;</span></span><br><span class=\"line\">List&lt;Object[]&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Object[]&gt;();</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">\"Tom2015\"</span>,<span class=\"number\">1000</span>&#125;);</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">\"Tom2016\"</span>,<span class=\"number\">2000</span>&#125;);</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">\"Tom2017\"</span>,<span class=\"number\">3000</span>&#125;);</span><br><span class=\"line\">template.batchUpdate(sql, list);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"单个查询\"><a href=\"#单个查询\" class=\"headerlink\" title=\"单个查询\"></a>单个查询</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String sql = <span class=\"string\">\"SELECT emp_id AS empId,emp_name AS empName,salary FROM employee WHERE emp_id=?\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//RowMapper是一个接口,这里我们使用其子类</span></span><br><span class=\"line\">RowMapper&lt;Employee&gt; rowMapper = <span class=\"keyword\">new</span> BeanPropertyRowMapper&lt;Employee&gt;(Employee.class);</span><br><span class=\"line\"><span class=\"comment\">//最后一个参数是可变参数，用于向sql语句中依次传递参数!</span></span><br><span class=\"line\">Employee employee = template.queryForObject(sql, rowMapper, <span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"多数查询\"><a href=\"#多数查询\" class=\"headerlink\" title=\"多数查询\"></a>多数查询</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查询salary&gt;4000的数据库记录，封装为List集合返回</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//需要注意的是：sql语句中的别名要与对应实体类的属性名保持一致！</span></span><br><span class=\"line\">String sql = <span class=\"string\">\"SELECT emp_id AS empId,emp_name AS empName,salary FROM employee WHERE salary &gt; ?\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//RowMapper是一个接口,这里我们使用其子类</span></span><br><span class=\"line\">RowMapper&lt;Employee&gt; rowMapper = <span class=\"keyword\">new</span> BeanPropertyRowMapper&lt;Employee&gt;(Employee.class);</span><br><span class=\"line\"><span class=\"comment\">//该query方法查询出来的是一个list列表,query方法的最后一个参数是可变参数！</span></span><br><span class=\"line\">List&lt;Employee&gt; list = template.query(sql, rowMapper, <span class=\"number\">4000</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sb.append(<span class=\"string\">\"select b.STATIS_DATE , b.STORE_ID , nvl(DAY_TOTAL_MONEY, 0) DAY_TOTAL_MONEY\"</span></span><br><span class=\"line\">    + <span class=\"string\">\", nvl(MONTH_TOTAL_MONEY, 0) MONTH_TOTAL_MONEY, nvl(ACC_TOTAL_MONEY, 0) ACC_TOTAL_MONEY\"</span></span><br><span class=\"line\">    + <span class=\"string\">\", nvl(CMP_ORDERS_AMNT, 0) CMP_ORDERS_AMNT, nvl(OSG_ORDERS_AMNT, 0) OSG_ORDERS_AMNT\"</span></span><br><span class=\"line\">    + <span class=\"string\">\", nvl(ORDER_AMNT, 0) ORDER_AMNT, nvl(NEW_USERS, 0) NEW_USERS, nvl(OLD_USERS, 0) OLD_USERS\"</span></span><br><span class=\"line\">    + <span class=\"string\">\", nvl(TOTAL_USERS, 0) TOTAL_USERS from tb_store_report_d@dblink_177_161 b where b.store_id = ?\"</span></span><br><span class=\"line\">    + <span class=\"string\">\" and b.statis_date between ? and ? order by b.statis_date asc\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">List&lt;DayData&gt; query = jdbcTemplate.query(sb.toString(), <span class=\"keyword\">new</span> Object[]&#123;storeId, startDate, endDate&#125;, <span class=\"keyword\">new</span> DayData());</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数使用\"><a href=\"#函数使用\" class=\"headerlink\" title=\"函数使用\"></a>函数使用</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查询最大salary</span></span><br><span class=\"line\">String sql = <span class=\"string\">\"SELECT MAX(salary) FROM employee\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//需要指定返回值的类型,而且类型必须是包装类型</span></span><br><span class=\"line\">Double maxSalary = template.queryForObject(sql, Double.class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//count()函数</span></span><br><span class=\"line\">String sql = <span class=\"string\">\"SELECT count(*) FROM SRT_SPU \"</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> count= jdbcTemplate.queryForObject(sql, Integer.class);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JdbcTemplate简介\"><a href=\"#JdbcTemplate简介\" class=\"headerlink\" title=\"JdbcTemplate简介\"></a>JdbcTemplate简介</h1><p>Spring提供的一个操作数据库的技术JdbcTemplate，是对Jdbc的封装。语法风格非常接近DBUtils。<br>JdbcTemplate可以直接操作数据库，加快效率，而且学这个JdbcTemplate也是为声明式事务做准备，毕竟要对数据库中的数据进行操纵！<br>JdbcTemplate中并没有提供一级缓存，以及类与类之间的关联关系！就像是spring提供的一个DBUtils。<br>Spring对数据库的操作使用JdbcTemplate来封装JDBC，结合Spring的注入特性可以很方便的实现对数据库的访问操作。使用JdbcTemplate可以像JDBC一样来编写数据库的操作代码</p>\n<h1 id=\"jdbcTemplate更新数据库常用方法\"><a href=\"#jdbcTemplate更新数据库常用方法\" class=\"headerlink\" title=\"jdbcTemplate更新数据库常用方法\"></a>jdbcTemplate更新数据库常用方法</h1><ul>\n<li>update (更新数据)</li>\n<li>batchUpdate (批量更新数据库)</li>\n<li>queryForObject (查询单行)</li>\n<li>query （查询多行）</li>\n<li>queryForObject (单值查询)不同的</li>\n</ul>\n<h1 id=\"更新操作\"><a href=\"#更新操作\" class=\"headerlink\" title=\"更新操作\"></a>更新操作</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String sql = <span class=\"string\">\"UPDATE student SET age = ? WHERE sid = ?\"</span>;</span><br><span class=\"line\">template.update(sql, <span class=\"number\">13</span>,<span class=\"number\">21020</span>);<span class=\"comment\">//第一个是sql语句，后面的按着顺序传入参数即可，这个update方法是接收的可变参数！</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"批量插入\"><a href=\"#批量插入\" class=\"headerlink\" title=\"批量插入\"></a>批量插入</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String sql=<span class=\"string\">\"INSERT INTO employee(`emp_name`,`salary`) VALUES(?,?)\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//执行sql语句需要传递的参数</span></span><br><span class=\"line\"><span class=\"comment\">//      Object[][] params = new Object[3][2];</span></span><br><span class=\"line\"><span class=\"comment\">//      params[0] = new Object[]&#123;\"Tom2015\",1000&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">//      params[1] = new Object[]&#123;\"Tom2016\",2000&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">//      params[2] = new Object[]&#123;\"Tom2017\",3000&#125;;</span></span><br><span class=\"line\">List&lt;Object[]&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Object[]&gt;();</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">\"Tom2015\"</span>,<span class=\"number\">1000</span>&#125;);</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">\"Tom2016\"</span>,<span class=\"number\">2000</span>&#125;);</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">\"Tom2017\"</span>,<span class=\"number\">3000</span>&#125;);</span><br><span class=\"line\">template.batchUpdate(sql, list);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"单个查询\"><a href=\"#单个查询\" class=\"headerlink\" title=\"单个查询\"></a>单个查询</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String sql = <span class=\"string\">\"SELECT emp_id AS empId,emp_name AS empName,salary FROM employee WHERE emp_id=?\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//RowMapper是一个接口,这里我们使用其子类</span></span><br><span class=\"line\">RowMapper&lt;Employee&gt; rowMapper = <span class=\"keyword\">new</span> BeanPropertyRowMapper&lt;Employee&gt;(Employee.class);</span><br><span class=\"line\"><span class=\"comment\">//最后一个参数是可变参数，用于向sql语句中依次传递参数!</span></span><br><span class=\"line\">Employee employee = template.queryForObject(sql, rowMapper, <span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"多数查询\"><a href=\"#多数查询\" class=\"headerlink\" title=\"多数查询\"></a>多数查询</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查询salary&gt;4000的数据库记录，封装为List集合返回</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//需要注意的是：sql语句中的别名要与对应实体类的属性名保持一致！</span></span><br><span class=\"line\">String sql = <span class=\"string\">\"SELECT emp_id AS empId,emp_name AS empName,salary FROM employee WHERE salary &gt; ?\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//RowMapper是一个接口,这里我们使用其子类</span></span><br><span class=\"line\">RowMapper&lt;Employee&gt; rowMapper = <span class=\"keyword\">new</span> BeanPropertyRowMapper&lt;Employee&gt;(Employee.class);</span><br><span class=\"line\"><span class=\"comment\">//该query方法查询出来的是一个list列表,query方法的最后一个参数是可变参数！</span></span><br><span class=\"line\">List&lt;Employee&gt; list = template.query(sql, rowMapper, <span class=\"number\">4000</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sb.append(<span class=\"string\">\"select b.STATIS_DATE , b.STORE_ID , nvl(DAY_TOTAL_MONEY, 0) DAY_TOTAL_MONEY\"</span></span><br><span class=\"line\">    + <span class=\"string\">\", nvl(MONTH_TOTAL_MONEY, 0) MONTH_TOTAL_MONEY, nvl(ACC_TOTAL_MONEY, 0) ACC_TOTAL_MONEY\"</span></span><br><span class=\"line\">    + <span class=\"string\">\", nvl(CMP_ORDERS_AMNT, 0) CMP_ORDERS_AMNT, nvl(OSG_ORDERS_AMNT, 0) OSG_ORDERS_AMNT\"</span></span><br><span class=\"line\">    + <span class=\"string\">\", nvl(ORDER_AMNT, 0) ORDER_AMNT, nvl(NEW_USERS, 0) NEW_USERS, nvl(OLD_USERS, 0) OLD_USERS\"</span></span><br><span class=\"line\">    + <span class=\"string\">\", nvl(TOTAL_USERS, 0) TOTAL_USERS from tb_store_report_d@dblink_177_161 b where b.store_id = ?\"</span></span><br><span class=\"line\">    + <span class=\"string\">\" and b.statis_date between ? and ? order by b.statis_date asc\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">List&lt;DayData&gt; query = jdbcTemplate.query(sb.toString(), <span class=\"keyword\">new</span> Object[]&#123;storeId, startDate, endDate&#125;, <span class=\"keyword\">new</span> DayData());</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数使用\"><a href=\"#函数使用\" class=\"headerlink\" title=\"函数使用\"></a>函数使用</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查询最大salary</span></span><br><span class=\"line\">String sql = <span class=\"string\">\"SELECT MAX(salary) FROM employee\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//需要指定返回值的类型,而且类型必须是包装类型</span></span><br><span class=\"line\">Double maxSalary = template.queryForObject(sql, Double.class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//count()函数</span></span><br><span class=\"line\">String sql = <span class=\"string\">\"SELECT count(*) FROM SRT_SPU \"</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> count= jdbcTemplate.queryForObject(sql, Integer.class);</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Linux","date":"2019-08-20T07:52:49.000Z","_content":"\n\n\n# 目录结构\n![avatar](https://414706657.oss-cn-shenzhen.aliyuncs.com/psb.jpg)\n\n| 目录 | 说明                                                                | \n|:-: | --------------------------------------------------------------------- | \n| bin  | 存放二进制可执行文件(ls,cat,mkdir等)                       | \n| boot | 存放用于系统引导时使用的各种文件                      |\n| dev  | 用于存放设备文件                                              |  \n| etc  | 存放系统配置文件                                              | \n| home | 存放所有用户文件的根目录                                  | \n| lib  | 存放跟文件系统中的程序运行所需要的共享库及内核模块 | \n| mnt  | 系统管理员安装临时文件系统的安装点                   |  \n| opt  | 额外安装的可选应用程序包所放置的位置                | \n| proc | 虚拟文件系统，存放当前内存的映射                      |\n| root | 超级用户目录                                                    | \n| sbin | 存放二进制可执行文件，只有root才能访问               | \n| tmp  | 用于存放各种临时文件                                        |\n| usr  | 用于存放系统应用程序，比较重要的目录/usr/local 本地管理员软件安装目录 |\n| var  | 用于存放运行时需要改变数据的文件                      | \n\n--------------------- \n\n\n#### 基础知识\n- . 表示当前目录\n- ..表示上层目录\n- .so结尾文件：C 类库\n- .dll结尾文件：动态链接库  c#，c++，c\n- .jar结尾文件：java 类库\n\n--------------------- \n\n#### 常用快捷键\n\n指令 | 说明\n:-: | :- \nCtrl+C |退出\nCtrl+insert|粘贴\n\n--------------------- \n#### 常用指令\n\n指令 | 说明\n:-: | :- \nshowdown -h now | 立即关机\ncd  |   进入一个目录\nll  |   展示目录列表(只有管理员可用)\nls  |   展示目录列表\nls -al  |   展示全部列表(包括隐藏文件)\n.   |   当前目录\n..  |   上层目录\ncd ~/cd |进入当前用户主目录\nsu username |   切换用户\nsudo su/su |    普通用户切换成root用户\nlsb_release -a|查看版本信息\n\n--------------------- \n\n#### 操作文件目录\n\n\n#### 系统管理命令\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">stat</td>\n<td style=\"text-align:left\">显示指定文件的相关信息,比ls命令显示内容更多</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">who</td>\n<td style=\"text-align:left\">显示在线登录用户</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">hostname</td>\n<td style=\"text-align:left\">显示主机名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">uname</td>\n<td style=\"text-align:left\">显示系统信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">top</td>\n<td style=\"text-align:left\">显示当前系统中耗费资源最多的进程</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ps</td>\n<td style=\"text-align:left\">显示瞬间的进程状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">du</td>\n<td style=\"text-align:left\">显示指定的文件（目录）已使用的磁盘空间的总量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">df</td>\n<td style=\"text-align:left\">显示文件系统磁盘空间的使用情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">free</td>\n<td style=\"text-align:left\">显示当前内存和交换空间的使用情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ifconfig</td>\n<td style=\"text-align:left\">显示网络接口信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ping</td>\n<td style=\"text-align:left\">测试网络的连通性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">netstat</td>\n<td style=\"text-align:left\">显示网络状态信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clear</td>\n<td style=\"text-align:left\">清屏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">kill</td>\n<td style=\"text-align:left\">杀死一个进程</td>\n</tr>\n</tbody>\n</table>\n\n## Mysql基本操作\n指令 | 说明 \n:-: | :- \nquit | 数据库退出\n--------------------- \n\n    nano /etc/ssh/sshd_config\n    \n    # Authentication:\n    LoginGraceTime 120\n    #PermitRootLogin without-password     //注释此行\n    PermitRootLogin yes                             //加入此行\n    StrictModes yes\n    \n    重启服务\n    service ssh restart\n    \n--------------------- \n\n#### 重启\n- reboot\n- shutdown -r now   \n#### 关机\n- shutdown -h now\n--------------------- \n#### 解压缩 -tar\n- 压缩文件夹：tar -zcvf test.tar.gz test\\\n- 解压文件夹：tar -zxvf test.tar.gz\n---------------------\n## 修改数据源\n#### 查看系统版本\n    lsb_release -a\n#### 编辑数据源\n    vi /etc/apt/sources.list\n删除全部内容并修改为   \n\n    deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse\n    deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse\n    deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse\n    deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse\n\n#### 更新数据源\n    apt-get update\n   \n---------------------------------- \n#### 安装软件包\n    apt-get install packagename\n    \n#### 删除软件包\n    apt-get remove packagename\n更新软件包列表\napt-get update\n","source":"_posts/Linux.md","raw":"---\ntitle: Linux\ndate: 2019-08-20 15:52:49\ntags:\n---\n\n\n\n# 目录结构\n![avatar](https://414706657.oss-cn-shenzhen.aliyuncs.com/psb.jpg)\n\n| 目录 | 说明                                                                | \n|:-: | --------------------------------------------------------------------- | \n| bin  | 存放二进制可执行文件(ls,cat,mkdir等)                       | \n| boot | 存放用于系统引导时使用的各种文件                      |\n| dev  | 用于存放设备文件                                              |  \n| etc  | 存放系统配置文件                                              | \n| home | 存放所有用户文件的根目录                                  | \n| lib  | 存放跟文件系统中的程序运行所需要的共享库及内核模块 | \n| mnt  | 系统管理员安装临时文件系统的安装点                   |  \n| opt  | 额外安装的可选应用程序包所放置的位置                | \n| proc | 虚拟文件系统，存放当前内存的映射                      |\n| root | 超级用户目录                                                    | \n| sbin | 存放二进制可执行文件，只有root才能访问               | \n| tmp  | 用于存放各种临时文件                                        |\n| usr  | 用于存放系统应用程序，比较重要的目录/usr/local 本地管理员软件安装目录 |\n| var  | 用于存放运行时需要改变数据的文件                      | \n\n--------------------- \n\n\n#### 基础知识\n- . 表示当前目录\n- ..表示上层目录\n- .so结尾文件：C 类库\n- .dll结尾文件：动态链接库  c#，c++，c\n- .jar结尾文件：java 类库\n\n--------------------- \n\n#### 常用快捷键\n\n指令 | 说明\n:-: | :- \nCtrl+C |退出\nCtrl+insert|粘贴\n\n--------------------- \n#### 常用指令\n\n指令 | 说明\n:-: | :- \nshowdown -h now | 立即关机\ncd  |   进入一个目录\nll  |   展示目录列表(只有管理员可用)\nls  |   展示目录列表\nls -al  |   展示全部列表(包括隐藏文件)\n.   |   当前目录\n..  |   上层目录\ncd ~/cd |进入当前用户主目录\nsu username |   切换用户\nsudo su/su |    普通用户切换成root用户\nlsb_release -a|查看版本信息\n\n--------------------- \n\n#### 操作文件目录\n\n\n#### 系统管理命令\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">stat</td>\n<td style=\"text-align:left\">显示指定文件的相关信息,比ls命令显示内容更多</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">who</td>\n<td style=\"text-align:left\">显示在线登录用户</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">hostname</td>\n<td style=\"text-align:left\">显示主机名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">uname</td>\n<td style=\"text-align:left\">显示系统信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">top</td>\n<td style=\"text-align:left\">显示当前系统中耗费资源最多的进程</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ps</td>\n<td style=\"text-align:left\">显示瞬间的进程状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">du</td>\n<td style=\"text-align:left\">显示指定的文件（目录）已使用的磁盘空间的总量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">df</td>\n<td style=\"text-align:left\">显示文件系统磁盘空间的使用情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">free</td>\n<td style=\"text-align:left\">显示当前内存和交换空间的使用情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ifconfig</td>\n<td style=\"text-align:left\">显示网络接口信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ping</td>\n<td style=\"text-align:left\">测试网络的连通性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">netstat</td>\n<td style=\"text-align:left\">显示网络状态信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clear</td>\n<td style=\"text-align:left\">清屏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">kill</td>\n<td style=\"text-align:left\">杀死一个进程</td>\n</tr>\n</tbody>\n</table>\n\n## Mysql基本操作\n指令 | 说明 \n:-: | :- \nquit | 数据库退出\n--------------------- \n\n    nano /etc/ssh/sshd_config\n    \n    # Authentication:\n    LoginGraceTime 120\n    #PermitRootLogin without-password     //注释此行\n    PermitRootLogin yes                             //加入此行\n    StrictModes yes\n    \n    重启服务\n    service ssh restart\n    \n--------------------- \n\n#### 重启\n- reboot\n- shutdown -r now   \n#### 关机\n- shutdown -h now\n--------------------- \n#### 解压缩 -tar\n- 压缩文件夹：tar -zcvf test.tar.gz test\\\n- 解压文件夹：tar -zxvf test.tar.gz\n---------------------\n## 修改数据源\n#### 查看系统版本\n    lsb_release -a\n#### 编辑数据源\n    vi /etc/apt/sources.list\n删除全部内容并修改为   \n\n    deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse\n    deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse\n    deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse\n    deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse\n\n#### 更新数据源\n    apt-get update\n   \n---------------------------------- \n#### 安装软件包\n    apt-get install packagename\n    \n#### 删除软件包\n    apt-get remove packagename\n更新软件包列表\napt-get update\n","slug":"Linux","published":1,"updated":"2021-04-22T03:43:26.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysd000jko9bn0p1f9a9","content":"<h1 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h1><p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/psb.jpg\" alt=\"avatar\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">目录</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">bin</td>\n<td>存放二进制可执行文件(ls,cat,mkdir等)</td>\n</tr>\n<tr>\n<td align=\"center\">boot</td>\n<td>存放用于系统引导时使用的各种文件</td>\n</tr>\n<tr>\n<td align=\"center\">dev</td>\n<td>用于存放设备文件</td>\n</tr>\n<tr>\n<td align=\"center\">etc</td>\n<td>存放系统配置文件</td>\n</tr>\n<tr>\n<td align=\"center\">home</td>\n<td>存放所有用户文件的根目录</td>\n</tr>\n<tr>\n<td align=\"center\">lib</td>\n<td>存放跟文件系统中的程序运行所需要的共享库及内核模块</td>\n</tr>\n<tr>\n<td align=\"center\">mnt</td>\n<td>系统管理员安装临时文件系统的安装点</td>\n</tr>\n<tr>\n<td align=\"center\">opt</td>\n<td>额外安装的可选应用程序包所放置的位置</td>\n</tr>\n<tr>\n<td align=\"center\">proc</td>\n<td>虚拟文件系统，存放当前内存的映射</td>\n</tr>\n<tr>\n<td align=\"center\">root</td>\n<td>超级用户目录</td>\n</tr>\n<tr>\n<td align=\"center\">sbin</td>\n<td>存放二进制可执行文件，只有root才能访问</td>\n</tr>\n<tr>\n<td align=\"center\">tmp</td>\n<td>用于存放各种临时文件</td>\n</tr>\n<tr>\n<td align=\"center\">usr</td>\n<td>用于存放系统应用程序，比较重要的目录/usr/local 本地管理员软件安装目录</td>\n</tr>\n<tr>\n<td align=\"center\">var</td>\n<td>用于存放运行时需要改变数据的文件</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h4><ul>\n<li>. 表示当前目录</li>\n<li>..表示上层目录</li>\n<li>.so结尾文件：C 类库</li>\n<li>.dll结尾文件：动态链接库  c#，c++，c</li>\n<li>.jar结尾文件：java 类库</li>\n</ul>\n<hr>\n<h4 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h4><table>\n<thead>\n<tr>\n<th align=\"center\">指令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Ctrl+C</td>\n<td align=\"left\">退出</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl+insert</td>\n<td align=\"left\">粘贴</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h4><table>\n<thead>\n<tr>\n<th align=\"center\">指令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">showdown -h now</td>\n<td align=\"left\">立即关机</td>\n</tr>\n<tr>\n<td align=\"center\">cd</td>\n<td align=\"left\">进入一个目录</td>\n</tr>\n<tr>\n<td align=\"center\">ll</td>\n<td align=\"left\">展示目录列表(只有管理员可用)</td>\n</tr>\n<tr>\n<td align=\"center\">ls</td>\n<td align=\"left\">展示目录列表</td>\n</tr>\n<tr>\n<td align=\"center\">ls -al</td>\n<td align=\"left\">展示全部列表(包括隐藏文件)</td>\n</tr>\n<tr>\n<td align=\"center\">.</td>\n<td align=\"left\">当前目录</td>\n</tr>\n<tr>\n<td align=\"center\">..</td>\n<td align=\"left\">上层目录</td>\n</tr>\n<tr>\n<td align=\"center\">cd ~/cd</td>\n<td align=\"left\">进入当前用户主目录</td>\n</tr>\n<tr>\n<td align=\"center\">su username</td>\n<td align=\"left\">切换用户</td>\n</tr>\n<tr>\n<td align=\"center\">sudo su/su</td>\n<td align=\"left\">普通用户切换成root用户</td>\n</tr>\n<tr>\n<td align=\"center\">lsb_release -a</td>\n<td align=\"left\">查看版本信息</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"操作文件目录\"><a href=\"#操作文件目录\" class=\"headerlink\" title=\"操作文件目录\"></a>操作文件目录</h4><h4 id=\"系统管理命令\"><a href=\"#系统管理命令\" class=\"headerlink\" title=\"系统管理命令\"></a>系统管理命令</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">stat</td>\n<td style=\"text-align:left\">显示指定文件的相关信息,比ls命令显示内容更多</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">who</td>\n<td style=\"text-align:left\">显示在线登录用户</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">hostname</td>\n<td style=\"text-align:left\">显示主机名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">uname</td>\n<td style=\"text-align:left\">显示系统信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">top</td>\n<td style=\"text-align:left\">显示当前系统中耗费资源最多的进程</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ps</td>\n<td style=\"text-align:left\">显示瞬间的进程状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">du</td>\n<td style=\"text-align:left\">显示指定的文件（目录）已使用的磁盘空间的总量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">df</td>\n<td style=\"text-align:left\">显示文件系统磁盘空间的使用情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">free</td>\n<td style=\"text-align:left\">显示当前内存和交换空间的使用情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ifconfig</td>\n<td style=\"text-align:left\">显示网络接口信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ping</td>\n<td style=\"text-align:left\">测试网络的连通性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">netstat</td>\n<td style=\"text-align:left\">显示网络状态信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clear</td>\n<td style=\"text-align:left\">清屏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">kill</td>\n<td style=\"text-align:left\">杀死一个进程</td>\n</tr>\n</tbody>\n</table>\n\n<h2 id=\"Mysql基本操作\"><a href=\"#Mysql基本操作\" class=\"headerlink\" title=\"Mysql基本操作\"></a>Mysql基本操作</h2><table>\n<thead>\n<tr>\n<th align=\"center\">指令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">quit</td>\n<td align=\"left\">数据库退出</td>\n</tr>\n<tr>\n<td align=\"center\">———————</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<pre><code>nano /etc/ssh/sshd_config\n\n# Authentication:\nLoginGraceTime 120\n#PermitRootLogin without-password     //注释此行\nPermitRootLogin yes                             //加入此行\nStrictModes yes\n\n重启服务\nservice ssh restart</code></pre><hr>\n<h4 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h4><ul>\n<li>reboot</li>\n<li>shutdown -r now   <h4 id=\"关机\"><a href=\"#关机\" class=\"headerlink\" title=\"关机\"></a>关机</h4></li>\n<li>shutdown -h now</li>\n</ul>\n<hr>\n<h4 id=\"解压缩-tar\"><a href=\"#解压缩-tar\" class=\"headerlink\" title=\"解压缩 -tar\"></a>解压缩 -tar</h4><ul>\n<li>压缩文件夹：tar -zcvf test.tar.gz test\\</li>\n<li>解压文件夹：tar -zxvf test.tar.gz</li>\n</ul>\n<hr>\n<h2 id=\"修改数据源\"><a href=\"#修改数据源\" class=\"headerlink\" title=\"修改数据源\"></a>修改数据源</h2><h4 id=\"查看系统版本\"><a href=\"#查看系统版本\" class=\"headerlink\" title=\"查看系统版本\"></a>查看系统版本</h4><pre><code>lsb_release -a</code></pre><h4 id=\"编辑数据源\"><a href=\"#编辑数据源\" class=\"headerlink\" title=\"编辑数据源\"></a>编辑数据源</h4><pre><code>vi /etc/apt/sources.list</code></pre><p>删除全部内容并修改为   </p>\n<pre><code>deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</code></pre><h4 id=\"更新数据源\"><a href=\"#更新数据源\" class=\"headerlink\" title=\"更新数据源\"></a>更新数据源</h4><pre><code>apt-get update</code></pre><hr>\n<h4 id=\"安装软件包\"><a href=\"#安装软件包\" class=\"headerlink\" title=\"安装软件包\"></a>安装软件包</h4><pre><code>apt-get install packagename</code></pre><h4 id=\"删除软件包\"><a href=\"#删除软件包\" class=\"headerlink\" title=\"删除软件包\"></a>删除软件包</h4><pre><code>apt-get remove packagename</code></pre><p>更新软件包列表<br>apt-get update</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h1><p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/psb.jpg\" alt=\"avatar\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">目录</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">bin</td>\n<td>存放二进制可执行文件(ls,cat,mkdir等)</td>\n</tr>\n<tr>\n<td align=\"center\">boot</td>\n<td>存放用于系统引导时使用的各种文件</td>\n</tr>\n<tr>\n<td align=\"center\">dev</td>\n<td>用于存放设备文件</td>\n</tr>\n<tr>\n<td align=\"center\">etc</td>\n<td>存放系统配置文件</td>\n</tr>\n<tr>\n<td align=\"center\">home</td>\n<td>存放所有用户文件的根目录</td>\n</tr>\n<tr>\n<td align=\"center\">lib</td>\n<td>存放跟文件系统中的程序运行所需要的共享库及内核模块</td>\n</tr>\n<tr>\n<td align=\"center\">mnt</td>\n<td>系统管理员安装临时文件系统的安装点</td>\n</tr>\n<tr>\n<td align=\"center\">opt</td>\n<td>额外安装的可选应用程序包所放置的位置</td>\n</tr>\n<tr>\n<td align=\"center\">proc</td>\n<td>虚拟文件系统，存放当前内存的映射</td>\n</tr>\n<tr>\n<td align=\"center\">root</td>\n<td>超级用户目录</td>\n</tr>\n<tr>\n<td align=\"center\">sbin</td>\n<td>存放二进制可执行文件，只有root才能访问</td>\n</tr>\n<tr>\n<td align=\"center\">tmp</td>\n<td>用于存放各种临时文件</td>\n</tr>\n<tr>\n<td align=\"center\">usr</td>\n<td>用于存放系统应用程序，比较重要的目录/usr/local 本地管理员软件安装目录</td>\n</tr>\n<tr>\n<td align=\"center\">var</td>\n<td>用于存放运行时需要改变数据的文件</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h4><ul>\n<li>. 表示当前目录</li>\n<li>..表示上层目录</li>\n<li>.so结尾文件：C 类库</li>\n<li>.dll结尾文件：动态链接库  c#，c++，c</li>\n<li>.jar结尾文件：java 类库</li>\n</ul>\n<hr>\n<h4 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h4><table>\n<thead>\n<tr>\n<th align=\"center\">指令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Ctrl+C</td>\n<td align=\"left\">退出</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl+insert</td>\n<td align=\"left\">粘贴</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h4><table>\n<thead>\n<tr>\n<th align=\"center\">指令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">showdown -h now</td>\n<td align=\"left\">立即关机</td>\n</tr>\n<tr>\n<td align=\"center\">cd</td>\n<td align=\"left\">进入一个目录</td>\n</tr>\n<tr>\n<td align=\"center\">ll</td>\n<td align=\"left\">展示目录列表(只有管理员可用)</td>\n</tr>\n<tr>\n<td align=\"center\">ls</td>\n<td align=\"left\">展示目录列表</td>\n</tr>\n<tr>\n<td align=\"center\">ls -al</td>\n<td align=\"left\">展示全部列表(包括隐藏文件)</td>\n</tr>\n<tr>\n<td align=\"center\">.</td>\n<td align=\"left\">当前目录</td>\n</tr>\n<tr>\n<td align=\"center\">..</td>\n<td align=\"left\">上层目录</td>\n</tr>\n<tr>\n<td align=\"center\">cd ~/cd</td>\n<td align=\"left\">进入当前用户主目录</td>\n</tr>\n<tr>\n<td align=\"center\">su username</td>\n<td align=\"left\">切换用户</td>\n</tr>\n<tr>\n<td align=\"center\">sudo su/su</td>\n<td align=\"left\">普通用户切换成root用户</td>\n</tr>\n<tr>\n<td align=\"center\">lsb_release -a</td>\n<td align=\"left\">查看版本信息</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"操作文件目录\"><a href=\"#操作文件目录\" class=\"headerlink\" title=\"操作文件目录\"></a>操作文件目录</h4><h4 id=\"系统管理命令\"><a href=\"#系统管理命令\" class=\"headerlink\" title=\"系统管理命令\"></a>系统管理命令</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">stat</td>\n<td style=\"text-align:left\">显示指定文件的相关信息,比ls命令显示内容更多</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">who</td>\n<td style=\"text-align:left\">显示在线登录用户</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">hostname</td>\n<td style=\"text-align:left\">显示主机名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">uname</td>\n<td style=\"text-align:left\">显示系统信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">top</td>\n<td style=\"text-align:left\">显示当前系统中耗费资源最多的进程</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ps</td>\n<td style=\"text-align:left\">显示瞬间的进程状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">du</td>\n<td style=\"text-align:left\">显示指定的文件（目录）已使用的磁盘空间的总量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">df</td>\n<td style=\"text-align:left\">显示文件系统磁盘空间的使用情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">free</td>\n<td style=\"text-align:left\">显示当前内存和交换空间的使用情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ifconfig</td>\n<td style=\"text-align:left\">显示网络接口信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ping</td>\n<td style=\"text-align:left\">测试网络的连通性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">netstat</td>\n<td style=\"text-align:left\">显示网络状态信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clear</td>\n<td style=\"text-align:left\">清屏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">kill</td>\n<td style=\"text-align:left\">杀死一个进程</td>\n</tr>\n</tbody>\n</table>\n\n<h2 id=\"Mysql基本操作\"><a href=\"#Mysql基本操作\" class=\"headerlink\" title=\"Mysql基本操作\"></a>Mysql基本操作</h2><table>\n<thead>\n<tr>\n<th align=\"center\">指令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">quit</td>\n<td align=\"left\">数据库退出</td>\n</tr>\n<tr>\n<td align=\"center\">———————</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<pre><code>nano /etc/ssh/sshd_config\n\n# Authentication:\nLoginGraceTime 120\n#PermitRootLogin without-password     //注释此行\nPermitRootLogin yes                             //加入此行\nStrictModes yes\n\n重启服务\nservice ssh restart</code></pre><hr>\n<h4 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h4><ul>\n<li>reboot</li>\n<li>shutdown -r now   <h4 id=\"关机\"><a href=\"#关机\" class=\"headerlink\" title=\"关机\"></a>关机</h4></li>\n<li>shutdown -h now</li>\n</ul>\n<hr>\n<h4 id=\"解压缩-tar\"><a href=\"#解压缩-tar\" class=\"headerlink\" title=\"解压缩 -tar\"></a>解压缩 -tar</h4><ul>\n<li>压缩文件夹：tar -zcvf test.tar.gz test\\</li>\n<li>解压文件夹：tar -zxvf test.tar.gz</li>\n</ul>\n<hr>\n<h2 id=\"修改数据源\"><a href=\"#修改数据源\" class=\"headerlink\" title=\"修改数据源\"></a>修改数据源</h2><h4 id=\"查看系统版本\"><a href=\"#查看系统版本\" class=\"headerlink\" title=\"查看系统版本\"></a>查看系统版本</h4><pre><code>lsb_release -a</code></pre><h4 id=\"编辑数据源\"><a href=\"#编辑数据源\" class=\"headerlink\" title=\"编辑数据源\"></a>编辑数据源</h4><pre><code>vi /etc/apt/sources.list</code></pre><p>删除全部内容并修改为   </p>\n<pre><code>deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</code></pre><h4 id=\"更新数据源\"><a href=\"#更新数据源\" class=\"headerlink\" title=\"更新数据源\"></a>更新数据源</h4><pre><code>apt-get update</code></pre><hr>\n<h4 id=\"安装软件包\"><a href=\"#安装软件包\" class=\"headerlink\" title=\"安装软件包\"></a>安装软件包</h4><pre><code>apt-get install packagename</code></pre><h4 id=\"删除软件包\"><a href=\"#删除软件包\" class=\"headerlink\" title=\"删除软件包\"></a>删除软件包</h4><pre><code>apt-get remove packagename</code></pre><p>更新软件包列表<br>apt-get update</p>\n"},{"title":"Jenkins","date":"2021-04-30T06:05:10.000Z","_content":"\n# 基于Docker-composea安装Jenkins\n\n```test\nversion: '3.1'\nservices:\n  jenkins:\n    restart: always\n    image: jenkins/jenkins\n    container_name: jenkins\n    ports:\n      # 发布端口:宿主机ip:容器ip\n      - 5000:8080\n      # 基于 JNLP 的 Jenkins 代理通过 TCP 端口 50000 与 Jenkins master 进行通信\n      - 50000:50000\n    environment:\n      TZ: Asia/Shanghai\n    volumes:\n      #数据卷位置，在当前文件加简历data文件\n      - ./data:/var/jenkins_home\n```\n\n- 启动命令：docker-compose up -d\n- 安装过程中会出现 Docker 数据卷 权限问题，用以下命令解决：chown -R 1000 ./data\n\n### 解锁 Jenkins\n- Jenkins 第一次启动时需要输入一个初始密码用以解锁安装流程，使用 docker logs jenkins 即可方便的查看到初始密码\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_1.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_2.png)\n\n\n### Jenkins 插件下载缓慢或失败解决办法\n- Jenkins设置清华镜像加速:https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_3.webp)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_4.webp)\n\n### Jenkins配置jdk和maven\n- 将jdk和maven拷贝至数据卷data目录下\n- 使用docker exec -it 容器id /bin/bansh 进入容器/var/jenkins_home目录下确认是否存在文件\n- 将JAVA_HOME和MAVEN_HOME配置为容器地址\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_5.png)","source":"_posts/Jenkins.md","raw":"---\ntitle: Jenkins\ndate: 2021-04-30 14:05:10\ntags:\n---\n\n# 基于Docker-composea安装Jenkins\n\n```test\nversion: '3.1'\nservices:\n  jenkins:\n    restart: always\n    image: jenkins/jenkins\n    container_name: jenkins\n    ports:\n      # 发布端口:宿主机ip:容器ip\n      - 5000:8080\n      # 基于 JNLP 的 Jenkins 代理通过 TCP 端口 50000 与 Jenkins master 进行通信\n      - 50000:50000\n    environment:\n      TZ: Asia/Shanghai\n    volumes:\n      #数据卷位置，在当前文件加简历data文件\n      - ./data:/var/jenkins_home\n```\n\n- 启动命令：docker-compose up -d\n- 安装过程中会出现 Docker 数据卷 权限问题，用以下命令解决：chown -R 1000 ./data\n\n### 解锁 Jenkins\n- Jenkins 第一次启动时需要输入一个初始密码用以解锁安装流程，使用 docker logs jenkins 即可方便的查看到初始密码\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_1.png)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_2.png)\n\n\n### Jenkins 插件下载缓慢或失败解决办法\n- Jenkins设置清华镜像加速:https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_3.webp)\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_4.webp)\n\n### Jenkins配置jdk和maven\n- 将jdk和maven拷贝至数据卷data目录下\n- 使用docker exec -it 容器id /bin/bansh 进入容器/var/jenkins_home目录下确认是否存在文件\n- 将JAVA_HOME和MAVEN_HOME配置为容器地址\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_5.png)","slug":"Jenkins","published":1,"updated":"2021-05-01T06:57:11.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcyse000mko9bkqipnkkm","content":"<h1 id=\"基于Docker-composea安装Jenkins\"><a href=\"#基于Docker-composea安装Jenkins\" class=\"headerlink\" title=\"基于Docker-composea安装Jenkins\"></a>基于Docker-composea安装Jenkins</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &apos;3.1&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  jenkins:</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    image: jenkins/jenkins</span><br><span class=\"line\">    container_name: jenkins</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      # 发布端口:宿主机ip:容器ip</span><br><span class=\"line\">      - 5000:8080</span><br><span class=\"line\">      # 基于 JNLP 的 Jenkins 代理通过 TCP 端口 50000 与 Jenkins master 进行通信</span><br><span class=\"line\">      - 50000:50000</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: Asia/Shanghai</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      #数据卷位置，在当前文件加简历data文件</span><br><span class=\"line\">      - ./data:/var/jenkins_home</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动命令：docker-compose up -d</li>\n<li>安装过程中会出现 Docker 数据卷 权限问题，用以下命令解决：chown -R 1000 ./data</li>\n</ul>\n<h3 id=\"解锁-Jenkins\"><a href=\"#解锁-Jenkins\" class=\"headerlink\" title=\"解锁 Jenkins\"></a>解锁 Jenkins</h3><ul>\n<li>Jenkins 第一次启动时需要输入一个初始密码用以解锁安装流程，使用 docker logs jenkins 即可方便的查看到初始密码</li>\n</ul>\n<p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_1.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_2.png\" alt></p>\n<h3 id=\"Jenkins-插件下载缓慢或失败解决办法\"><a href=\"#Jenkins-插件下载缓慢或失败解决办法\" class=\"headerlink\" title=\"Jenkins 插件下载缓慢或失败解决办法\"></a>Jenkins 插件下载缓慢或失败解决办法</h3><ul>\n<li>Jenkins设置清华镜像加速:<a href=\"https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_3.webp\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_4.webp\" alt></li>\n</ul>\n<h3 id=\"Jenkins配置jdk和maven\"><a href=\"#Jenkins配置jdk和maven\" class=\"headerlink\" title=\"Jenkins配置jdk和maven\"></a>Jenkins配置jdk和maven</h3><ul>\n<li>将jdk和maven拷贝至数据卷data目录下</li>\n<li>使用docker exec -it 容器id /bin/bansh 进入容器/var/jenkins_home目录下确认是否存在文件</li>\n<li>将JAVA_HOME和MAVEN_HOME配置为容器地址<br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_5.png\" alt></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基于Docker-composea安装Jenkins\"><a href=\"#基于Docker-composea安装Jenkins\" class=\"headerlink\" title=\"基于Docker-composea安装Jenkins\"></a>基于Docker-composea安装Jenkins</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &apos;3.1&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  jenkins:</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    image: jenkins/jenkins</span><br><span class=\"line\">    container_name: jenkins</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      # 发布端口:宿主机ip:容器ip</span><br><span class=\"line\">      - 5000:8080</span><br><span class=\"line\">      # 基于 JNLP 的 Jenkins 代理通过 TCP 端口 50000 与 Jenkins master 进行通信</span><br><span class=\"line\">      - 50000:50000</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: Asia/Shanghai</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      #数据卷位置，在当前文件加简历data文件</span><br><span class=\"line\">      - ./data:/var/jenkins_home</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动命令：docker-compose up -d</li>\n<li>安装过程中会出现 Docker 数据卷 权限问题，用以下命令解决：chown -R 1000 ./data</li>\n</ul>\n<h3 id=\"解锁-Jenkins\"><a href=\"#解锁-Jenkins\" class=\"headerlink\" title=\"解锁 Jenkins\"></a>解锁 Jenkins</h3><ul>\n<li>Jenkins 第一次启动时需要输入一个初始密码用以解锁安装流程，使用 docker logs jenkins 即可方便的查看到初始密码</li>\n</ul>\n<p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_1.png\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_2.png\" alt></p>\n<h3 id=\"Jenkins-插件下载缓慢或失败解决办法\"><a href=\"#Jenkins-插件下载缓慢或失败解决办法\" class=\"headerlink\" title=\"Jenkins 插件下载缓慢或失败解决办法\"></a>Jenkins 插件下载缓慢或失败解决办法</h3><ul>\n<li>Jenkins设置清华镜像加速:<a href=\"https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_3.webp\" alt><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_4.webp\" alt></li>\n</ul>\n<h3 id=\"Jenkins配置jdk和maven\"><a href=\"#Jenkins配置jdk和maven\" class=\"headerlink\" title=\"Jenkins配置jdk和maven\"></a>Jenkins配置jdk和maven</h3><ul>\n<li>将jdk和maven拷贝至数据卷data目录下</li>\n<li>使用docker exec -it 容器id /bin/bansh 进入容器/var/jenkins_home目录下确认是否存在文件</li>\n<li>将JAVA_HOME和MAVEN_HOME配置为容器地址<br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/jenkins_5.png\" alt></li>\n</ul>\n"},{"title":"MongoDB","date":"2019-10-16T02:21:31.000Z","_content":"\n## 基于docker安装MongoDB\n\n```text\nversion: \"3\"\nservices:\n \n  mongodb:\n    image: mongo:4.1\n    environment:\n        MONGO_INITDB_ROOT_USERNAME: \"root\"\n        MONGO_INITDB_ROOT_PASSWORD: \"abc123\"\n        TZ: \"Asia/Shanghai\"\n    volumes:\n      - ./mongo:/data/db:rw\n      - ./mongo/mongo_key:/mongo:rw\n    ports:\n       - \"27017:27017\"\n    networks:\n       - default\n    command:\n       --auth\n\n      \nnetworks:\n  default:\n\n\n```\n\n**注意**：新建数据库需要创建用户才能指定数据库连接\n\n```test\ndb.createUser(\n  {\n    user: \"name\",\n    pwd: \"password\",\n    roles: [ { role: \"readWrite\", db: \"db_name\" } ]\n  }\n)\n```\n\n**Built-In Roles（内置角色）：**\n\n```text\n1. 数据库用户角色：read、readWrite;\n2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；\n3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；\n4. 备份恢复角色：backup、restore；\n5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase\n6. 超级用户角色：root \n// 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）\n7. 内部角色：__system\n```\n\n**具体角色：**\n\n```text\nRead：允许用户读取指定数据库\nreadWrite：允许用户读写指定数据库\ndbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile\nuserAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户\nclusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。\nreadAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限\nreadWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限\nuserAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限\ndbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。\nroot：只在admin数据库中可用。超级账号，超级权限。\n```\n\n## Boot集成MongoDB\n\n**POM**\n\n```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-mongodb</artifactId>\n</dependency>\n```\n\n**application.properties**\n\n```text\nspring.data.mongodb.host=120.78.152.130\nspring.data.mongodb.port=27017\nspring.data.mongodb.database=db_demo\nspring.data.mongodb.username=root\nspring.data.mongodb.password=123456\n```\n\n**创建实体类对应数据库表**\n\n```java\nimport lombok.Data;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\nimport org.springframework.data.mongodb.core.mapping.Field;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/10/15 14:01\n */\n\n@Data\n@Document(collection = \"db_user\")\npublic class User {\n\n    @Id\n    private String id;\n\n    @Field(\"name\")\n    private String name;\n\n    @Field(\"age\")\n    private String age;\n\n    @Field(\"sex\")\n    private String sex;\n}\n```\n\n**DAO创建查询方法**\n\n```java\nimport com.example.demo.mongodb.entity.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/10/15 12:16\n */\n@Repository\npublic class DemoDao extends MongoDbDao<User>{\n\n    @Autowired\n    private MongoTemplate template;\n\n    public List<User> findList(){\n\n        return template.findAll(User.class);\n    }\n\n}\n```\n\n## 常用的数据库查询方法提炼\n\n```java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.data.mongodb.core.query.Update;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.util.List;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/10/15 14:20\n */\npublic abstract class MongoDbDao<T> {\n\n    protected Logger logger = LoggerFactory.getLogger(MongoDbDao.class);\n\n    /**\n     * 反射获取泛型类型\n     *\n     * @return\n     */\n    protected abstract Class<T> getEntityClass();\n\n    @Autowired\n    private MongoTemplate mongoTemplate;\n\n    /**\n     *\n     * 无条件查询全部\n     */\n    public List<T> findAll(){\n        return this.mongoTemplate.findAll(this.getEntityClass());\n    }\n\n    /***\n     * 根据id从几何中查询对象\n     * @param id\n     * @return\n     */\n    public T queryById(Integer id) {\n        Query query = new Query(Criteria.where(\"_id\").is(id));\n        logger.info(\"-------------->MongoDB find start\");\n        return this.mongoTemplate.findOne(query, this.getEntityClass());\n    }\n\n    /**\n     * 根据条件查询集合\n     *\n     * @param object\n     * @return\n     */\n    public List<T> queryList(T object) {\n        Query query = getQueryByObject(object);\n        logger.info(\"-------------->MongoDB find start\");\n        return mongoTemplate.find(query, this.getEntityClass());\n    }\n\n    /**\n     * 根据条件查询只返回一个文档\n     *\n     * @param object\n     * @return\n     */\n    public T queryOne(T object) {\n        Query query = getQueryByObject(object);\n        logger.info(\"-------------->MongoDB find start\");\n        return mongoTemplate.findOne(query, this.getEntityClass());\n    }\n\n    /***\n     * 根据条件分页查询\n     * @param object\n     * @param start 查询起始值\n     * @param size  查询大小\n     * @return\n     */\n    public List<T> getPage(T object, int start, int size) {\n        Query query = getQueryByObject(object);\n        query.skip(start);\n        query.limit(size);\n        logger.info(\"-------------->MongoDB queryPage start\");\n        return this.mongoTemplate.find(query, this.getEntityClass());\n    }\n\n    /***\n     * 根据条件查询库中符合条件的记录数量\n     * @param object\n     * @return\n     */\n    public Long getCount(T object) {\n        Query query = getQueryByObject(object);\n        logger.info(\"-------------->MongoDB Count start\");\n        return this.mongoTemplate.count(query, this.getEntityClass());\n    }\n\n    /***\n     * 删除对象\n     * @param t\n     * @return\n     */\n    public int delete(T t) {\n        logger.info(\"-------------->MongoDB delete start\");\n        return (int) this.mongoTemplate.remove(t).getDeletedCount();\n    }\n\n    /**\n     * 根据id删除\n     *\n     * @param id\n     */\n    public void deleteById(Integer id) {\n        Criteria criteria = Criteria.where(\"_id\").is(id);\n        if (null != criteria) {\n            Query query = new Query(criteria);\n            T obj = this.mongoTemplate.findOne(query, this.getEntityClass());\n            logger.info(\"-------------->MongoDB deleteById start\");\n            if (obj != null) {\n                this.delete(obj);\n            }\n        }\n    }\n\n    /*MongoDB中更新操作分为三种\n     * 1：updateFirst     修改第一条\n     * 2：updateMulti     修改所有匹配的记录\n     * 3：upsert  修改时如果不存在则进行添加操作\n     * */\n\n    /**\n     * 修改匹配到的第一条记录\n     * @param srcObj\n     * @param targetObj\n     */\n    public void updateFirst(T srcObj, T targetObj){\n        Query query = getQueryByObject(srcObj);\n        Update update = getUpdateByObject(targetObj);\n        logger.info(\"-------------->MongoDB updateFirst start\");\n        this.mongoTemplate.updateFirst(query,update,this.getEntityClass());\n    }\n\n    /***\n     * 修改匹配到的所有记录\n     * @param srcObj\n     * @param targetObj\n     */\n    public void updateMulti(T srcObj, T targetObj){\n        Query query = getQueryByObject(srcObj);\n        Update update = getUpdateByObject(targetObj);\n        logger.info(\"-------------->MongoDB updateFirst start\");\n        this.mongoTemplate.updateMulti(query,update,this.getEntityClass());\n    }\n\n    /***\n     * 修改匹配到的记录，若不存在该记录则进行添加\n     * @param srcObj\n     * @param targetObj\n     */\n    public void updateInsert(T srcObj, T targetObj){\n        Query query = getQueryByObject(srcObj);\n        Update update = getUpdateByObject(targetObj);\n        logger.info(\"-------------->MongoDB updateInsert start\");\n        this.mongoTemplate.upsert(query,update,this.getEntityClass());\n    }\n\n    /**\n     * 将查询条件对象转换为query\n     *\n     * @param object\n     * @return\n     * @author Jason\n     */\n    private Query getQueryByObject(T object) {\n        Query query = new Query();\n        String[] fileds = getFiledName(object);\n        Criteria criteria = new Criteria();\n        for (int i = 0; i < fileds.length; i++) {\n            String filedName = (String) fileds[i];\n            Object filedValue = getFieldValueByName(filedName, object);\n            if (filedValue != null) {\n                criteria.and(filedName).is(filedValue);\n            }\n        }\n        query.addCriteria(criteria);\n        return query;\n    }\n\n    /**\n     * 将查询条件对象转换为update\n     *\n     * @param object\n     * @return\n     * @author Jason\n     */\n    private Update getUpdateByObject(T object) {\n        Update update = new Update();\n        String[] fileds = getFiledName(object);\n        for (int i = 0; i < fileds.length; i++) {\n            String filedName = (String) fileds[i];\n            Object filedValue =getFieldValueByName(filedName, object);\n            if (filedValue != null) {\n                update.set(filedName, filedValue);\n            }\n        }\n        return update;\n    }\n\n    /***\n     * 获取对象属性返回字符串数组\n     * @param o\n     * @return\n     */\n    private static String[] getFiledName(Object o) {\n        Field[] fields = o.getClass().getDeclaredFields();\n        String[] fieldNames = new String[fields.length];\n\n        for (int i = 0; i < fields.length; ++i) {\n            fieldNames[i] = fields[i].getName();\n        }\n\n        return fieldNames;\n    }\n\n    /***\n     * 根据属性获取对象属性值\n     * @param fieldName\n     * @param o\n     * @return\n     */\n    private static Object getFieldValueByName(String fieldName, Object o) {\n        try {\n            String e = fieldName.substring(0, 1).toUpperCase();\n            String getter = \"get\" + e + fieldName.substring(1);\n            Method method = o.getClass().getMethod(getter, new Class[0]);\n            return method.invoke(o, new Object[0]);\n        } catch (Exception var6) {\n            return null;\n        }\n    }\n}\n```\n## MongoTemplate 应用\n\n查询操作，Query类型为筛选条件，在查询修改和删除中通用，Criteria是拼接条件，where().is()，也可以是其他的lt、lte、gt、gte、ne等等。\n\n排序或者限制输出行数这些与where无关的在Query里设置q.limit()、q.skip()、q.with(Sort.by(Sort.Order.desc(sname)));\n\n```java\nQuery q=new Query( Criteria.where(\"_id\").is(id));\nList<User> list = mongoTemplate.find(q, User.class);\n```\n\n\n\n**关于 insert 和 save 函数的区别**\n\n```text\n插入重复数据\n　　insert: 若新增数据的主键已经存在，则会抛 org.springframework.dao.DuplicateKeyException 异常\t\t\t    提示主键重复，不保存当前数据。 \n　　save: 若新增数据的主键已经存在，则会对当前已经存在的数据进行修改操作。\n\n批操作\n　　insert: 可以一次性插入一整个列表，而不用进行遍历操作，效率相对较高 \n　　save: 需要遍历列表，进行一个个的插入\n```","source":"_posts/MongoDB.md","raw":"---\ntitle: MongoDB\ndate: 2019-10-16 10:21:31\ntags:\n---\n\n## 基于docker安装MongoDB\n\n```text\nversion: \"3\"\nservices:\n \n  mongodb:\n    image: mongo:4.1\n    environment:\n        MONGO_INITDB_ROOT_USERNAME: \"root\"\n        MONGO_INITDB_ROOT_PASSWORD: \"abc123\"\n        TZ: \"Asia/Shanghai\"\n    volumes:\n      - ./mongo:/data/db:rw\n      - ./mongo/mongo_key:/mongo:rw\n    ports:\n       - \"27017:27017\"\n    networks:\n       - default\n    command:\n       --auth\n\n      \nnetworks:\n  default:\n\n\n```\n\n**注意**：新建数据库需要创建用户才能指定数据库连接\n\n```test\ndb.createUser(\n  {\n    user: \"name\",\n    pwd: \"password\",\n    roles: [ { role: \"readWrite\", db: \"db_name\" } ]\n  }\n)\n```\n\n**Built-In Roles（内置角色）：**\n\n```text\n1. 数据库用户角色：read、readWrite;\n2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；\n3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；\n4. 备份恢复角色：backup、restore；\n5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase\n6. 超级用户角色：root \n// 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）\n7. 内部角色：__system\n```\n\n**具体角色：**\n\n```text\nRead：允许用户读取指定数据库\nreadWrite：允许用户读写指定数据库\ndbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile\nuserAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户\nclusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。\nreadAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限\nreadWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限\nuserAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限\ndbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。\nroot：只在admin数据库中可用。超级账号，超级权限。\n```\n\n## Boot集成MongoDB\n\n**POM**\n\n```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-mongodb</artifactId>\n</dependency>\n```\n\n**application.properties**\n\n```text\nspring.data.mongodb.host=120.78.152.130\nspring.data.mongodb.port=27017\nspring.data.mongodb.database=db_demo\nspring.data.mongodb.username=root\nspring.data.mongodb.password=123456\n```\n\n**创建实体类对应数据库表**\n\n```java\nimport lombok.Data;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\nimport org.springframework.data.mongodb.core.mapping.Field;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/10/15 14:01\n */\n\n@Data\n@Document(collection = \"db_user\")\npublic class User {\n\n    @Id\n    private String id;\n\n    @Field(\"name\")\n    private String name;\n\n    @Field(\"age\")\n    private String age;\n\n    @Field(\"sex\")\n    private String sex;\n}\n```\n\n**DAO创建查询方法**\n\n```java\nimport com.example.demo.mongodb.entity.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/10/15 12:16\n */\n@Repository\npublic class DemoDao extends MongoDbDao<User>{\n\n    @Autowired\n    private MongoTemplate template;\n\n    public List<User> findList(){\n\n        return template.findAll(User.class);\n    }\n\n}\n```\n\n## 常用的数据库查询方法提炼\n\n```java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.data.mongodb.core.query.Update;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.util.List;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/10/15 14:20\n */\npublic abstract class MongoDbDao<T> {\n\n    protected Logger logger = LoggerFactory.getLogger(MongoDbDao.class);\n\n    /**\n     * 反射获取泛型类型\n     *\n     * @return\n     */\n    protected abstract Class<T> getEntityClass();\n\n    @Autowired\n    private MongoTemplate mongoTemplate;\n\n    /**\n     *\n     * 无条件查询全部\n     */\n    public List<T> findAll(){\n        return this.mongoTemplate.findAll(this.getEntityClass());\n    }\n\n    /***\n     * 根据id从几何中查询对象\n     * @param id\n     * @return\n     */\n    public T queryById(Integer id) {\n        Query query = new Query(Criteria.where(\"_id\").is(id));\n        logger.info(\"-------------->MongoDB find start\");\n        return this.mongoTemplate.findOne(query, this.getEntityClass());\n    }\n\n    /**\n     * 根据条件查询集合\n     *\n     * @param object\n     * @return\n     */\n    public List<T> queryList(T object) {\n        Query query = getQueryByObject(object);\n        logger.info(\"-------------->MongoDB find start\");\n        return mongoTemplate.find(query, this.getEntityClass());\n    }\n\n    /**\n     * 根据条件查询只返回一个文档\n     *\n     * @param object\n     * @return\n     */\n    public T queryOne(T object) {\n        Query query = getQueryByObject(object);\n        logger.info(\"-------------->MongoDB find start\");\n        return mongoTemplate.findOne(query, this.getEntityClass());\n    }\n\n    /***\n     * 根据条件分页查询\n     * @param object\n     * @param start 查询起始值\n     * @param size  查询大小\n     * @return\n     */\n    public List<T> getPage(T object, int start, int size) {\n        Query query = getQueryByObject(object);\n        query.skip(start);\n        query.limit(size);\n        logger.info(\"-------------->MongoDB queryPage start\");\n        return this.mongoTemplate.find(query, this.getEntityClass());\n    }\n\n    /***\n     * 根据条件查询库中符合条件的记录数量\n     * @param object\n     * @return\n     */\n    public Long getCount(T object) {\n        Query query = getQueryByObject(object);\n        logger.info(\"-------------->MongoDB Count start\");\n        return this.mongoTemplate.count(query, this.getEntityClass());\n    }\n\n    /***\n     * 删除对象\n     * @param t\n     * @return\n     */\n    public int delete(T t) {\n        logger.info(\"-------------->MongoDB delete start\");\n        return (int) this.mongoTemplate.remove(t).getDeletedCount();\n    }\n\n    /**\n     * 根据id删除\n     *\n     * @param id\n     */\n    public void deleteById(Integer id) {\n        Criteria criteria = Criteria.where(\"_id\").is(id);\n        if (null != criteria) {\n            Query query = new Query(criteria);\n            T obj = this.mongoTemplate.findOne(query, this.getEntityClass());\n            logger.info(\"-------------->MongoDB deleteById start\");\n            if (obj != null) {\n                this.delete(obj);\n            }\n        }\n    }\n\n    /*MongoDB中更新操作分为三种\n     * 1：updateFirst     修改第一条\n     * 2：updateMulti     修改所有匹配的记录\n     * 3：upsert  修改时如果不存在则进行添加操作\n     * */\n\n    /**\n     * 修改匹配到的第一条记录\n     * @param srcObj\n     * @param targetObj\n     */\n    public void updateFirst(T srcObj, T targetObj){\n        Query query = getQueryByObject(srcObj);\n        Update update = getUpdateByObject(targetObj);\n        logger.info(\"-------------->MongoDB updateFirst start\");\n        this.mongoTemplate.updateFirst(query,update,this.getEntityClass());\n    }\n\n    /***\n     * 修改匹配到的所有记录\n     * @param srcObj\n     * @param targetObj\n     */\n    public void updateMulti(T srcObj, T targetObj){\n        Query query = getQueryByObject(srcObj);\n        Update update = getUpdateByObject(targetObj);\n        logger.info(\"-------------->MongoDB updateFirst start\");\n        this.mongoTemplate.updateMulti(query,update,this.getEntityClass());\n    }\n\n    /***\n     * 修改匹配到的记录，若不存在该记录则进行添加\n     * @param srcObj\n     * @param targetObj\n     */\n    public void updateInsert(T srcObj, T targetObj){\n        Query query = getQueryByObject(srcObj);\n        Update update = getUpdateByObject(targetObj);\n        logger.info(\"-------------->MongoDB updateInsert start\");\n        this.mongoTemplate.upsert(query,update,this.getEntityClass());\n    }\n\n    /**\n     * 将查询条件对象转换为query\n     *\n     * @param object\n     * @return\n     * @author Jason\n     */\n    private Query getQueryByObject(T object) {\n        Query query = new Query();\n        String[] fileds = getFiledName(object);\n        Criteria criteria = new Criteria();\n        for (int i = 0; i < fileds.length; i++) {\n            String filedName = (String) fileds[i];\n            Object filedValue = getFieldValueByName(filedName, object);\n            if (filedValue != null) {\n                criteria.and(filedName).is(filedValue);\n            }\n        }\n        query.addCriteria(criteria);\n        return query;\n    }\n\n    /**\n     * 将查询条件对象转换为update\n     *\n     * @param object\n     * @return\n     * @author Jason\n     */\n    private Update getUpdateByObject(T object) {\n        Update update = new Update();\n        String[] fileds = getFiledName(object);\n        for (int i = 0; i < fileds.length; i++) {\n            String filedName = (String) fileds[i];\n            Object filedValue =getFieldValueByName(filedName, object);\n            if (filedValue != null) {\n                update.set(filedName, filedValue);\n            }\n        }\n        return update;\n    }\n\n    /***\n     * 获取对象属性返回字符串数组\n     * @param o\n     * @return\n     */\n    private static String[] getFiledName(Object o) {\n        Field[] fields = o.getClass().getDeclaredFields();\n        String[] fieldNames = new String[fields.length];\n\n        for (int i = 0; i < fields.length; ++i) {\n            fieldNames[i] = fields[i].getName();\n        }\n\n        return fieldNames;\n    }\n\n    /***\n     * 根据属性获取对象属性值\n     * @param fieldName\n     * @param o\n     * @return\n     */\n    private static Object getFieldValueByName(String fieldName, Object o) {\n        try {\n            String e = fieldName.substring(0, 1).toUpperCase();\n            String getter = \"get\" + e + fieldName.substring(1);\n            Method method = o.getClass().getMethod(getter, new Class[0]);\n            return method.invoke(o, new Object[0]);\n        } catch (Exception var6) {\n            return null;\n        }\n    }\n}\n```\n## MongoTemplate 应用\n\n查询操作，Query类型为筛选条件，在查询修改和删除中通用，Criteria是拼接条件，where().is()，也可以是其他的lt、lte、gt、gte、ne等等。\n\n排序或者限制输出行数这些与where无关的在Query里设置q.limit()、q.skip()、q.with(Sort.by(Sort.Order.desc(sname)));\n\n```java\nQuery q=new Query( Criteria.where(\"_id\").is(id));\nList<User> list = mongoTemplate.find(q, User.class);\n```\n\n\n\n**关于 insert 和 save 函数的区别**\n\n```text\n插入重复数据\n　　insert: 若新增数据的主键已经存在，则会抛 org.springframework.dao.DuplicateKeyException 异常\t\t\t    提示主键重复，不保存当前数据。 \n　　save: 若新增数据的主键已经存在，则会对当前已经存在的数据进行修改操作。\n\n批操作\n　　insert: 可以一次性插入一整个列表，而不用进行遍历操作，效率相对较高 \n　　save: 需要遍历列表，进行一个个的插入\n```","slug":"MongoDB","published":1,"updated":"2021-04-22T03:43:26.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysf000oko9blcb76ko5","content":"<h2 id=\"基于docker安装MongoDB\"><a href=\"#基于docker安装MongoDB\" class=\"headerlink\" title=\"基于docker安装MongoDB\"></a>基于docker安装MongoDB</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\"> </span><br><span class=\"line\">  mongodb:</span><br><span class=\"line\">    image: mongo:4.1</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">        MONGO_INITDB_ROOT_USERNAME: &quot;root&quot;</span><br><span class=\"line\">        MONGO_INITDB_ROOT_PASSWORD: &quot;abc123&quot;</span><br><span class=\"line\">        TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./mongo:/data/db:rw</span><br><span class=\"line\">      - ./mongo/mongo_key:/mongo:rw</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">       - &quot;27017:27017&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">       - default</span><br><span class=\"line\">    command:</span><br><span class=\"line\">       --auth</span><br><span class=\"line\"></span><br><span class=\"line\">      </span><br><span class=\"line\">networks:</span><br><span class=\"line\">  default:</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：新建数据库需要创建用户才能指定数据库连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createUser(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    user: &quot;name&quot;,</span><br><span class=\"line\">    pwd: &quot;password&quot;,</span><br><span class=\"line\">    roles: [ &#123; role: &quot;readWrite&quot;, db: &quot;db_name&quot; &#125; ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><strong>Built-In Roles（内置角色）：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 数据库用户角色：read、readWrite;</span><br><span class=\"line\">2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；</span><br><span class=\"line\">3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；</span><br><span class=\"line\">4. 备份恢复角色：backup、restore；</span><br><span class=\"line\">5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</span><br><span class=\"line\">6. 超级用户角色：root </span><br><span class=\"line\">// 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）</span><br><span class=\"line\">7. 内部角色：__system</span><br></pre></td></tr></table></figure>\n\n<p><strong>具体角色：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Read：允许用户读取指定数据库</span><br><span class=\"line\">readWrite：允许用户读写指定数据库</span><br><span class=\"line\">dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</span><br><span class=\"line\">userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</span><br><span class=\"line\">clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</span><br><span class=\"line\">readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限</span><br><span class=\"line\">readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限</span><br><span class=\"line\">userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</span><br><span class=\"line\">dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。</span><br><span class=\"line\">root：只在admin数据库中可用。超级账号，超级权限。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Boot集成MongoDB\"><a href=\"#Boot集成MongoDB\" class=\"headerlink\" title=\"Boot集成MongoDB\"></a>Boot集成MongoDB</h2><p><strong>POM</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>application.properties</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.data.mongodb.host=120.78.152.130</span><br><span class=\"line\">spring.data.mongodb.port=27017</span><br><span class=\"line\">spring.data.mongodb.database=db_demo</span><br><span class=\"line\">spring.data.mongodb.username=root</span><br><span class=\"line\">spring.data.mongodb.password=123456</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建实体类对应数据库表</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.annotation.Id;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.mapping.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.mapping.Field;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/10/15 14:01</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Document</span>(collection = <span class=\"string\">\"db_user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Field</span>(<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Field</span>(<span class=\"string\">\"age\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Field</span>(<span class=\"string\">\"sex\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>DAO创建查询方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.mongodb.entity.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Repository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/10/15 12:16</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoDao</span> <span class=\"keyword\">extends</span> <span class=\"title\">MongoDbDao</span>&lt;<span class=\"title\">User</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MongoTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">findList</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> template.findAll(User.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用的数据库查询方法提炼\"><a href=\"#常用的数据库查询方法提炼\" class=\"headerlink\" title=\"常用的数据库查询方法提炼\"></a>常用的数据库查询方法提炼</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Query;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Update;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/10/15 14:20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MongoDbDao</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Logger logger = LoggerFactory.getLogger(MongoDbDao.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 反射获取泛型类型</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Class&lt;T&gt; <span class=\"title\">getEntityClass</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MongoTemplate mongoTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 无条件查询全部</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.mongoTemplate.findAll(<span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据id从几何中查询对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">queryById</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        Query query = <span class=\"keyword\">new</span> Query(Criteria.where(<span class=\"string\">\"_id\"</span>).is(id));</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"--------------&gt;MongoDB find start\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.mongoTemplate.findOne(query, <span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据条件查询集合</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">queryList</span><span class=\"params\">(T object)</span> </span>&#123;</span><br><span class=\"line\">        Query query = getQueryByObject(object);</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"--------------&gt;MongoDB find start\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mongoTemplate.find(query, <span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据条件查询只返回一个文档</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">queryOne</span><span class=\"params\">(T object)</span> </span>&#123;</span><br><span class=\"line\">        Query query = getQueryByObject(object);</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"--------------&gt;MongoDB find start\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mongoTemplate.findOne(query, <span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据条件分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start 查询起始值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> size  查询大小</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">getPage</span><span class=\"params\">(T object, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">        Query query = getQueryByObject(object);</span><br><span class=\"line\">        query.skip(start);</span><br><span class=\"line\">        query.limit(size);</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"--------------&gt;MongoDB queryPage start\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.mongoTemplate.find(query, <span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据条件查询库中符合条件的记录数量</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getCount</span><span class=\"params\">(T object)</span> </span>&#123;</span><br><span class=\"line\">        Query query = getQueryByObject(object);</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"--------------&gt;MongoDB Count start\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.mongoTemplate.count(query, <span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">delete</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"--------------&gt;MongoDB delete start\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) <span class=\"keyword\">this</span>.mongoTemplate.remove(t).getDeletedCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据id删除</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteById</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        Criteria criteria = Criteria.where(<span class=\"string\">\"_id\"</span>).is(id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != criteria) &#123;</span><br><span class=\"line\">            Query query = <span class=\"keyword\">new</span> Query(criteria);</span><br><span class=\"line\">            T obj = <span class=\"keyword\">this</span>.mongoTemplate.findOne(query, <span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">            logger.info(<span class=\"string\">\"--------------&gt;MongoDB deleteById start\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.delete(obj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*MongoDB中更新操作分为三种</span></span><br><span class=\"line\"><span class=\"comment\">     * 1：updateFirst     修改第一条</span></span><br><span class=\"line\"><span class=\"comment\">     * 2：updateMulti     修改所有匹配的记录</span></span><br><span class=\"line\"><span class=\"comment\">     * 3：upsert  修改时如果不存在则进行添加操作</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改匹配到的第一条记录</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> srcObj</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targetObj</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateFirst</span><span class=\"params\">(T srcObj, T targetObj)</span></span>&#123;</span><br><span class=\"line\">        Query query = getQueryByObject(srcObj);</span><br><span class=\"line\">        Update update = getUpdateByObject(targetObj);</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"--------------&gt;MongoDB updateFirst start\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mongoTemplate.updateFirst(query,update,<span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改匹配到的所有记录</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> srcObj</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targetObj</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateMulti</span><span class=\"params\">(T srcObj, T targetObj)</span></span>&#123;</span><br><span class=\"line\">        Query query = getQueryByObject(srcObj);</span><br><span class=\"line\">        Update update = getUpdateByObject(targetObj);</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"--------------&gt;MongoDB updateFirst start\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mongoTemplate.updateMulti(query,update,<span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改匹配到的记录，若不存在该记录则进行添加</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> srcObj</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targetObj</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateInsert</span><span class=\"params\">(T srcObj, T targetObj)</span></span>&#123;</span><br><span class=\"line\">        Query query = getQueryByObject(srcObj);</span><br><span class=\"line\">        Update update = getUpdateByObject(targetObj);</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"--------------&gt;MongoDB updateInsert start\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mongoTemplate.upsert(query,update,<span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将查询条件对象转换为query</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> Jason</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Query <span class=\"title\">getQueryByObject</span><span class=\"params\">(T object)</span> </span>&#123;</span><br><span class=\"line\">        Query query = <span class=\"keyword\">new</span> Query();</span><br><span class=\"line\">        String[] fileds = getFiledName(object);</span><br><span class=\"line\">        Criteria criteria = <span class=\"keyword\">new</span> Criteria();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; fileds.length; i++) &#123;</span><br><span class=\"line\">            String filedName = (String) fileds[i];</span><br><span class=\"line\">            Object filedValue = getFieldValueByName(filedName, object);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (filedValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                criteria.and(filedName).is(filedValue);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        query.addCriteria(criteria);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将查询条件对象转换为update</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> Jason</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Update <span class=\"title\">getUpdateByObject</span><span class=\"params\">(T object)</span> </span>&#123;</span><br><span class=\"line\">        Update update = <span class=\"keyword\">new</span> Update();</span><br><span class=\"line\">        String[] fileds = getFiledName(object);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; fileds.length; i++) &#123;</span><br><span class=\"line\">            String filedName = (String) fileds[i];</span><br><span class=\"line\">            Object filedValue =getFieldValueByName(filedName, object);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (filedValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                update.set(filedName, filedValue);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> update;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取对象属性返回字符串数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String[] getFiledName(Object o) &#123;</span><br><span class=\"line\">        Field[] fields = o.getClass().getDeclaredFields();</span><br><span class=\"line\">        String[] fieldNames = <span class=\"keyword\">new</span> String[fields.length];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; fields.length; ++i) &#123;</span><br><span class=\"line\">            fieldNames[i] = fields[i].getName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fieldNames;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据属性获取对象属性值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fieldName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object <span class=\"title\">getFieldValueByName</span><span class=\"params\">(String fieldName, Object o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String e = fieldName.substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>).toUpperCase();</span><br><span class=\"line\">            String getter = <span class=\"string\">\"get\"</span> + e + fieldName.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">            Method method = o.getClass().getMethod(getter, <span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> method.invoke(o, <span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception var6) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MongoTemplate-应用\"><a href=\"#MongoTemplate-应用\" class=\"headerlink\" title=\"MongoTemplate 应用\"></a>MongoTemplate 应用</h2><p>查询操作，Query类型为筛选条件，在查询修改和删除中通用，Criteria是拼接条件，where().is()，也可以是其他的lt、lte、gt、gte、ne等等。</p>\n<p>排序或者限制输出行数这些与where无关的在Query里设置q.limit()、q.skip()、q.with(Sort.by(Sort.Order.desc(sname)));</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Query q=<span class=\"keyword\">new</span> Query( Criteria.where(<span class=\"string\">\"_id\"</span>).is(id));</span><br><span class=\"line\">List&lt;User&gt; list = mongoTemplate.find(q, User.class);</span><br></pre></td></tr></table></figure>\n\n<p><strong>关于 insert 和 save 函数的区别</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">插入重复数据</span><br><span class=\"line\">　　insert: 若新增数据的主键已经存在，则会抛 org.springframework.dao.DuplicateKeyException 异常\t\t\t    提示主键重复，不保存当前数据。 </span><br><span class=\"line\">　　save: 若新增数据的主键已经存在，则会对当前已经存在的数据进行修改操作。</span><br><span class=\"line\"></span><br><span class=\"line\">批操作</span><br><span class=\"line\">　　insert: 可以一次性插入一整个列表，而不用进行遍历操作，效率相对较高 </span><br><span class=\"line\">　　save: 需要遍历列表，进行一个个的插入</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基于docker安装MongoDB\"><a href=\"#基于docker安装MongoDB\" class=\"headerlink\" title=\"基于docker安装MongoDB\"></a>基于docker安装MongoDB</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\"> </span><br><span class=\"line\">  mongodb:</span><br><span class=\"line\">    image: mongo:4.1</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">        MONGO_INITDB_ROOT_USERNAME: &quot;root&quot;</span><br><span class=\"line\">        MONGO_INITDB_ROOT_PASSWORD: &quot;abc123&quot;</span><br><span class=\"line\">        TZ: &quot;Asia/Shanghai&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./mongo:/data/db:rw</span><br><span class=\"line\">      - ./mongo/mongo_key:/mongo:rw</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">       - &quot;27017:27017&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">       - default</span><br><span class=\"line\">    command:</span><br><span class=\"line\">       --auth</span><br><span class=\"line\"></span><br><span class=\"line\">      </span><br><span class=\"line\">networks:</span><br><span class=\"line\">  default:</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：新建数据库需要创建用户才能指定数据库连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createUser(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    user: &quot;name&quot;,</span><br><span class=\"line\">    pwd: &quot;password&quot;,</span><br><span class=\"line\">    roles: [ &#123; role: &quot;readWrite&quot;, db: &quot;db_name&quot; &#125; ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><strong>Built-In Roles（内置角色）：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 数据库用户角色：read、readWrite;</span><br><span class=\"line\">2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；</span><br><span class=\"line\">3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；</span><br><span class=\"line\">4. 备份恢复角色：backup、restore；</span><br><span class=\"line\">5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</span><br><span class=\"line\">6. 超级用户角色：root </span><br><span class=\"line\">// 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）</span><br><span class=\"line\">7. 内部角色：__system</span><br></pre></td></tr></table></figure>\n\n<p><strong>具体角色：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Read：允许用户读取指定数据库</span><br><span class=\"line\">readWrite：允许用户读写指定数据库</span><br><span class=\"line\">dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</span><br><span class=\"line\">userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</span><br><span class=\"line\">clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</span><br><span class=\"line\">readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限</span><br><span class=\"line\">readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限</span><br><span class=\"line\">userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</span><br><span class=\"line\">dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。</span><br><span class=\"line\">root：只在admin数据库中可用。超级账号，超级权限。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Boot集成MongoDB\"><a href=\"#Boot集成MongoDB\" class=\"headerlink\" title=\"Boot集成MongoDB\"></a>Boot集成MongoDB</h2><p><strong>POM</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>application.properties</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.data.mongodb.host=120.78.152.130</span><br><span class=\"line\">spring.data.mongodb.port=27017</span><br><span class=\"line\">spring.data.mongodb.database=db_demo</span><br><span class=\"line\">spring.data.mongodb.username=root</span><br><span class=\"line\">spring.data.mongodb.password=123456</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建实体类对应数据库表</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.annotation.Id;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.mapping.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.mapping.Field;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/10/15 14:01</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Document</span>(collection = <span class=\"string\">\"db_user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Field</span>(<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Field</span>(<span class=\"string\">\"age\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Field</span>(<span class=\"string\">\"sex\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>DAO创建查询方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.mongodb.entity.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Repository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/10/15 12:16</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoDao</span> <span class=\"keyword\">extends</span> <span class=\"title\">MongoDbDao</span>&lt;<span class=\"title\">User</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MongoTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">findList</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> template.findAll(User.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用的数据库查询方法提炼\"><a href=\"#常用的数据库查询方法提炼\" class=\"headerlink\" title=\"常用的数据库查询方法提炼\"></a>常用的数据库查询方法提炼</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Query;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Update;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/10/15 14:20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MongoDbDao</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Logger logger = LoggerFactory.getLogger(MongoDbDao.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 反射获取泛型类型</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Class&lt;T&gt; <span class=\"title\">getEntityClass</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MongoTemplate mongoTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 无条件查询全部</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.mongoTemplate.findAll(<span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据id从几何中查询对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">queryById</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        Query query = <span class=\"keyword\">new</span> Query(Criteria.where(<span class=\"string\">\"_id\"</span>).is(id));</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"--------------&gt;MongoDB find start\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.mongoTemplate.findOne(query, <span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据条件查询集合</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">queryList</span><span class=\"params\">(T object)</span> </span>&#123;</span><br><span class=\"line\">        Query query = getQueryByObject(object);</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"--------------&gt;MongoDB find start\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mongoTemplate.find(query, <span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据条件查询只返回一个文档</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">queryOne</span><span class=\"params\">(T object)</span> </span>&#123;</span><br><span class=\"line\">        Query query = getQueryByObject(object);</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"--------------&gt;MongoDB find start\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mongoTemplate.findOne(query, <span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据条件分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start 查询起始值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> size  查询大小</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">getPage</span><span class=\"params\">(T object, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">        Query query = getQueryByObject(object);</span><br><span class=\"line\">        query.skip(start);</span><br><span class=\"line\">        query.limit(size);</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"--------------&gt;MongoDB queryPage start\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.mongoTemplate.find(query, <span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据条件查询库中符合条件的记录数量</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getCount</span><span class=\"params\">(T object)</span> </span>&#123;</span><br><span class=\"line\">        Query query = getQueryByObject(object);</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"--------------&gt;MongoDB Count start\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.mongoTemplate.count(query, <span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">delete</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"--------------&gt;MongoDB delete start\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) <span class=\"keyword\">this</span>.mongoTemplate.remove(t).getDeletedCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据id删除</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteById</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        Criteria criteria = Criteria.where(<span class=\"string\">\"_id\"</span>).is(id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != criteria) &#123;</span><br><span class=\"line\">            Query query = <span class=\"keyword\">new</span> Query(criteria);</span><br><span class=\"line\">            T obj = <span class=\"keyword\">this</span>.mongoTemplate.findOne(query, <span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">            logger.info(<span class=\"string\">\"--------------&gt;MongoDB deleteById start\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.delete(obj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*MongoDB中更新操作分为三种</span></span><br><span class=\"line\"><span class=\"comment\">     * 1：updateFirst     修改第一条</span></span><br><span class=\"line\"><span class=\"comment\">     * 2：updateMulti     修改所有匹配的记录</span></span><br><span class=\"line\"><span class=\"comment\">     * 3：upsert  修改时如果不存在则进行添加操作</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改匹配到的第一条记录</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> srcObj</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targetObj</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateFirst</span><span class=\"params\">(T srcObj, T targetObj)</span></span>&#123;</span><br><span class=\"line\">        Query query = getQueryByObject(srcObj);</span><br><span class=\"line\">        Update update = getUpdateByObject(targetObj);</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"--------------&gt;MongoDB updateFirst start\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mongoTemplate.updateFirst(query,update,<span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改匹配到的所有记录</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> srcObj</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targetObj</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateMulti</span><span class=\"params\">(T srcObj, T targetObj)</span></span>&#123;</span><br><span class=\"line\">        Query query = getQueryByObject(srcObj);</span><br><span class=\"line\">        Update update = getUpdateByObject(targetObj);</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"--------------&gt;MongoDB updateFirst start\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mongoTemplate.updateMulti(query,update,<span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改匹配到的记录，若不存在该记录则进行添加</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> srcObj</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targetObj</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateInsert</span><span class=\"params\">(T srcObj, T targetObj)</span></span>&#123;</span><br><span class=\"line\">        Query query = getQueryByObject(srcObj);</span><br><span class=\"line\">        Update update = getUpdateByObject(targetObj);</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"--------------&gt;MongoDB updateInsert start\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mongoTemplate.upsert(query,update,<span class=\"keyword\">this</span>.getEntityClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将查询条件对象转换为query</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> Jason</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Query <span class=\"title\">getQueryByObject</span><span class=\"params\">(T object)</span> </span>&#123;</span><br><span class=\"line\">        Query query = <span class=\"keyword\">new</span> Query();</span><br><span class=\"line\">        String[] fileds = getFiledName(object);</span><br><span class=\"line\">        Criteria criteria = <span class=\"keyword\">new</span> Criteria();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; fileds.length; i++) &#123;</span><br><span class=\"line\">            String filedName = (String) fileds[i];</span><br><span class=\"line\">            Object filedValue = getFieldValueByName(filedName, object);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (filedValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                criteria.and(filedName).is(filedValue);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        query.addCriteria(criteria);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将查询条件对象转换为update</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> Jason</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Update <span class=\"title\">getUpdateByObject</span><span class=\"params\">(T object)</span> </span>&#123;</span><br><span class=\"line\">        Update update = <span class=\"keyword\">new</span> Update();</span><br><span class=\"line\">        String[] fileds = getFiledName(object);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; fileds.length; i++) &#123;</span><br><span class=\"line\">            String filedName = (String) fileds[i];</span><br><span class=\"line\">            Object filedValue =getFieldValueByName(filedName, object);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (filedValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                update.set(filedName, filedValue);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> update;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取对象属性返回字符串数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String[] getFiledName(Object o) &#123;</span><br><span class=\"line\">        Field[] fields = o.getClass().getDeclaredFields();</span><br><span class=\"line\">        String[] fieldNames = <span class=\"keyword\">new</span> String[fields.length];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; fields.length; ++i) &#123;</span><br><span class=\"line\">            fieldNames[i] = fields[i].getName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fieldNames;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据属性获取对象属性值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fieldName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object <span class=\"title\">getFieldValueByName</span><span class=\"params\">(String fieldName, Object o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String e = fieldName.substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>).toUpperCase();</span><br><span class=\"line\">            String getter = <span class=\"string\">\"get\"</span> + e + fieldName.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">            Method method = o.getClass().getMethod(getter, <span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> method.invoke(o, <span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception var6) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MongoTemplate-应用\"><a href=\"#MongoTemplate-应用\" class=\"headerlink\" title=\"MongoTemplate 应用\"></a>MongoTemplate 应用</h2><p>查询操作，Query类型为筛选条件，在查询修改和删除中通用，Criteria是拼接条件，where().is()，也可以是其他的lt、lte、gt、gte、ne等等。</p>\n<p>排序或者限制输出行数这些与where无关的在Query里设置q.limit()、q.skip()、q.with(Sort.by(Sort.Order.desc(sname)));</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Query q=<span class=\"keyword\">new</span> Query( Criteria.where(<span class=\"string\">\"_id\"</span>).is(id));</span><br><span class=\"line\">List&lt;User&gt; list = mongoTemplate.find(q, User.class);</span><br></pre></td></tr></table></figure>\n\n<p><strong>关于 insert 和 save 函数的区别</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">插入重复数据</span><br><span class=\"line\">　　insert: 若新增数据的主键已经存在，则会抛 org.springframework.dao.DuplicateKeyException 异常\t\t\t    提示主键重复，不保存当前数据。 </span><br><span class=\"line\">　　save: 若新增数据的主键已经存在，则会对当前已经存在的数据进行修改操作。</span><br><span class=\"line\"></span><br><span class=\"line\">批操作</span><br><span class=\"line\">　　insert: 可以一次性插入一整个列表，而不用进行遍历操作，效率相对较高 </span><br><span class=\"line\">　　save: 需要遍历列表，进行一个个的插入</span><br></pre></td></tr></table></figure>"},{"title":"Mybatis","date":"2019-07-17T07:39:57.000Z","_content":"\n# Mybatis\n\n## jdbc 问题总结如下： \n- 数据库连接创建、释放频繁造成系统资源浪费,从而影响系统性能。如果使用数据库连接池可解决此问题。 \n- sql语句在代码中硬编码,造成代码不易维护,实际应用中sql变化的可能较大,sql变动需要改变java代码。 \n- 使用 preparedStatement向占有位符号传参数存在硬编码,因为sql语句的where条件不一定,可能多也可能少,修改sql还要修改代码,系统不易维护。\n- 对结果集解析存在硬编码(查询列名),sql变化导致解析代码变化,系统不易维护,如果能将数据库记录封装成pojo对象解析比较方便。\n\n## Mybatis解决 jdbc编程的间题\n- 数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能,如果使用数据库连接池可解决此问题\n解决:在 sqllMapConfig.xm中配置数据连接池,使用连接池管理数据库链接。\n- sqll语句写在代码中造成代码不易维护,实际应用sql变化的可能较大,sql变动需要改变java代码。\n解决:将sqll语句配置在 XXXXmapperxm文件中与java代码分离。\n- 向sql语句传参数麻烦,因为sql语句的 where条件不一定,可能多也可能少,占位符需要和参数一一对应\n解决: Mybatis自动将java对象映射至sql语句,通过 statement中的parameterType定义输入参数的类型。\n- sql变化导致解析代码变化,且解析前需要遍历,如果能将数据库记录封装成pojo对象解析比较方便。\n解决: Mybatis自动将sqll执行结果映射至java对象,通过 statement中的resultType定义输出结果的类型。\n\n\n\n## Mybatis 架构　　　　\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/%E6%9E%B6%E6%9E%84%E5%9B%BE-1.png)\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/%E6%9E%B6%E6%9E%84%E5%9B%BE.png) \n\n\n\n## Mybatis和Hibernate本质区别和应用场景\n- Mybatis和 hibernate不同,它不完全是一个ORM框架,因为 MyBatis需要程序员自己编写Sq语句。 mybatis可以通过XML或注解方式灵活配置要运行的sq语句,并将java对象和sql语句映射生成最终执行的sq,最后将sq执行的结果再映射生成java对象。\n- Mybatis学习门槛低,简单易学,程序员直接编写原生态sql,可严格控制sql执行性能,灵活度高,非常适合对关系数据模型要求不高的软件开发例如：互联网软件、企业运营类软件等,因为这类软件需求变化频繁,一但需求变化要求成果输出迅速。但是灵活的前提是 mybatis无法做到数据库无关性,如果需要实现支持多种数据库的软件则需要自定义多套sq映射文件,工作量大。\n\n\n- Hibernate对象/关系映射能力强,数据库无关性好,对于关系模型要求高的软件(例如需求固定的定制化软件)如果用 hibernate开发可以节省很多代码,提高效率。但是 Hibernate的学习门槛高,要精通门槛更高,而且怎么设计O/R映射,在性能和对象模型之间如何权衡,以及怎样用好 Hibernate需要具有很强的经验和能力才行\n\n总之,按照用户的需求在有限的资源环境下只要能做出维护性、扩展性良好\n的软件架构都是好架构,所以框架只有适合才是最好。\n\n# mybatis中主要类和接口\n- Configuration：将mybatis配置文件中的信息保存到该类中\n- SqlSessionFactory：解析Configuration类中的配置信息，获取SqlSession\n- SqlSession：负责和数据库交互，完成增删改查\n- Executor：mybatis的调度核心，负责SQL的生成\n- StatementHandler：封装了JDBC的statement操作\n- ParameterHandler：负责完成JavaType到jdbcType的转换\n- ResultSetHandler：负责完成结果集到Java Bean的转换\n- MappedStatement：代表一个select|update|insert|delete元素\n- SqlSource：根据传入的ParamterObject生成SQL\n- BoundSql：包含SQL和参数信息\n\n\n# Spring 整合 MyBatis\n**POM**\n```java\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis</artifactId>\n    <version>3.2.8</version>\n</dependency>\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis-spring</artifactId>\n    <version>1.3.1</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-jdbc</artifactId>\n    <version>4.3.17.RELEASE</version>\n</dependency>\n```\n主要增加了 3 个依赖\n- org.mybatis:mybatis\n- org.mybatis:mybatis-spring\n- org.springframework:spring-jdbc\n\n**创建 MyBatis 配置文件**\n创建一个名为 `mybatis-config.xml` 的配置文件，内容如下：\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <!-- 全局参数 -->\n    <settings>\n        <!-- 打印 SQL 语句 -->\n        <setting name=\"logImpl\" value=\"STDOUT_LOGGING\" />\n\n        <!-- 使全局的映射器启用或禁用缓存。 -->\n        <setting name=\"cacheEnabled\" value=\"false\"/>\n\n        <!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 -->\n        <setting name=\"lazyLoadingEnabled\" value=\"true\"/>\n\n        <!-- 当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载。 -->\n        <setting name=\"aggressiveLazyLoading\" value=\"true\"/>\n\n        <!-- 是否允许单条 SQL 返回多个数据集 (取决于驱动的兼容性) default:true -->\n        <setting name=\"multipleResultSetsEnabled\" value=\"true\"/>\n\n        <!-- 是否可以使用列的别名 (取决于驱动的兼容性) default:true -->\n        <setting name=\"useColumnLabel\" value=\"true\"/>\n\n        <!-- 允许 JDBC 生成主键。需要驱动器支持。如果设为了 true，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。 default:false  -->\n        <setting name=\"useGeneratedKeys\" value=\"false\"/>\n\n        <!-- 指定 MyBatis 如何自动映射 数据基表的列 NONE：不映射 PARTIAL：部分 FULL:全部  -->\n        <setting name=\"autoMappingBehavior\" value=\"PARTIAL\"/>\n\n        <!-- 这是默认的执行类型 （SIMPLE: 简单； REUSE: 执行器可能重复使用prepared statements语句；BATCH: 执行器可以重复执行语句和批量更新） -->\n        <setting name=\"defaultExecutorType\" value=\"SIMPLE\"/>\n\n        <!-- 使用驼峰命名法转换字段。 -->\n        <setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/>\n\n        <!-- 设置本地缓存范围 session:就会有数据的共享 statement:语句范围 (这样就不会有数据的共享 ) defalut:session -->\n        <setting name=\"localCacheScope\" value=\"SESSION\"/>\n\n        <!-- 设置 JDBC 类型为空时,某些驱动程序 要指定值, default:OTHER，插入空值时不需要指定类型 -->\n        <setting name=\"jdbcTypeForNull\" value=\"NULL\"/>\n    </settings>\n</configuration>\n```\n\n**Spring 集成 MyBatis**\n创建一个名为 `spring-context-mybatis.xml` 的 Spring 配置文件，内容如下：\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd\">\n\n    <!-- 配置 SqlSession -->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n        <!-- 用于配置对应实体类所在的包，多个 package 之间可以用 ',' 号分割 -->\n        <property name=\"typeAliasesPackage\" value=\"com.funtl.my.shop.domain\"/>\n        <!-- 用于配置对象关系映射配置文件所在目录 -->\n        <property name=\"mapperLocations\" value=\"classpath:/mapper/**/*.xml\"/>\n        <property name=\"configLocation\" value=\"classpath:/mybatis-config.xml\"></property>\n    </bean>\n\n    <!-- 扫描 Mapper -->\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <property name=\"basePackage\" value=\"com.funtl.my.shop.web.admin.dao\" />\n    </bean>\n</beans>\n```\n\n\n","source":"_posts/Mybatis.md","raw":"---\ntitle: Mybatis\ndate: 2019-07-17 15:39:57\ntags:\n    数据库\n---\n\n# Mybatis\n\n## jdbc 问题总结如下： \n- 数据库连接创建、释放频繁造成系统资源浪费,从而影响系统性能。如果使用数据库连接池可解决此问题。 \n- sql语句在代码中硬编码,造成代码不易维护,实际应用中sql变化的可能较大,sql变动需要改变java代码。 \n- 使用 preparedStatement向占有位符号传参数存在硬编码,因为sql语句的where条件不一定,可能多也可能少,修改sql还要修改代码,系统不易维护。\n- 对结果集解析存在硬编码(查询列名),sql变化导致解析代码变化,系统不易维护,如果能将数据库记录封装成pojo对象解析比较方便。\n\n## Mybatis解决 jdbc编程的间题\n- 数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能,如果使用数据库连接池可解决此问题\n解决:在 sqllMapConfig.xm中配置数据连接池,使用连接池管理数据库链接。\n- sqll语句写在代码中造成代码不易维护,实际应用sql变化的可能较大,sql变动需要改变java代码。\n解决:将sqll语句配置在 XXXXmapperxm文件中与java代码分离。\n- 向sql语句传参数麻烦,因为sql语句的 where条件不一定,可能多也可能少,占位符需要和参数一一对应\n解决: Mybatis自动将java对象映射至sql语句,通过 statement中的parameterType定义输入参数的类型。\n- sql变化导致解析代码变化,且解析前需要遍历,如果能将数据库记录封装成pojo对象解析比较方便。\n解决: Mybatis自动将sqll执行结果映射至java对象,通过 statement中的resultType定义输出结果的类型。\n\n\n\n## Mybatis 架构　　　　\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/%E6%9E%B6%E6%9E%84%E5%9B%BE-1.png)\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/%E6%9E%B6%E6%9E%84%E5%9B%BE.png) \n\n\n\n## Mybatis和Hibernate本质区别和应用场景\n- Mybatis和 hibernate不同,它不完全是一个ORM框架,因为 MyBatis需要程序员自己编写Sq语句。 mybatis可以通过XML或注解方式灵活配置要运行的sq语句,并将java对象和sql语句映射生成最终执行的sq,最后将sq执行的结果再映射生成java对象。\n- Mybatis学习门槛低,简单易学,程序员直接编写原生态sql,可严格控制sql执行性能,灵活度高,非常适合对关系数据模型要求不高的软件开发例如：互联网软件、企业运营类软件等,因为这类软件需求变化频繁,一但需求变化要求成果输出迅速。但是灵活的前提是 mybatis无法做到数据库无关性,如果需要实现支持多种数据库的软件则需要自定义多套sq映射文件,工作量大。\n\n\n- Hibernate对象/关系映射能力强,数据库无关性好,对于关系模型要求高的软件(例如需求固定的定制化软件)如果用 hibernate开发可以节省很多代码,提高效率。但是 Hibernate的学习门槛高,要精通门槛更高,而且怎么设计O/R映射,在性能和对象模型之间如何权衡,以及怎样用好 Hibernate需要具有很强的经验和能力才行\n\n总之,按照用户的需求在有限的资源环境下只要能做出维护性、扩展性良好\n的软件架构都是好架构,所以框架只有适合才是最好。\n\n# mybatis中主要类和接口\n- Configuration：将mybatis配置文件中的信息保存到该类中\n- SqlSessionFactory：解析Configuration类中的配置信息，获取SqlSession\n- SqlSession：负责和数据库交互，完成增删改查\n- Executor：mybatis的调度核心，负责SQL的生成\n- StatementHandler：封装了JDBC的statement操作\n- ParameterHandler：负责完成JavaType到jdbcType的转换\n- ResultSetHandler：负责完成结果集到Java Bean的转换\n- MappedStatement：代表一个select|update|insert|delete元素\n- SqlSource：根据传入的ParamterObject生成SQL\n- BoundSql：包含SQL和参数信息\n\n\n# Spring 整合 MyBatis\n**POM**\n```java\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis</artifactId>\n    <version>3.2.8</version>\n</dependency>\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis-spring</artifactId>\n    <version>1.3.1</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-jdbc</artifactId>\n    <version>4.3.17.RELEASE</version>\n</dependency>\n```\n主要增加了 3 个依赖\n- org.mybatis:mybatis\n- org.mybatis:mybatis-spring\n- org.springframework:spring-jdbc\n\n**创建 MyBatis 配置文件**\n创建一个名为 `mybatis-config.xml` 的配置文件，内容如下：\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <!-- 全局参数 -->\n    <settings>\n        <!-- 打印 SQL 语句 -->\n        <setting name=\"logImpl\" value=\"STDOUT_LOGGING\" />\n\n        <!-- 使全局的映射器启用或禁用缓存。 -->\n        <setting name=\"cacheEnabled\" value=\"false\"/>\n\n        <!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 -->\n        <setting name=\"lazyLoadingEnabled\" value=\"true\"/>\n\n        <!-- 当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载。 -->\n        <setting name=\"aggressiveLazyLoading\" value=\"true\"/>\n\n        <!-- 是否允许单条 SQL 返回多个数据集 (取决于驱动的兼容性) default:true -->\n        <setting name=\"multipleResultSetsEnabled\" value=\"true\"/>\n\n        <!-- 是否可以使用列的别名 (取决于驱动的兼容性) default:true -->\n        <setting name=\"useColumnLabel\" value=\"true\"/>\n\n        <!-- 允许 JDBC 生成主键。需要驱动器支持。如果设为了 true，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。 default:false  -->\n        <setting name=\"useGeneratedKeys\" value=\"false\"/>\n\n        <!-- 指定 MyBatis 如何自动映射 数据基表的列 NONE：不映射 PARTIAL：部分 FULL:全部  -->\n        <setting name=\"autoMappingBehavior\" value=\"PARTIAL\"/>\n\n        <!-- 这是默认的执行类型 （SIMPLE: 简单； REUSE: 执行器可能重复使用prepared statements语句；BATCH: 执行器可以重复执行语句和批量更新） -->\n        <setting name=\"defaultExecutorType\" value=\"SIMPLE\"/>\n\n        <!-- 使用驼峰命名法转换字段。 -->\n        <setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/>\n\n        <!-- 设置本地缓存范围 session:就会有数据的共享 statement:语句范围 (这样就不会有数据的共享 ) defalut:session -->\n        <setting name=\"localCacheScope\" value=\"SESSION\"/>\n\n        <!-- 设置 JDBC 类型为空时,某些驱动程序 要指定值, default:OTHER，插入空值时不需要指定类型 -->\n        <setting name=\"jdbcTypeForNull\" value=\"NULL\"/>\n    </settings>\n</configuration>\n```\n\n**Spring 集成 MyBatis**\n创建一个名为 `spring-context-mybatis.xml` 的 Spring 配置文件，内容如下：\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd\">\n\n    <!-- 配置 SqlSession -->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n        <!-- 用于配置对应实体类所在的包，多个 package 之间可以用 ',' 号分割 -->\n        <property name=\"typeAliasesPackage\" value=\"com.funtl.my.shop.domain\"/>\n        <!-- 用于配置对象关系映射配置文件所在目录 -->\n        <property name=\"mapperLocations\" value=\"classpath:/mapper/**/*.xml\"/>\n        <property name=\"configLocation\" value=\"classpath:/mybatis-config.xml\"></property>\n    </bean>\n\n    <!-- 扫描 Mapper -->\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <property name=\"basePackage\" value=\"com.funtl.my.shop.web.admin.dao\" />\n    </bean>\n</beans>\n```\n\n\n","slug":"Mybatis","published":1,"updated":"2021-04-22T03:43:26.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysf000pko9bd4iogr19","content":"<h1 id=\"Mybatis\"><a href=\"#Mybatis\" class=\"headerlink\" title=\"Mybatis\"></a>Mybatis</h1><h2 id=\"jdbc-问题总结如下：\"><a href=\"#jdbc-问题总结如下：\" class=\"headerlink\" title=\"jdbc 问题总结如下：\"></a>jdbc 问题总结如下：</h2><ul>\n<li>数据库连接创建、释放频繁造成系统资源浪费,从而影响系统性能。如果使用数据库连接池可解决此问题。 </li>\n<li>sql语句在代码中硬编码,造成代码不易维护,实际应用中sql变化的可能较大,sql变动需要改变java代码。 </li>\n<li>使用 preparedStatement向占有位符号传参数存在硬编码,因为sql语句的where条件不一定,可能多也可能少,修改sql还要修改代码,系统不易维护。</li>\n<li>对结果集解析存在硬编码(查询列名),sql变化导致解析代码变化,系统不易维护,如果能将数据库记录封装成pojo对象解析比较方便。</li>\n</ul>\n<h2 id=\"Mybatis解决-jdbc编程的间题\"><a href=\"#Mybatis解决-jdbc编程的间题\" class=\"headerlink\" title=\"Mybatis解决 jdbc编程的间题\"></a>Mybatis解决 jdbc编程的间题</h2><ul>\n<li>数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能,如果使用数据库连接池可解决此问题<br>解决:在 sqllMapConfig.xm中配置数据连接池,使用连接池管理数据库链接。</li>\n<li>sqll语句写在代码中造成代码不易维护,实际应用sql变化的可能较大,sql变动需要改变java代码。<br>解决:将sqll语句配置在 XXXXmapperxm文件中与java代码分离。</li>\n<li>向sql语句传参数麻烦,因为sql语句的 where条件不一定,可能多也可能少,占位符需要和参数一一对应<br>解决: Mybatis自动将java对象映射至sql语句,通过 statement中的parameterType定义输入参数的类型。</li>\n<li>sql变化导致解析代码变化,且解析前需要遍历,如果能将数据库记录封装成pojo对象解析比较方便。<br>解决: Mybatis自动将sqll执行结果映射至java对象,通过 statement中的resultType定义输出结果的类型。</li>\n</ul>\n<h2 id=\"Mybatis-架构\"><a href=\"#Mybatis-架构\" class=\"headerlink\" title=\"Mybatis 架构　　　　\"></a>Mybatis 架构　　　　</h2><p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/%E6%9E%B6%E6%9E%84%E5%9B%BE-1.png\" alt></p>\n<p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt> </p>\n<h2 id=\"Mybatis和Hibernate本质区别和应用场景\"><a href=\"#Mybatis和Hibernate本质区别和应用场景\" class=\"headerlink\" title=\"Mybatis和Hibernate本质区别和应用场景\"></a>Mybatis和Hibernate本质区别和应用场景</h2><ul>\n<li>Mybatis和 hibernate不同,它不完全是一个ORM框架,因为 MyBatis需要程序员自己编写Sq语句。 mybatis可以通过XML或注解方式灵活配置要运行的sq语句,并将java对象和sql语句映射生成最终执行的sq,最后将sq执行的结果再映射生成java对象。</li>\n<li>Mybatis学习门槛低,简单易学,程序员直接编写原生态sql,可严格控制sql执行性能,灵活度高,非常适合对关系数据模型要求不高的软件开发例如：互联网软件、企业运营类软件等,因为这类软件需求变化频繁,一但需求变化要求成果输出迅速。但是灵活的前提是 mybatis无法做到数据库无关性,如果需要实现支持多种数据库的软件则需要自定义多套sq映射文件,工作量大。</li>\n</ul>\n<ul>\n<li>Hibernate对象/关系映射能力强,数据库无关性好,对于关系模型要求高的软件(例如需求固定的定制化软件)如果用 hibernate开发可以节省很多代码,提高效率。但是 Hibernate的学习门槛高,要精通门槛更高,而且怎么设计O/R映射,在性能和对象模型之间如何权衡,以及怎样用好 Hibernate需要具有很强的经验和能力才行</li>\n</ul>\n<p>总之,按照用户的需求在有限的资源环境下只要能做出维护性、扩展性良好<br>的软件架构都是好架构,所以框架只有适合才是最好。</p>\n<h1 id=\"mybatis中主要类和接口\"><a href=\"#mybatis中主要类和接口\" class=\"headerlink\" title=\"mybatis中主要类和接口\"></a>mybatis中主要类和接口</h1><ul>\n<li>Configuration：将mybatis配置文件中的信息保存到该类中</li>\n<li>SqlSessionFactory：解析Configuration类中的配置信息，获取SqlSession</li>\n<li>SqlSession：负责和数据库交互，完成增删改查</li>\n<li>Executor：mybatis的调度核心，负责SQL的生成</li>\n<li>StatementHandler：封装了JDBC的statement操作</li>\n<li>ParameterHandler：负责完成JavaType到jdbcType的转换</li>\n<li>ResultSetHandler：负责完成结果集到Java Bean的转换</li>\n<li>MappedStatement：代表一个select|update|insert|delete元素</li>\n<li>SqlSource：根据传入的ParamterObject生成SQL</li>\n<li>BoundSql：包含SQL和参数信息</li>\n</ul>\n<h1 id=\"Spring-整合-MyBatis\"><a href=\"#Spring-整合-MyBatis\" class=\"headerlink\" title=\"Spring 整合 MyBatis\"></a>Spring 整合 MyBatis</h1><p><strong>POM</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.2.8&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;4.3.17.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>主要增加了 3 个依赖</p>\n<ul>\n<li>org.mybatis:mybatis</li>\n<li>org.mybatis:mybatis-spring</li>\n<li>org.springframework:spring-jdbc</li>\n</ul>\n<p><strong>创建 MyBatis 配置文件</strong><br>创建一个名为 <code>mybatis-config.xml</code> 的配置文件，内容如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span> <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;!-- 全局参数 --&gt;</span><br><span class=\"line\">    &lt;settings&gt;</span><br><span class=\"line\">        &lt;!-- 打印 SQL 语句 --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"logImpl\"</span> value=<span class=\"string\">\"STDOUT_LOGGING\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 使全局的映射器启用或禁用缓存。 --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"cacheEnabled\"</span> value=<span class=\"string\">\"false\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"lazyLoadingEnabled\"</span> value=<span class=\"string\">\"true\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载。 --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"aggressiveLazyLoading\"</span> value=<span class=\"string\">\"true\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 是否允许单条 SQL 返回多个数据集 (取决于驱动的兼容性) <span class=\"keyword\">default</span>:<span class=\"keyword\">true</span> --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"multipleResultSetsEnabled\"</span> value=<span class=\"string\">\"true\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 是否可以使用列的别名 (取决于驱动的兼容性) <span class=\"keyword\">default</span>:<span class=\"keyword\">true</span> --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"useColumnLabel\"</span> value=<span class=\"string\">\"true\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 允许 JDBC 生成主键。需要驱动器支持。如果设为了 <span class=\"keyword\">true</span>，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。 <span class=\"keyword\">default</span>:<span class=\"keyword\">false</span>  --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"useGeneratedKeys\"</span> value=<span class=\"string\">\"false\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 指定 MyBatis 如何自动映射 数据基表的列 NONE：不映射 PARTIAL：部分 FULL:全部  --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"autoMappingBehavior\"</span> value=<span class=\"string\">\"PARTIAL\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 这是默认的执行类型 （SIMPLE: 简单； REUSE: 执行器可能重复使用prepared statements语句；BATCH: 执行器可以重复执行语句和批量更新） --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"defaultExecutorType\"</span> value=<span class=\"string\">\"SIMPLE\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 使用驼峰命名法转换字段。 --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"mapUnderscoreToCamelCase\"</span> value=<span class=\"string\">\"true\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 设置本地缓存范围 session:就会有数据的共享 statement:语句范围 (这样就不会有数据的共享 ) defalut:session --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"localCacheScope\"</span> value=<span class=\"string\">\"SESSION\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 设置 JDBC 类型为空时,某些驱动程序 要指定值, <span class=\"keyword\">default</span>:OTHER，插入空值时不需要指定类型 --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"jdbcTypeForNull\"</span> value=<span class=\"string\">\"NULL\"</span>/&gt;</span><br><span class=\"line\">    &lt;/settings&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Spring 集成 MyBatis</strong><br>创建一个名为 <code>spring-context-mybatis.xml</code> 的 Spring 配置文件，内容如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;beans xmlns=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">       xsi:schemaLocation=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 配置 SqlSession --&gt;</span><br><span class=\"line\">    &lt;bean id=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"dataSource\"</span> ref=<span class=\"string\">\"dataSource\"</span>/&gt;</span><br><span class=\"line\">        &lt;!-- 用于配置对应实体类所在的包，多个 <span class=\"keyword\">package</span> 之间可以用 <span class=\"string\">','</span> 号分割 --&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"typeAliasesPackage\"</span> value=<span class=\"string\">\"com.funtl.my.shop.domain\"</span>/&gt;</span><br><span class=\"line\">        &lt;!-- 用于配置对象关系映射配置文件所在目录 --&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"mapperLocations\"</span> value=<span class=\"string\">\"classpath:/mapper/**/*.xml\"</span>/&gt;</span><br><span class=\"line\">        &lt;property name=\"configLocation\" value=\"classpath:/mybatis-config.xml\"&gt;&lt;/property&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 扫描 Mapper --&gt;</span><br><span class=\"line\">    &lt;bean <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"basePackage\"</span> value=<span class=\"string\">\"com.funtl.my.shop.web.admin.dao\"</span> /&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Mybatis\"><a href=\"#Mybatis\" class=\"headerlink\" title=\"Mybatis\"></a>Mybatis</h1><h2 id=\"jdbc-问题总结如下：\"><a href=\"#jdbc-问题总结如下：\" class=\"headerlink\" title=\"jdbc 问题总结如下：\"></a>jdbc 问题总结如下：</h2><ul>\n<li>数据库连接创建、释放频繁造成系统资源浪费,从而影响系统性能。如果使用数据库连接池可解决此问题。 </li>\n<li>sql语句在代码中硬编码,造成代码不易维护,实际应用中sql变化的可能较大,sql变动需要改变java代码。 </li>\n<li>使用 preparedStatement向占有位符号传参数存在硬编码,因为sql语句的where条件不一定,可能多也可能少,修改sql还要修改代码,系统不易维护。</li>\n<li>对结果集解析存在硬编码(查询列名),sql变化导致解析代码变化,系统不易维护,如果能将数据库记录封装成pojo对象解析比较方便。</li>\n</ul>\n<h2 id=\"Mybatis解决-jdbc编程的间题\"><a href=\"#Mybatis解决-jdbc编程的间题\" class=\"headerlink\" title=\"Mybatis解决 jdbc编程的间题\"></a>Mybatis解决 jdbc编程的间题</h2><ul>\n<li>数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能,如果使用数据库连接池可解决此问题<br>解决:在 sqllMapConfig.xm中配置数据连接池,使用连接池管理数据库链接。</li>\n<li>sqll语句写在代码中造成代码不易维护,实际应用sql变化的可能较大,sql变动需要改变java代码。<br>解决:将sqll语句配置在 XXXXmapperxm文件中与java代码分离。</li>\n<li>向sql语句传参数麻烦,因为sql语句的 where条件不一定,可能多也可能少,占位符需要和参数一一对应<br>解决: Mybatis自动将java对象映射至sql语句,通过 statement中的parameterType定义输入参数的类型。</li>\n<li>sql变化导致解析代码变化,且解析前需要遍历,如果能将数据库记录封装成pojo对象解析比较方便。<br>解决: Mybatis自动将sqll执行结果映射至java对象,通过 statement中的resultType定义输出结果的类型。</li>\n</ul>\n<h2 id=\"Mybatis-架构\"><a href=\"#Mybatis-架构\" class=\"headerlink\" title=\"Mybatis 架构　　　　\"></a>Mybatis 架构　　　　</h2><p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/%E6%9E%B6%E6%9E%84%E5%9B%BE-1.png\" alt></p>\n<p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt> </p>\n<h2 id=\"Mybatis和Hibernate本质区别和应用场景\"><a href=\"#Mybatis和Hibernate本质区别和应用场景\" class=\"headerlink\" title=\"Mybatis和Hibernate本质区别和应用场景\"></a>Mybatis和Hibernate本质区别和应用场景</h2><ul>\n<li>Mybatis和 hibernate不同,它不完全是一个ORM框架,因为 MyBatis需要程序员自己编写Sq语句。 mybatis可以通过XML或注解方式灵活配置要运行的sq语句,并将java对象和sql语句映射生成最终执行的sq,最后将sq执行的结果再映射生成java对象。</li>\n<li>Mybatis学习门槛低,简单易学,程序员直接编写原生态sql,可严格控制sql执行性能,灵活度高,非常适合对关系数据模型要求不高的软件开发例如：互联网软件、企业运营类软件等,因为这类软件需求变化频繁,一但需求变化要求成果输出迅速。但是灵活的前提是 mybatis无法做到数据库无关性,如果需要实现支持多种数据库的软件则需要自定义多套sq映射文件,工作量大。</li>\n</ul>\n<ul>\n<li>Hibernate对象/关系映射能力强,数据库无关性好,对于关系模型要求高的软件(例如需求固定的定制化软件)如果用 hibernate开发可以节省很多代码,提高效率。但是 Hibernate的学习门槛高,要精通门槛更高,而且怎么设计O/R映射,在性能和对象模型之间如何权衡,以及怎样用好 Hibernate需要具有很强的经验和能力才行</li>\n</ul>\n<p>总之,按照用户的需求在有限的资源环境下只要能做出维护性、扩展性良好<br>的软件架构都是好架构,所以框架只有适合才是最好。</p>\n<h1 id=\"mybatis中主要类和接口\"><a href=\"#mybatis中主要类和接口\" class=\"headerlink\" title=\"mybatis中主要类和接口\"></a>mybatis中主要类和接口</h1><ul>\n<li>Configuration：将mybatis配置文件中的信息保存到该类中</li>\n<li>SqlSessionFactory：解析Configuration类中的配置信息，获取SqlSession</li>\n<li>SqlSession：负责和数据库交互，完成增删改查</li>\n<li>Executor：mybatis的调度核心，负责SQL的生成</li>\n<li>StatementHandler：封装了JDBC的statement操作</li>\n<li>ParameterHandler：负责完成JavaType到jdbcType的转换</li>\n<li>ResultSetHandler：负责完成结果集到Java Bean的转换</li>\n<li>MappedStatement：代表一个select|update|insert|delete元素</li>\n<li>SqlSource：根据传入的ParamterObject生成SQL</li>\n<li>BoundSql：包含SQL和参数信息</li>\n</ul>\n<h1 id=\"Spring-整合-MyBatis\"><a href=\"#Spring-整合-MyBatis\" class=\"headerlink\" title=\"Spring 整合 MyBatis\"></a>Spring 整合 MyBatis</h1><p><strong>POM</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.2.8&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;4.3.17.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>主要增加了 3 个依赖</p>\n<ul>\n<li>org.mybatis:mybatis</li>\n<li>org.mybatis:mybatis-spring</li>\n<li>org.springframework:spring-jdbc</li>\n</ul>\n<p><strong>创建 MyBatis 配置文件</strong><br>创建一个名为 <code>mybatis-config.xml</code> 的配置文件，内容如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span> <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;!-- 全局参数 --&gt;</span><br><span class=\"line\">    &lt;settings&gt;</span><br><span class=\"line\">        &lt;!-- 打印 SQL 语句 --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"logImpl\"</span> value=<span class=\"string\">\"STDOUT_LOGGING\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 使全局的映射器启用或禁用缓存。 --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"cacheEnabled\"</span> value=<span class=\"string\">\"false\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"lazyLoadingEnabled\"</span> value=<span class=\"string\">\"true\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载。 --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"aggressiveLazyLoading\"</span> value=<span class=\"string\">\"true\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 是否允许单条 SQL 返回多个数据集 (取决于驱动的兼容性) <span class=\"keyword\">default</span>:<span class=\"keyword\">true</span> --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"multipleResultSetsEnabled\"</span> value=<span class=\"string\">\"true\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 是否可以使用列的别名 (取决于驱动的兼容性) <span class=\"keyword\">default</span>:<span class=\"keyword\">true</span> --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"useColumnLabel\"</span> value=<span class=\"string\">\"true\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 允许 JDBC 生成主键。需要驱动器支持。如果设为了 <span class=\"keyword\">true</span>，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。 <span class=\"keyword\">default</span>:<span class=\"keyword\">false</span>  --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"useGeneratedKeys\"</span> value=<span class=\"string\">\"false\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 指定 MyBatis 如何自动映射 数据基表的列 NONE：不映射 PARTIAL：部分 FULL:全部  --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"autoMappingBehavior\"</span> value=<span class=\"string\">\"PARTIAL\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 这是默认的执行类型 （SIMPLE: 简单； REUSE: 执行器可能重复使用prepared statements语句；BATCH: 执行器可以重复执行语句和批量更新） --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"defaultExecutorType\"</span> value=<span class=\"string\">\"SIMPLE\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 使用驼峰命名法转换字段。 --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"mapUnderscoreToCamelCase\"</span> value=<span class=\"string\">\"true\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 设置本地缓存范围 session:就会有数据的共享 statement:语句范围 (这样就不会有数据的共享 ) defalut:session --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"localCacheScope\"</span> value=<span class=\"string\">\"SESSION\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 设置 JDBC 类型为空时,某些驱动程序 要指定值, <span class=\"keyword\">default</span>:OTHER，插入空值时不需要指定类型 --&gt;</span><br><span class=\"line\">        &lt;setting name=<span class=\"string\">\"jdbcTypeForNull\"</span> value=<span class=\"string\">\"NULL\"</span>/&gt;</span><br><span class=\"line\">    &lt;/settings&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Spring 集成 MyBatis</strong><br>创建一个名为 <code>spring-context-mybatis.xml</code> 的 Spring 配置文件，内容如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;beans xmlns=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">       xsi:schemaLocation=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 配置 SqlSession --&gt;</span><br><span class=\"line\">    &lt;bean id=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"dataSource\"</span> ref=<span class=\"string\">\"dataSource\"</span>/&gt;</span><br><span class=\"line\">        &lt;!-- 用于配置对应实体类所在的包，多个 <span class=\"keyword\">package</span> 之间可以用 <span class=\"string\">','</span> 号分割 --&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"typeAliasesPackage\"</span> value=<span class=\"string\">\"com.funtl.my.shop.domain\"</span>/&gt;</span><br><span class=\"line\">        &lt;!-- 用于配置对象关系映射配置文件所在目录 --&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"mapperLocations\"</span> value=<span class=\"string\">\"classpath:/mapper/**/*.xml\"</span>/&gt;</span><br><span class=\"line\">        &lt;property name=\"configLocation\" value=\"classpath:/mybatis-config.xml\"&gt;&lt;/property&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 扫描 Mapper --&gt;</span><br><span class=\"line\">    &lt;bean <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"basePackage\"</span> value=<span class=\"string\">\"com.funtl.my.shop.web.admin.dao\"</span> /&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"MySql","date":"2019-08-23T08:49:34.000Z","_content":"\n# 概述\n\nMySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL 是最流行的关系型数据库管理系统之一\n\n# 基于Docker安装MySQL\n```text\nersion: '3.1'\nservices:\n  mysql:\n    restart: always\n    image: mysql:5.7.22\n    container_name: mysql\n    ports:\n      - 3306:3306\n    environment:\n      TZ: Asia/Shanghai\n      MYSQL_ROOT_PASSWORD: 123456\n    command:\n      --character-set-server=utf8mb4\n      --collation-server=utf8mb4_general_ci\n      --explicit_defaults_for_timestamp=true\n      --lower_case_table_names=1\n      --max_allowed_packet=128M\n      --sql-mode=\"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO\"\n    volumes:\n      - mysql-data:/var/lib/mysql\n\nvolumes:\n  mysql-data:\n\n```\n\n# 基本指令\n连接到本机上的MySQ：\n```text\nmysql -uroot -p /*如果刚安装好MySQL，root是没有密码的*/\n```\n连接到远程主机上的MySQL：\n```text\nmysql> mysql -h192.168.206.100 -uroot -p12345678; /*u与root可以不加空格*/\n```\n退出MySQL命令： exit 或 quit（回车）：\n```text\nmysql> exit/quit;\n```\n指定要操作的数据库\n```text\nUSE 数据库名；\n```\n查看数据表\n```text\nSHOW CREATE TABLE 数据表名；\n```\n\n","source":"_posts/MySql.md","raw":"---\ntitle: MySql\ndate: 2019-08-23 16:49:34\ntags:\n   - 数据库\n---\n\n# 概述\n\nMySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL 是最流行的关系型数据库管理系统之一\n\n# 基于Docker安装MySQL\n```text\nersion: '3.1'\nservices:\n  mysql:\n    restart: always\n    image: mysql:5.7.22\n    container_name: mysql\n    ports:\n      - 3306:3306\n    environment:\n      TZ: Asia/Shanghai\n      MYSQL_ROOT_PASSWORD: 123456\n    command:\n      --character-set-server=utf8mb4\n      --collation-server=utf8mb4_general_ci\n      --explicit_defaults_for_timestamp=true\n      --lower_case_table_names=1\n      --max_allowed_packet=128M\n      --sql-mode=\"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO\"\n    volumes:\n      - mysql-data:/var/lib/mysql\n\nvolumes:\n  mysql-data:\n\n```\n\n# 基本指令\n连接到本机上的MySQ：\n```text\nmysql -uroot -p /*如果刚安装好MySQL，root是没有密码的*/\n```\n连接到远程主机上的MySQL：\n```text\nmysql> mysql -h192.168.206.100 -uroot -p12345678; /*u与root可以不加空格*/\n```\n退出MySQL命令： exit 或 quit（回车）：\n```text\nmysql> exit/quit;\n```\n指定要操作的数据库\n```text\nUSE 数据库名；\n```\n查看数据表\n```text\nSHOW CREATE TABLE 数据表名；\n```\n\n","slug":"MySql","published":1,"updated":"2021-04-22T03:43:26.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysg000rko9b8ofi648n","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL 是最流行的关系型数据库管理系统之一</p>\n<h1 id=\"基于Docker安装MySQL\"><a href=\"#基于Docker安装MySQL\" class=\"headerlink\" title=\"基于Docker安装MySQL\"></a>基于Docker安装MySQL</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ersion: &apos;3.1&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  mysql:</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    image: mysql:5.7.22</span><br><span class=\"line\">    container_name: mysql</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 3306:3306</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: Asia/Shanghai</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: 123456</span><br><span class=\"line\">    command:</span><br><span class=\"line\">      --character-set-server=utf8mb4</span><br><span class=\"line\">      --collation-server=utf8mb4_general_ci</span><br><span class=\"line\">      --explicit_defaults_for_timestamp=true</span><br><span class=\"line\">      --lower_case_table_names=1</span><br><span class=\"line\">      --max_allowed_packet=128M</span><br><span class=\"line\">      --sql-mode=&quot;STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - mysql-data:/var/lib/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  mysql-data:</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"基本指令\"><a href=\"#基本指令\" class=\"headerlink\" title=\"基本指令\"></a>基本指令</h1><p>连接到本机上的MySQ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p /*如果刚安装好MySQL，root是没有密码的*/</span><br></pre></td></tr></table></figure>\n\n<p>连接到远程主机上的MySQL：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; mysql -h192.168.206.100 -uroot -p12345678; /*u与root可以不加空格*/</span><br></pre></td></tr></table></figure>\n\n<p>退出MySQL命令： exit 或 quit（回车）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; exit/quit;</span><br></pre></td></tr></table></figure>\n\n<p>指定要操作的数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USE 数据库名；</span><br></pre></td></tr></table></figure>\n\n<p>查看数据表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW CREATE TABLE 数据表名；</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL 是最流行的关系型数据库管理系统之一</p>\n<h1 id=\"基于Docker安装MySQL\"><a href=\"#基于Docker安装MySQL\" class=\"headerlink\" title=\"基于Docker安装MySQL\"></a>基于Docker安装MySQL</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ersion: &apos;3.1&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  mysql:</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    image: mysql:5.7.22</span><br><span class=\"line\">    container_name: mysql</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 3306:3306</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: Asia/Shanghai</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: 123456</span><br><span class=\"line\">    command:</span><br><span class=\"line\">      --character-set-server=utf8mb4</span><br><span class=\"line\">      --collation-server=utf8mb4_general_ci</span><br><span class=\"line\">      --explicit_defaults_for_timestamp=true</span><br><span class=\"line\">      --lower_case_table_names=1</span><br><span class=\"line\">      --max_allowed_packet=128M</span><br><span class=\"line\">      --sql-mode=&quot;STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - mysql-data:/var/lib/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  mysql-data:</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"基本指令\"><a href=\"#基本指令\" class=\"headerlink\" title=\"基本指令\"></a>基本指令</h1><p>连接到本机上的MySQ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p /*如果刚安装好MySQL，root是没有密码的*/</span><br></pre></td></tr></table></figure>\n\n<p>连接到远程主机上的MySQL：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; mysql -h192.168.206.100 -uroot -p12345678; /*u与root可以不加空格*/</span><br></pre></td></tr></table></figure>\n\n<p>退出MySQL命令： exit 或 quit（回车）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; exit/quit;</span><br></pre></td></tr></table></figure>\n\n<p>指定要操作的数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USE 数据库名；</span><br></pre></td></tr></table></figure>\n\n<p>查看数据表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW CREATE TABLE 数据表名；</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Nginx","date":"2019-08-20T07:53:25.000Z","_content":"","source":"_posts/Nginx.md","raw":"---\ntitle: Nginx\ndate: 2019-08-20 15:53:25\ntags:\n---\n","slug":"Nginx","published":1,"updated":"2021-04-22T03:43:26.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysg000tko9b1klvsft4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Object类及其常用方法","date":"2019-09-04T02:20:51.000Z","_content":"","source":"_posts/Object类及其常用方法.md","raw":"---\ntitle: Object类及其常用方法\ndate: 2019-09-04 10:20:51\ntags:\n---\n","slug":"Object类及其常用方法","published":1,"updated":"2021-04-22T03:43:26.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysh000vko9bi7qwkmnh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"RESTEasy","date":"2019-08-27T02:00:50.000Z","_content":"\n# 概述\n\nRESTEasy是JBoss的一个开源项目，提供各种框架帮助你构建RESTful Web Services和RESTful Java应用程序。它是JAX-RS规范的一个完整实现并通过JCP认证。作为一个JBOSS的项目，它当然能和JBOSS应用服务器很好地集成在一起。但是，它也能在任何运行JDK5或以上版本的Servlet容器中运行。RESTEasy还提供一个RESTEasy JAX-RS客户端调用框架。能够很方便与EJB、Seam、Guice、Spring和Spring MVC集成使用。支持在客户端与服务器端自动实现GZIP解压缩\n\n# 规范说明\n\n| 注解\t| 描述 |\n| ---- | ---- |\n| @Path\t\t\t\t| 类或者方法的相对地址，标注在类或者方法上                       |\n| @GET\t\t\t\t| HTTP GET请求用，用来获取资源                                   |\n| @PUT\t\t\t\t| HTTP PUT 请求，用来创建资源                                    |\n| @POST\t\t\t\t| HTTP POST 请求, 用来创建或者更新资源                           |\n| @DELETE\t\t\t| \tHTTP DELETE请求, 用来删除资源                                |\n| @HEAD\t\t\t\t| HTTP HEAD请求, 用来获取一个接口是否可用的状态                  |\n| @Produces\t\t\t| 返回数据的格式比如APPLICATION/XML, TEXT/HTML, APPLICATION/JSON |\n| @Consumes\t\t\t| 请求数据格式 , 如json                                          |\n| @PathParam\t\t| \t绑定url里面的参数                                            |\n| @QueryParam\t\t| \t绑定url后面的参数（？后面的）                                |\n| @MatrixParam\t\t| 绑定包含多个 property (属性)=value(值) 方法参数表达式          |\n| @HeaderParam\t\t| 给header里面传参                                               |\n| @CookieParam\t\t| 给cookie里面传参                                               |\n| @FormParam\t\t| \t给form传参                                                   |\n| @DefaultValue\t\t| 给参数一个默认值                                               |\n| @Context\t\t\t| 可以注入HttpRequest，HttpResponse用                            |\n\n\n**博客推荐**\n[Spring Boot 集成 resteasy篇 — jax-rs初步介绍和spring boot集成](https://blog.csdn.net/u011410529/article/details/77503918)\n[Spring Boot 集成 resteasy篇 — jax-rs常用注解介绍](https://blog.csdn.net/u011410529/article/details/77505238)","source":"_posts/RESTEasy.md","raw":"---\ntitle: RESTEasy\ndate: 2019-08-27 10:00:50\ntags:\n---\n\n# 概述\n\nRESTEasy是JBoss的一个开源项目，提供各种框架帮助你构建RESTful Web Services和RESTful Java应用程序。它是JAX-RS规范的一个完整实现并通过JCP认证。作为一个JBOSS的项目，它当然能和JBOSS应用服务器很好地集成在一起。但是，它也能在任何运行JDK5或以上版本的Servlet容器中运行。RESTEasy还提供一个RESTEasy JAX-RS客户端调用框架。能够很方便与EJB、Seam、Guice、Spring和Spring MVC集成使用。支持在客户端与服务器端自动实现GZIP解压缩\n\n# 规范说明\n\n| 注解\t| 描述 |\n| ---- | ---- |\n| @Path\t\t\t\t| 类或者方法的相对地址，标注在类或者方法上                       |\n| @GET\t\t\t\t| HTTP GET请求用，用来获取资源                                   |\n| @PUT\t\t\t\t| HTTP PUT 请求，用来创建资源                                    |\n| @POST\t\t\t\t| HTTP POST 请求, 用来创建或者更新资源                           |\n| @DELETE\t\t\t| \tHTTP DELETE请求, 用来删除资源                                |\n| @HEAD\t\t\t\t| HTTP HEAD请求, 用来获取一个接口是否可用的状态                  |\n| @Produces\t\t\t| 返回数据的格式比如APPLICATION/XML, TEXT/HTML, APPLICATION/JSON |\n| @Consumes\t\t\t| 请求数据格式 , 如json                                          |\n| @PathParam\t\t| \t绑定url里面的参数                                            |\n| @QueryParam\t\t| \t绑定url后面的参数（？后面的）                                |\n| @MatrixParam\t\t| 绑定包含多个 property (属性)=value(值) 方法参数表达式          |\n| @HeaderParam\t\t| 给header里面传参                                               |\n| @CookieParam\t\t| 给cookie里面传参                                               |\n| @FormParam\t\t| \t给form传参                                                   |\n| @DefaultValue\t\t| 给参数一个默认值                                               |\n| @Context\t\t\t| 可以注入HttpRequest，HttpResponse用                            |\n\n\n**博客推荐**\n[Spring Boot 集成 resteasy篇 — jax-rs初步介绍和spring boot集成](https://blog.csdn.net/u011410529/article/details/77503918)\n[Spring Boot 集成 resteasy篇 — jax-rs常用注解介绍](https://blog.csdn.net/u011410529/article/details/77505238)","slug":"RESTEasy","published":1,"updated":"2021-04-22T03:43:26.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysi000wko9bmy9or8eq","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>RESTEasy是JBoss的一个开源项目，提供各种框架帮助你构建RESTful Web Services和RESTful Java应用程序。它是JAX-RS规范的一个完整实现并通过JCP认证。作为一个JBOSS的项目，它当然能和JBOSS应用服务器很好地集成在一起。但是，它也能在任何运行JDK5或以上版本的Servlet容器中运行。RESTEasy还提供一个RESTEasy JAX-RS客户端调用框架。能够很方便与EJB、Seam、Guice、Spring和Spring MVC集成使用。支持在客户端与服务器端自动实现GZIP解压缩</p>\n<h1 id=\"规范说明\"><a href=\"#规范说明\" class=\"headerlink\" title=\"规范说明\"></a>规范说明</h1><table>\n<thead>\n<tr>\n<th>注解</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Path</td>\n<td>类或者方法的相对地址，标注在类或者方法上</td>\n</tr>\n<tr>\n<td>@GET</td>\n<td>HTTP GET请求用，用来获取资源</td>\n</tr>\n<tr>\n<td>@PUT</td>\n<td>HTTP PUT 请求，用来创建资源</td>\n</tr>\n<tr>\n<td>@POST</td>\n<td>HTTP POST 请求, 用来创建或者更新资源</td>\n</tr>\n<tr>\n<td>@DELETE</td>\n<td>HTTP DELETE请求, 用来删除资源</td>\n</tr>\n<tr>\n<td>@HEAD</td>\n<td>HTTP HEAD请求, 用来获取一个接口是否可用的状态</td>\n</tr>\n<tr>\n<td>@Produces</td>\n<td>返回数据的格式比如APPLICATION/XML, TEXT/HTML, APPLICATION/JSON</td>\n</tr>\n<tr>\n<td>@Consumes</td>\n<td>请求数据格式 , 如json</td>\n</tr>\n<tr>\n<td>@PathParam</td>\n<td>绑定url里面的参数</td>\n</tr>\n<tr>\n<td>@QueryParam</td>\n<td>绑定url后面的参数（？后面的）</td>\n</tr>\n<tr>\n<td>@MatrixParam</td>\n<td>绑定包含多个 property (属性)=value(值) 方法参数表达式</td>\n</tr>\n<tr>\n<td>@HeaderParam</td>\n<td>给header里面传参</td>\n</tr>\n<tr>\n<td>@CookieParam</td>\n<td>给cookie里面传参</td>\n</tr>\n<tr>\n<td>@FormParam</td>\n<td>给form传参</td>\n</tr>\n<tr>\n<td>@DefaultValue</td>\n<td>给参数一个默认值</td>\n</tr>\n<tr>\n<td>@Context</td>\n<td>可以注入HttpRequest，HttpResponse用</td>\n</tr>\n</tbody></table>\n<p><strong>博客推荐</strong><br><a href=\"https://blog.csdn.net/u011410529/article/details/77503918\" target=\"_blank\" rel=\"noopener\">Spring Boot 集成 resteasy篇 — jax-rs初步介绍和spring boot集成</a><br><a href=\"https://blog.csdn.net/u011410529/article/details/77505238\" target=\"_blank\" rel=\"noopener\">Spring Boot 集成 resteasy篇 — jax-rs常用注解介绍</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>RESTEasy是JBoss的一个开源项目，提供各种框架帮助你构建RESTful Web Services和RESTful Java应用程序。它是JAX-RS规范的一个完整实现并通过JCP认证。作为一个JBOSS的项目，它当然能和JBOSS应用服务器很好地集成在一起。但是，它也能在任何运行JDK5或以上版本的Servlet容器中运行。RESTEasy还提供一个RESTEasy JAX-RS客户端调用框架。能够很方便与EJB、Seam、Guice、Spring和Spring MVC集成使用。支持在客户端与服务器端自动实现GZIP解压缩</p>\n<h1 id=\"规范说明\"><a href=\"#规范说明\" class=\"headerlink\" title=\"规范说明\"></a>规范说明</h1><table>\n<thead>\n<tr>\n<th>注解</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Path</td>\n<td>类或者方法的相对地址，标注在类或者方法上</td>\n</tr>\n<tr>\n<td>@GET</td>\n<td>HTTP GET请求用，用来获取资源</td>\n</tr>\n<tr>\n<td>@PUT</td>\n<td>HTTP PUT 请求，用来创建资源</td>\n</tr>\n<tr>\n<td>@POST</td>\n<td>HTTP POST 请求, 用来创建或者更新资源</td>\n</tr>\n<tr>\n<td>@DELETE</td>\n<td>HTTP DELETE请求, 用来删除资源</td>\n</tr>\n<tr>\n<td>@HEAD</td>\n<td>HTTP HEAD请求, 用来获取一个接口是否可用的状态</td>\n</tr>\n<tr>\n<td>@Produces</td>\n<td>返回数据的格式比如APPLICATION/XML, TEXT/HTML, APPLICATION/JSON</td>\n</tr>\n<tr>\n<td>@Consumes</td>\n<td>请求数据格式 , 如json</td>\n</tr>\n<tr>\n<td>@PathParam</td>\n<td>绑定url里面的参数</td>\n</tr>\n<tr>\n<td>@QueryParam</td>\n<td>绑定url后面的参数（？后面的）</td>\n</tr>\n<tr>\n<td>@MatrixParam</td>\n<td>绑定包含多个 property (属性)=value(值) 方法参数表达式</td>\n</tr>\n<tr>\n<td>@HeaderParam</td>\n<td>给header里面传参</td>\n</tr>\n<tr>\n<td>@CookieParam</td>\n<td>给cookie里面传参</td>\n</tr>\n<tr>\n<td>@FormParam</td>\n<td>给form传参</td>\n</tr>\n<tr>\n<td>@DefaultValue</td>\n<td>给参数一个默认值</td>\n</tr>\n<tr>\n<td>@Context</td>\n<td>可以注入HttpRequest，HttpResponse用</td>\n</tr>\n</tbody></table>\n<p><strong>博客推荐</strong><br><a href=\"https://blog.csdn.net/u011410529/article/details/77503918\" target=\"_blank\" rel=\"noopener\">Spring Boot 集成 resteasy篇 — jax-rs初步介绍和spring boot集成</a><br><a href=\"https://blog.csdn.net/u011410529/article/details/77505238\" target=\"_blank\" rel=\"noopener\">Spring Boot 集成 resteasy篇 — jax-rs常用注解介绍</a></p>\n"},{"title":"RESTful API","date":"2019-08-27T01:19:45.000Z","_content":"\n# URL 设计\n\n- 动词 + 宾语\n\nRESTful 的核心思想就是，客户端发出的数据操作指令都是\"动词 + 宾语\"的结构。比如，`GET /articles`这个命令，`GET`是动词，`/articles`是宾语\n\n动词通常就是五种 HTTP 方法，对应 CRUD 操作。\n\n    GET：读取（Read）\n    POST：新建（Create）\n    PUT：更新（Update）\n    PATCH：更新（Update），通常是部分更新\n    DELETE：删除（Delete）\n根据 HTTP 规范，动词一律大写。\n\n- 动词的覆盖\n有些客户端只能使用`GET`和`POST`这两种方法。服务器必须接受`POST`模拟其他三个方法（`PUT`、`PATCH`、`DELETE`）。\n\n这时，客户端发出的 HTTP 请求，要加上`X-HTTP-Method-Override`属性，告诉服务器应该使用哪一个动词，覆盖`POST`方法。\n\n    POST /api/Person/4 HTTP/1.1  \n    X-HTTP-Method-Override: PUT\n\n上面代码中，`X-HTTP-Method-Override`指定本次请求的方法是PUT，而不是POST。\n\n- 宾语必须是名词\n宾语就是 API 的 URL，是 HTTP 动词作用的对象。它应该是名词，不能是动词。比如，`/articles`这个 URL 就是正确的，而下面的 URL 不是名词，所以都是错误的。\n\n\n    /getAllCars\n    /createNewCar\n    /deleteAllRedCars\n\n- 复数 URL\n\n既然 URL 是名词，那么应该使用复数，还是单数？\n\n这没有统一的规定，但是常见的操作是读取一个集合，比如`GET /articles`（读取所有文章），这里明显应该是复数。\n\n为了统一起见，建议都使用复数 URL，比如`GET /articles/2`要好于`GET /article/2`。\n\n\n- 避免多级 URL\n\n常见的情况是，资源需要多级分类，因此很容易写出多级的 URL，比如获取某个作者的某一类文章。\n\n    GET /authors/12/categories/2\n\n这种 URL 不利于扩展，语义也不明确，往往要想一会，才能明白含义。\n\n更好的做法是，除了第一级，其他级别都用查询字符串表达。\n\n    GET /authors/12?categories=2\n\n下面是另一个例子，查询已发布的文章。你可能会设计成下面的 URL。\n\n    GET /articles?published=true\n\n`POST`和`PUT`在创建资源的区别在于，所创建的资源的名称(URI)是否由客户端决定。 例如为我的博文增加一个java的分类，生成的路径就是分类名`/categories/java`，那么就可以采用PUT方法。不过很多人直接把POST、GET、PUT、DELETE直接对应上CRUD，例如在一个典型的rails实现的RESTful应用中就是这么做的。\n\n# 状态码\n\n- 状态码必须精确\n客户端的每一次请求，服务器都必须给出回应。回应包括 HTTP 状态码和数据两部分。\n\nHTTP 状态码就是一个三位数，分成五个类别。\n\n    1xx：相关信息\n    2xx：操作成功\n    3xx：重定向\n    4xx：客户端错误\n    5xx：服务器错误\n\n**GET**\n\n    安全且幂等\n    获取表示\n    变更时获取表示（缓存）\n    200（OK） - 表示已在响应中发出\n    204（无内容） - 资源有空表示\n    301（Moved Permanently） - 资源的URI已被更新\n    303（See Other） - 其他（如，负载均衡）\n    304（not modified）- 资源未更改（缓存）\n    400 （bad request）- 指代坏请求（如，参数错误）\n    404 （not found）- 资源不存在\n    406 （not acceptable）- 服务端不支持所需表示\n    500 （internal server error）- 通用错误响应\n    503 （Service Unavailable）- 服务端当前无法处理请求\n\n**POST**\n\n    不安全且不幂等\n    使用服务端管理的（自动产生）的实例号创建资源\n    创建子资源\n    部分更新资源\n    如果没有被修改，则不过更新资源（乐观锁）\n    200（OK）- 如果现有资源已被更改\n    201（created）- 如果新资源被创建\n    202（accepted）- 已接受处理请求但尚未完成（异步处理）\n    301（Moved Permanently）- 资源的URI被更新\n    303（See Other）- 其他（如，负载均衡）\n    400（bad request）- 指代坏请求\n    404 （not found）- 资源不存在\n    406 （not acceptable）- 服务端不支持所需表示\n    409 （conflict）- 通用冲突\n    412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）\n    415 （unsupported media type）- 接受到的表示不受支持\n    500 （internal server error）- 通用错误响应\n    503 （Service Unavailable）- 服务当前无法处理请求\n**PUT**\n\n    不安全但幂等\n    用客户端管理的实例号创建一个资源\n    通过替换的方式更新资源\n    如果未被修改，则更新资源（乐观锁）\n    200 （OK）- 如果已存在资源被更改\n    201 （created）- 如果新资源被创建\n    301（Moved Permanently）- 资源的URI已更改\n    303 （See Other）- 其他（如，负载均衡）\n    400 （bad request）- 指代坏请求\n    404 （not found）- 资源不存在\n    406 （not acceptable）- 服务端不支持所需表示\n    409 （conflict）- 通用冲突\n    412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）\n    415 （unsupported media type）- 接受到的表示不受支持\n    500 （internal server error）- 通用错误响应\n    503 （Service Unavailable）- 服务当前无法处理请求\n**DELETE**\n\n    不安全但幂等\n    删除资源\n    200 （OK）- 资源已被删除\n    301 （Moved Permanently）- 资源的URI已更改\n    303 （See Other）- 其他，如负载均衡\n    400 （bad request）- 指代坏请求\n    404 （not found）- 资源不存在\n    409 （conflict）- 通用冲突\n    500 （internal server error）- 通用错误响应\n    503 （Service Unavailable）- 服务端当前无法处理请求\n\n# 服务器回应\n\n- 不要返回纯本文\n\nAPI 返回的数据格式，不应该是纯文本，而应该是一个 JSON 对象，因为这样才能返回标准的结构化数据。所以，服务器回应的 HTTP 头的`Content-Type`属性要设为`application/json`。\n\n客户端请求时，也要明确告诉服务器，可以接受 JSON 格式，即请求的 HTTP 头的`ACCEPT`属性也要设成`application/json`。下面是一个例子\n\n    GET /orders/2 HTTP/1.1 \n    Accept: application/json\n\n- 发生错误时，不要返回 200 状态码\n有一种不恰当的做法是，即使发生错误，也返回200状态码，把错误信息放在数据体里面，就像下面这样。\n\n    HTTP/1.1 200 OK\n    Content-Type: application/json\n\n    {\n    \"status\": \"failure\",\n    \"data\": {\n        \"error\": \"Expected at least two items in list.\"\n    }\n    }\n\n上面代码中，解析数据体以后，才能得知操作失败。\n\n这张做法实际上取消了状态码，这是完全不可取的。正确的做法是，状态码反映发生的错误，具体的错误信息放在数据体里面返回。下面是一个例子。\n\n    HTTP/1.1 400 Bad Request\n    Content-Type: application/json\n\n    {\n    \"error\": \"Invalid payoad.\",\n    \"detail\": {\n        \"surname\": \"This field is required.\"\n        }\n    }\n\n","source":"_posts/RESTful.md","raw":"---\ntitle: RESTful API\ndate: 2019-08-27 09:19:45\ntags:\n---\n\n# URL 设计\n\n- 动词 + 宾语\n\nRESTful 的核心思想就是，客户端发出的数据操作指令都是\"动词 + 宾语\"的结构。比如，`GET /articles`这个命令，`GET`是动词，`/articles`是宾语\n\n动词通常就是五种 HTTP 方法，对应 CRUD 操作。\n\n    GET：读取（Read）\n    POST：新建（Create）\n    PUT：更新（Update）\n    PATCH：更新（Update），通常是部分更新\n    DELETE：删除（Delete）\n根据 HTTP 规范，动词一律大写。\n\n- 动词的覆盖\n有些客户端只能使用`GET`和`POST`这两种方法。服务器必须接受`POST`模拟其他三个方法（`PUT`、`PATCH`、`DELETE`）。\n\n这时，客户端发出的 HTTP 请求，要加上`X-HTTP-Method-Override`属性，告诉服务器应该使用哪一个动词，覆盖`POST`方法。\n\n    POST /api/Person/4 HTTP/1.1  \n    X-HTTP-Method-Override: PUT\n\n上面代码中，`X-HTTP-Method-Override`指定本次请求的方法是PUT，而不是POST。\n\n- 宾语必须是名词\n宾语就是 API 的 URL，是 HTTP 动词作用的对象。它应该是名词，不能是动词。比如，`/articles`这个 URL 就是正确的，而下面的 URL 不是名词，所以都是错误的。\n\n\n    /getAllCars\n    /createNewCar\n    /deleteAllRedCars\n\n- 复数 URL\n\n既然 URL 是名词，那么应该使用复数，还是单数？\n\n这没有统一的规定，但是常见的操作是读取一个集合，比如`GET /articles`（读取所有文章），这里明显应该是复数。\n\n为了统一起见，建议都使用复数 URL，比如`GET /articles/2`要好于`GET /article/2`。\n\n\n- 避免多级 URL\n\n常见的情况是，资源需要多级分类，因此很容易写出多级的 URL，比如获取某个作者的某一类文章。\n\n    GET /authors/12/categories/2\n\n这种 URL 不利于扩展，语义也不明确，往往要想一会，才能明白含义。\n\n更好的做法是，除了第一级，其他级别都用查询字符串表达。\n\n    GET /authors/12?categories=2\n\n下面是另一个例子，查询已发布的文章。你可能会设计成下面的 URL。\n\n    GET /articles?published=true\n\n`POST`和`PUT`在创建资源的区别在于，所创建的资源的名称(URI)是否由客户端决定。 例如为我的博文增加一个java的分类，生成的路径就是分类名`/categories/java`，那么就可以采用PUT方法。不过很多人直接把POST、GET、PUT、DELETE直接对应上CRUD，例如在一个典型的rails实现的RESTful应用中就是这么做的。\n\n# 状态码\n\n- 状态码必须精确\n客户端的每一次请求，服务器都必须给出回应。回应包括 HTTP 状态码和数据两部分。\n\nHTTP 状态码就是一个三位数，分成五个类别。\n\n    1xx：相关信息\n    2xx：操作成功\n    3xx：重定向\n    4xx：客户端错误\n    5xx：服务器错误\n\n**GET**\n\n    安全且幂等\n    获取表示\n    变更时获取表示（缓存）\n    200（OK） - 表示已在响应中发出\n    204（无内容） - 资源有空表示\n    301（Moved Permanently） - 资源的URI已被更新\n    303（See Other） - 其他（如，负载均衡）\n    304（not modified）- 资源未更改（缓存）\n    400 （bad request）- 指代坏请求（如，参数错误）\n    404 （not found）- 资源不存在\n    406 （not acceptable）- 服务端不支持所需表示\n    500 （internal server error）- 通用错误响应\n    503 （Service Unavailable）- 服务端当前无法处理请求\n\n**POST**\n\n    不安全且不幂等\n    使用服务端管理的（自动产生）的实例号创建资源\n    创建子资源\n    部分更新资源\n    如果没有被修改，则不过更新资源（乐观锁）\n    200（OK）- 如果现有资源已被更改\n    201（created）- 如果新资源被创建\n    202（accepted）- 已接受处理请求但尚未完成（异步处理）\n    301（Moved Permanently）- 资源的URI被更新\n    303（See Other）- 其他（如，负载均衡）\n    400（bad request）- 指代坏请求\n    404 （not found）- 资源不存在\n    406 （not acceptable）- 服务端不支持所需表示\n    409 （conflict）- 通用冲突\n    412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）\n    415 （unsupported media type）- 接受到的表示不受支持\n    500 （internal server error）- 通用错误响应\n    503 （Service Unavailable）- 服务当前无法处理请求\n**PUT**\n\n    不安全但幂等\n    用客户端管理的实例号创建一个资源\n    通过替换的方式更新资源\n    如果未被修改，则更新资源（乐观锁）\n    200 （OK）- 如果已存在资源被更改\n    201 （created）- 如果新资源被创建\n    301（Moved Permanently）- 资源的URI已更改\n    303 （See Other）- 其他（如，负载均衡）\n    400 （bad request）- 指代坏请求\n    404 （not found）- 资源不存在\n    406 （not acceptable）- 服务端不支持所需表示\n    409 （conflict）- 通用冲突\n    412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）\n    415 （unsupported media type）- 接受到的表示不受支持\n    500 （internal server error）- 通用错误响应\n    503 （Service Unavailable）- 服务当前无法处理请求\n**DELETE**\n\n    不安全但幂等\n    删除资源\n    200 （OK）- 资源已被删除\n    301 （Moved Permanently）- 资源的URI已更改\n    303 （See Other）- 其他，如负载均衡\n    400 （bad request）- 指代坏请求\n    404 （not found）- 资源不存在\n    409 （conflict）- 通用冲突\n    500 （internal server error）- 通用错误响应\n    503 （Service Unavailable）- 服务端当前无法处理请求\n\n# 服务器回应\n\n- 不要返回纯本文\n\nAPI 返回的数据格式，不应该是纯文本，而应该是一个 JSON 对象，因为这样才能返回标准的结构化数据。所以，服务器回应的 HTTP 头的`Content-Type`属性要设为`application/json`。\n\n客户端请求时，也要明确告诉服务器，可以接受 JSON 格式，即请求的 HTTP 头的`ACCEPT`属性也要设成`application/json`。下面是一个例子\n\n    GET /orders/2 HTTP/1.1 \n    Accept: application/json\n\n- 发生错误时，不要返回 200 状态码\n有一种不恰当的做法是，即使发生错误，也返回200状态码，把错误信息放在数据体里面，就像下面这样。\n\n    HTTP/1.1 200 OK\n    Content-Type: application/json\n\n    {\n    \"status\": \"failure\",\n    \"data\": {\n        \"error\": \"Expected at least two items in list.\"\n    }\n    }\n\n上面代码中，解析数据体以后，才能得知操作失败。\n\n这张做法实际上取消了状态码，这是完全不可取的。正确的做法是，状态码反映发生的错误，具体的错误信息放在数据体里面返回。下面是一个例子。\n\n    HTTP/1.1 400 Bad Request\n    Content-Type: application/json\n\n    {\n    \"error\": \"Invalid payoad.\",\n    \"detail\": {\n        \"surname\": \"This field is required.\"\n        }\n    }\n\n","slug":"RESTful","published":1,"updated":"2021-04-22T03:43:26.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysi000xko9brutwf1yp","content":"<h1 id=\"URL-设计\"><a href=\"#URL-设计\" class=\"headerlink\" title=\"URL 设计\"></a>URL 设计</h1><ul>\n<li>动词 + 宾语</li>\n</ul>\n<p>RESTful 的核心思想就是，客户端发出的数据操作指令都是”动词 + 宾语”的结构。比如，<code>GET /articles</code>这个命令，<code>GET</code>是动词，<code>/articles</code>是宾语</p>\n<p>动词通常就是五种 HTTP 方法，对应 CRUD 操作。</p>\n<pre><code>GET：读取（Read）\nPOST：新建（Create）\nPUT：更新（Update）\nPATCH：更新（Update），通常是部分更新\nDELETE：删除（Delete）</code></pre><p>根据 HTTP 规范，动词一律大写。</p>\n<ul>\n<li>动词的覆盖<br>有些客户端只能使用<code>GET</code>和<code>POST</code>这两种方法。服务器必须接受<code>POST</code>模拟其他三个方法（<code>PUT</code>、<code>PATCH</code>、<code>DELETE</code>）。</li>\n</ul>\n<p>这时，客户端发出的 HTTP 请求，要加上<code>X-HTTP-Method-Override</code>属性，告诉服务器应该使用哪一个动词，覆盖<code>POST</code>方法。</p>\n<pre><code>POST /api/Person/4 HTTP/1.1  \nX-HTTP-Method-Override: PUT</code></pre><p>上面代码中，<code>X-HTTP-Method-Override</code>指定本次请求的方法是PUT，而不是POST。</p>\n<ul>\n<li>宾语必须是名词<br>宾语就是 API 的 URL，是 HTTP 动词作用的对象。它应该是名词，不能是动词。比如，<code>/articles</code>这个 URL 就是正确的，而下面的 URL 不是名词，所以都是错误的。</li>\n</ul>\n<pre><code>/getAllCars\n/createNewCar\n/deleteAllRedCars</code></pre><ul>\n<li>复数 URL</li>\n</ul>\n<p>既然 URL 是名词，那么应该使用复数，还是单数？</p>\n<p>这没有统一的规定，但是常见的操作是读取一个集合，比如<code>GET /articles</code>（读取所有文章），这里明显应该是复数。</p>\n<p>为了统一起见，建议都使用复数 URL，比如<code>GET /articles/2</code>要好于<code>GET /article/2</code>。</p>\n<ul>\n<li>避免多级 URL</li>\n</ul>\n<p>常见的情况是，资源需要多级分类，因此很容易写出多级的 URL，比如获取某个作者的某一类文章。</p>\n<pre><code>GET /authors/12/categories/2</code></pre><p>这种 URL 不利于扩展，语义也不明确，往往要想一会，才能明白含义。</p>\n<p>更好的做法是，除了第一级，其他级别都用查询字符串表达。</p>\n<pre><code>GET /authors/12?categories=2</code></pre><p>下面是另一个例子，查询已发布的文章。你可能会设计成下面的 URL。</p>\n<pre><code>GET /articles?published=true</code></pre><p><code>POST</code>和<code>PUT</code>在创建资源的区别在于，所创建的资源的名称(URI)是否由客户端决定。 例如为我的博文增加一个java的分类，生成的路径就是分类名<code>/categories/java</code>，那么就可以采用PUT方法。不过很多人直接把POST、GET、PUT、DELETE直接对应上CRUD，例如在一个典型的rails实现的RESTful应用中就是这么做的。</p>\n<h1 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h1><ul>\n<li>状态码必须精确<br>客户端的每一次请求，服务器都必须给出回应。回应包括 HTTP 状态码和数据两部分。</li>\n</ul>\n<p>HTTP 状态码就是一个三位数，分成五个类别。</p>\n<pre><code>1xx：相关信息\n2xx：操作成功\n3xx：重定向\n4xx：客户端错误\n5xx：服务器错误</code></pre><p><strong>GET</strong></p>\n<pre><code>安全且幂等\n获取表示\n变更时获取表示（缓存）\n200（OK） - 表示已在响应中发出\n204（无内容） - 资源有空表示\n301（Moved Permanently） - 资源的URI已被更新\n303（See Other） - 其他（如，负载均衡）\n304（not modified）- 资源未更改（缓存）\n400 （bad request）- 指代坏请求（如，参数错误）\n404 （not found）- 资源不存在\n406 （not acceptable）- 服务端不支持所需表示\n500 （internal server error）- 通用错误响应\n503 （Service Unavailable）- 服务端当前无法处理请求</code></pre><p><strong>POST</strong></p>\n<pre><code>不安全且不幂等\n使用服务端管理的（自动产生）的实例号创建资源\n创建子资源\n部分更新资源\n如果没有被修改，则不过更新资源（乐观锁）\n200（OK）- 如果现有资源已被更改\n201（created）- 如果新资源被创建\n202（accepted）- 已接受处理请求但尚未完成（异步处理）\n301（Moved Permanently）- 资源的URI被更新\n303（See Other）- 其他（如，负载均衡）\n400（bad request）- 指代坏请求\n404 （not found）- 资源不存在\n406 （not acceptable）- 服务端不支持所需表示\n409 （conflict）- 通用冲突\n412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）\n415 （unsupported media type）- 接受到的表示不受支持\n500 （internal server error）- 通用错误响应\n503 （Service Unavailable）- 服务当前无法处理请求</code></pre><p><strong>PUT</strong></p>\n<pre><code>不安全但幂等\n用客户端管理的实例号创建一个资源\n通过替换的方式更新资源\n如果未被修改，则更新资源（乐观锁）\n200 （OK）- 如果已存在资源被更改\n201 （created）- 如果新资源被创建\n301（Moved Permanently）- 资源的URI已更改\n303 （See Other）- 其他（如，负载均衡）\n400 （bad request）- 指代坏请求\n404 （not found）- 资源不存在\n406 （not acceptable）- 服务端不支持所需表示\n409 （conflict）- 通用冲突\n412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）\n415 （unsupported media type）- 接受到的表示不受支持\n500 （internal server error）- 通用错误响应\n503 （Service Unavailable）- 服务当前无法处理请求</code></pre><p><strong>DELETE</strong></p>\n<pre><code>不安全但幂等\n删除资源\n200 （OK）- 资源已被删除\n301 （Moved Permanently）- 资源的URI已更改\n303 （See Other）- 其他，如负载均衡\n400 （bad request）- 指代坏请求\n404 （not found）- 资源不存在\n409 （conflict）- 通用冲突\n500 （internal server error）- 通用错误响应\n503 （Service Unavailable）- 服务端当前无法处理请求</code></pre><h1 id=\"服务器回应\"><a href=\"#服务器回应\" class=\"headerlink\" title=\"服务器回应\"></a>服务器回应</h1><ul>\n<li>不要返回纯本文</li>\n</ul>\n<p>API 返回的数据格式，不应该是纯文本，而应该是一个 JSON 对象，因为这样才能返回标准的结构化数据。所以，服务器回应的 HTTP 头的<code>Content-Type</code>属性要设为<code>application/json</code>。</p>\n<p>客户端请求时，也要明确告诉服务器，可以接受 JSON 格式，即请求的 HTTP 头的<code>ACCEPT</code>属性也要设成<code>application/json</code>。下面是一个例子</p>\n<pre><code>GET /orders/2 HTTP/1.1 \nAccept: application/json</code></pre><ul>\n<li><p>发生错误时，不要返回 200 状态码<br>有一种不恰当的做法是，即使发生错误，也返回200状态码，把错误信息放在数据体里面，就像下面这样。</p>\n<p>  HTTP/1.1 200 OK<br>  Content-Type: application/json</p>\n<p>  {<br>  “status”: “failure”,<br>  “data”: {</p>\n<pre><code>&quot;error&quot;: &quot;Expected at least two items in list.&quot;</code></pre><p>  }<br>  }</p>\n</li>\n</ul>\n<p>上面代码中，解析数据体以后，才能得知操作失败。</p>\n<p>这张做法实际上取消了状态码，这是完全不可取的。正确的做法是，状态码反映发生的错误，具体的错误信息放在数据体里面返回。下面是一个例子。</p>\n<pre><code>HTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{\n&quot;error&quot;: &quot;Invalid payoad.&quot;,\n&quot;detail&quot;: {\n    &quot;surname&quot;: &quot;This field is required.&quot;\n    }\n}</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"URL-设计\"><a href=\"#URL-设计\" class=\"headerlink\" title=\"URL 设计\"></a>URL 设计</h1><ul>\n<li>动词 + 宾语</li>\n</ul>\n<p>RESTful 的核心思想就是，客户端发出的数据操作指令都是”动词 + 宾语”的结构。比如，<code>GET /articles</code>这个命令，<code>GET</code>是动词，<code>/articles</code>是宾语</p>\n<p>动词通常就是五种 HTTP 方法，对应 CRUD 操作。</p>\n<pre><code>GET：读取（Read）\nPOST：新建（Create）\nPUT：更新（Update）\nPATCH：更新（Update），通常是部分更新\nDELETE：删除（Delete）</code></pre><p>根据 HTTP 规范，动词一律大写。</p>\n<ul>\n<li>动词的覆盖<br>有些客户端只能使用<code>GET</code>和<code>POST</code>这两种方法。服务器必须接受<code>POST</code>模拟其他三个方法（<code>PUT</code>、<code>PATCH</code>、<code>DELETE</code>）。</li>\n</ul>\n<p>这时，客户端发出的 HTTP 请求，要加上<code>X-HTTP-Method-Override</code>属性，告诉服务器应该使用哪一个动词，覆盖<code>POST</code>方法。</p>\n<pre><code>POST /api/Person/4 HTTP/1.1  \nX-HTTP-Method-Override: PUT</code></pre><p>上面代码中，<code>X-HTTP-Method-Override</code>指定本次请求的方法是PUT，而不是POST。</p>\n<ul>\n<li>宾语必须是名词<br>宾语就是 API 的 URL，是 HTTP 动词作用的对象。它应该是名词，不能是动词。比如，<code>/articles</code>这个 URL 就是正确的，而下面的 URL 不是名词，所以都是错误的。</li>\n</ul>\n<pre><code>/getAllCars\n/createNewCar\n/deleteAllRedCars</code></pre><ul>\n<li>复数 URL</li>\n</ul>\n<p>既然 URL 是名词，那么应该使用复数，还是单数？</p>\n<p>这没有统一的规定，但是常见的操作是读取一个集合，比如<code>GET /articles</code>（读取所有文章），这里明显应该是复数。</p>\n<p>为了统一起见，建议都使用复数 URL，比如<code>GET /articles/2</code>要好于<code>GET /article/2</code>。</p>\n<ul>\n<li>避免多级 URL</li>\n</ul>\n<p>常见的情况是，资源需要多级分类，因此很容易写出多级的 URL，比如获取某个作者的某一类文章。</p>\n<pre><code>GET /authors/12/categories/2</code></pre><p>这种 URL 不利于扩展，语义也不明确，往往要想一会，才能明白含义。</p>\n<p>更好的做法是，除了第一级，其他级别都用查询字符串表达。</p>\n<pre><code>GET /authors/12?categories=2</code></pre><p>下面是另一个例子，查询已发布的文章。你可能会设计成下面的 URL。</p>\n<pre><code>GET /articles?published=true</code></pre><p><code>POST</code>和<code>PUT</code>在创建资源的区别在于，所创建的资源的名称(URI)是否由客户端决定。 例如为我的博文增加一个java的分类，生成的路径就是分类名<code>/categories/java</code>，那么就可以采用PUT方法。不过很多人直接把POST、GET、PUT、DELETE直接对应上CRUD，例如在一个典型的rails实现的RESTful应用中就是这么做的。</p>\n<h1 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h1><ul>\n<li>状态码必须精确<br>客户端的每一次请求，服务器都必须给出回应。回应包括 HTTP 状态码和数据两部分。</li>\n</ul>\n<p>HTTP 状态码就是一个三位数，分成五个类别。</p>\n<pre><code>1xx：相关信息\n2xx：操作成功\n3xx：重定向\n4xx：客户端错误\n5xx：服务器错误</code></pre><p><strong>GET</strong></p>\n<pre><code>安全且幂等\n获取表示\n变更时获取表示（缓存）\n200（OK） - 表示已在响应中发出\n204（无内容） - 资源有空表示\n301（Moved Permanently） - 资源的URI已被更新\n303（See Other） - 其他（如，负载均衡）\n304（not modified）- 资源未更改（缓存）\n400 （bad request）- 指代坏请求（如，参数错误）\n404 （not found）- 资源不存在\n406 （not acceptable）- 服务端不支持所需表示\n500 （internal server error）- 通用错误响应\n503 （Service Unavailable）- 服务端当前无法处理请求</code></pre><p><strong>POST</strong></p>\n<pre><code>不安全且不幂等\n使用服务端管理的（自动产生）的实例号创建资源\n创建子资源\n部分更新资源\n如果没有被修改，则不过更新资源（乐观锁）\n200（OK）- 如果现有资源已被更改\n201（created）- 如果新资源被创建\n202（accepted）- 已接受处理请求但尚未完成（异步处理）\n301（Moved Permanently）- 资源的URI被更新\n303（See Other）- 其他（如，负载均衡）\n400（bad request）- 指代坏请求\n404 （not found）- 资源不存在\n406 （not acceptable）- 服务端不支持所需表示\n409 （conflict）- 通用冲突\n412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）\n415 （unsupported media type）- 接受到的表示不受支持\n500 （internal server error）- 通用错误响应\n503 （Service Unavailable）- 服务当前无法处理请求</code></pre><p><strong>PUT</strong></p>\n<pre><code>不安全但幂等\n用客户端管理的实例号创建一个资源\n通过替换的方式更新资源\n如果未被修改，则更新资源（乐观锁）\n200 （OK）- 如果已存在资源被更改\n201 （created）- 如果新资源被创建\n301（Moved Permanently）- 资源的URI已更改\n303 （See Other）- 其他（如，负载均衡）\n400 （bad request）- 指代坏请求\n404 （not found）- 资源不存在\n406 （not acceptable）- 服务端不支持所需表示\n409 （conflict）- 通用冲突\n412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）\n415 （unsupported media type）- 接受到的表示不受支持\n500 （internal server error）- 通用错误响应\n503 （Service Unavailable）- 服务当前无法处理请求</code></pre><p><strong>DELETE</strong></p>\n<pre><code>不安全但幂等\n删除资源\n200 （OK）- 资源已被删除\n301 （Moved Permanently）- 资源的URI已更改\n303 （See Other）- 其他，如负载均衡\n400 （bad request）- 指代坏请求\n404 （not found）- 资源不存在\n409 （conflict）- 通用冲突\n500 （internal server error）- 通用错误响应\n503 （Service Unavailable）- 服务端当前无法处理请求</code></pre><h1 id=\"服务器回应\"><a href=\"#服务器回应\" class=\"headerlink\" title=\"服务器回应\"></a>服务器回应</h1><ul>\n<li>不要返回纯本文</li>\n</ul>\n<p>API 返回的数据格式，不应该是纯文本，而应该是一个 JSON 对象，因为这样才能返回标准的结构化数据。所以，服务器回应的 HTTP 头的<code>Content-Type</code>属性要设为<code>application/json</code>。</p>\n<p>客户端请求时，也要明确告诉服务器，可以接受 JSON 格式，即请求的 HTTP 头的<code>ACCEPT</code>属性也要设成<code>application/json</code>。下面是一个例子</p>\n<pre><code>GET /orders/2 HTTP/1.1 \nAccept: application/json</code></pre><ul>\n<li><p>发生错误时，不要返回 200 状态码<br>有一种不恰当的做法是，即使发生错误，也返回200状态码，把错误信息放在数据体里面，就像下面这样。</p>\n<p>  HTTP/1.1 200 OK<br>  Content-Type: application/json</p>\n<p>  {<br>  “status”: “failure”,<br>  “data”: {</p>\n<pre><code>&quot;error&quot;: &quot;Expected at least two items in list.&quot;</code></pre><p>  }<br>  }</p>\n</li>\n</ul>\n<p>上面代码中，解析数据体以后，才能得知操作失败。</p>\n<p>这张做法实际上取消了状态码，这是完全不可取的。正确的做法是，状态码反映发生的错误，具体的错误信息放在数据体里面返回。下面是一个例子。</p>\n<pre><code>HTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{\n&quot;error&quot;: &quot;Invalid payoad.&quot;,\n&quot;detail&quot;: {\n    &quot;surname&quot;: &quot;This field is required.&quot;\n    }\n}</code></pre>"},{"title":"RabbitMq","date":"2019-08-15T02:46:58.000Z","_content":"\n# 基于Docker安装RibbitMq\n\n```text\nversion: '3.1'\nservices:\n  rabbitmq:\n    restart: always\n    image: rabbitmq:management\n    container_name: rabbitmq\n    ports:\n      - 5672:5672\n      - 15672:15672\n    environment:\n      TZ: Asia/Shanghai\n      RABBITMQ_DEFAULT_USER: rabbit\n      RABBITMQ_DEFAULT_PASS: 123456\n    volumes:\n      - ./data:/var/lib/rabbitmq\n```\n\n# RabbitMQ WebUI\n\n访问地址： http://ip:15672\n\n# 最佳实践\n\n## messageProvider\n\n**POM**\n```JAVA\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-amqp</artifactId>\n</dependency>\n```\n\n**application.yml**\n```text\nspring:\n  application:\n    name: spring-boot-ribbitmq-provider\n  rabbitmq:\n    host: 192.168.2.129\n    port: 5672\n    username: rabbit\n    password: 123456\n```\n\n**config**\n创建一个名为`helloRabbit`的队列\n\n```java\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/5/31 11:59\n */\n@Configuration\npublic class RabbitMQConfiguration {\n    @Bean\n    public Queue queue() {\n        return new Queue(\"helloRabbit\");\n    }\n}\n```\n\n**消息推送**\n```java\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Date;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/5/31 12:01\n */\n\n@Component\npublic class RabbitProvider {\n\n    @Autowired\n    private AmqpTemplate amqpTemplate;\n\n    public void send() {\n        String context = \"hello\" + new Date();\n        System.out.println(\"Provider: \" + context);\n        amqpTemplate.convertAndSend(\"helloRabbit\", context);\n    }\n}\n```\n\n## messageConsumer\n\n\n**POM**\n```JAVA\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-amqp</artifactId>\n</dependency>\n```\n\n**application.yml**\n```text\nspring:\n  application:\n    name: spring-boot-ribbitmq-consumer\n  rabbitmq:\n    host: 192.168.2.129\n    port: 5672\n    username: rabbit\n    password: 123456\n```\n\n**消息接收者**\n```java\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/5/31 13:49\n */\n\n@Component\n@RabbitListener(queues = \"helloRabbit\")\npublic class RabbitConsumer {\n    @RabbitHandler\n    public void process(String message) {\n        System.out.println(\"Consumer: \" + message);\n    }\n}\n```\n`@RabbitListener(queues = \"helloRabbit\")`:监听的队列","source":"_posts/RabbitMq.md","raw":"---\ntitle: RabbitMq\ndate: 2019-08-15 10:46:58\ntags:\n    - 消息队列\n---\n\n# 基于Docker安装RibbitMq\n\n```text\nversion: '3.1'\nservices:\n  rabbitmq:\n    restart: always\n    image: rabbitmq:management\n    container_name: rabbitmq\n    ports:\n      - 5672:5672\n      - 15672:15672\n    environment:\n      TZ: Asia/Shanghai\n      RABBITMQ_DEFAULT_USER: rabbit\n      RABBITMQ_DEFAULT_PASS: 123456\n    volumes:\n      - ./data:/var/lib/rabbitmq\n```\n\n# RabbitMQ WebUI\n\n访问地址： http://ip:15672\n\n# 最佳实践\n\n## messageProvider\n\n**POM**\n```JAVA\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-amqp</artifactId>\n</dependency>\n```\n\n**application.yml**\n```text\nspring:\n  application:\n    name: spring-boot-ribbitmq-provider\n  rabbitmq:\n    host: 192.168.2.129\n    port: 5672\n    username: rabbit\n    password: 123456\n```\n\n**config**\n创建一个名为`helloRabbit`的队列\n\n```java\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/5/31 11:59\n */\n@Configuration\npublic class RabbitMQConfiguration {\n    @Bean\n    public Queue queue() {\n        return new Queue(\"helloRabbit\");\n    }\n}\n```\n\n**消息推送**\n```java\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Date;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/5/31 12:01\n */\n\n@Component\npublic class RabbitProvider {\n\n    @Autowired\n    private AmqpTemplate amqpTemplate;\n\n    public void send() {\n        String context = \"hello\" + new Date();\n        System.out.println(\"Provider: \" + context);\n        amqpTemplate.convertAndSend(\"helloRabbit\", context);\n    }\n}\n```\n\n## messageConsumer\n\n\n**POM**\n```JAVA\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-amqp</artifactId>\n</dependency>\n```\n\n**application.yml**\n```text\nspring:\n  application:\n    name: spring-boot-ribbitmq-consumer\n  rabbitmq:\n    host: 192.168.2.129\n    port: 5672\n    username: rabbit\n    password: 123456\n```\n\n**消息接收者**\n```java\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/5/31 13:49\n */\n\n@Component\n@RabbitListener(queues = \"helloRabbit\")\npublic class RabbitConsumer {\n    @RabbitHandler\n    public void process(String message) {\n        System.out.println(\"Consumer: \" + message);\n    }\n}\n```\n`@RabbitListener(queues = \"helloRabbit\")`:监听的队列","slug":"RabbitMq","published":1,"updated":"2021-04-22T03:43:26.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysj000yko9bsmr65ogt","content":"<h1 id=\"基于Docker安装RibbitMq\"><a href=\"#基于Docker安装RibbitMq\" class=\"headerlink\" title=\"基于Docker安装RibbitMq\"></a>基于Docker安装RibbitMq</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &apos;3.1&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  rabbitmq:</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    image: rabbitmq:management</span><br><span class=\"line\">    container_name: rabbitmq</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 5672:5672</span><br><span class=\"line\">      - 15672:15672</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: Asia/Shanghai</span><br><span class=\"line\">      RABBITMQ_DEFAULT_USER: rabbit</span><br><span class=\"line\">      RABBITMQ_DEFAULT_PASS: 123456</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./data:/var/lib/rabbitmq</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"RabbitMQ-WebUI\"><a href=\"#RabbitMQ-WebUI\" class=\"headerlink\" title=\"RabbitMQ WebUI\"></a>RabbitMQ WebUI</h1><p>访问地址： <a href=\"http://ip:15672\" target=\"_blank\" rel=\"noopener\">http://ip:15672</a></p>\n<h1 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h1><h2 id=\"messageProvider\"><a href=\"#messageProvider\" class=\"headerlink\" title=\"messageProvider\"></a>messageProvider</h2><p><strong>POM</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: spring-boot-ribbitmq-provider</span><br><span class=\"line\">  rabbitmq:</span><br><span class=\"line\">    host: 192.168.2.129</span><br><span class=\"line\">    port: 5672</span><br><span class=\"line\">    username: rabbit</span><br><span class=\"line\">    password: 123456</span><br></pre></td></tr></table></figure>\n\n<p><strong>config</strong><br>创建一个名为<code>helloRabbit</code>的队列</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/5/31 11:59</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitMQConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">queue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"helloRabbit\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消息推送</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/5/31 12:01</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitProvider</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate amqpTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">send</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String context = <span class=\"string\">\"hello\"</span> + <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Provider: \"</span> + context);</span><br><span class=\"line\">        amqpTemplate.convertAndSend(<span class=\"string\">\"helloRabbit\"</span>, context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"messageConsumer\"><a href=\"#messageConsumer\" class=\"headerlink\" title=\"messageConsumer\"></a>messageConsumer</h2><p><strong>POM</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: spring-boot-ribbitmq-consumer</span><br><span class=\"line\">  rabbitmq:</span><br><span class=\"line\">    host: 192.168.2.129</span><br><span class=\"line\">    port: 5672</span><br><span class=\"line\">    username: rabbit</span><br><span class=\"line\">    password: 123456</span><br></pre></td></tr></table></figure>\n\n<p><strong>消息接收者</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/5/31 13:49</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"helloRabbit\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitConsumer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Consumer: \"</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>@RabbitListener(queues = &quot;helloRabbit&quot;)</code>:监听的队列</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基于Docker安装RibbitMq\"><a href=\"#基于Docker安装RibbitMq\" class=\"headerlink\" title=\"基于Docker安装RibbitMq\"></a>基于Docker安装RibbitMq</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &apos;3.1&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  rabbitmq:</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    image: rabbitmq:management</span><br><span class=\"line\">    container_name: rabbitmq</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 5672:5672</span><br><span class=\"line\">      - 15672:15672</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: Asia/Shanghai</span><br><span class=\"line\">      RABBITMQ_DEFAULT_USER: rabbit</span><br><span class=\"line\">      RABBITMQ_DEFAULT_PASS: 123456</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./data:/var/lib/rabbitmq</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"RabbitMQ-WebUI\"><a href=\"#RabbitMQ-WebUI\" class=\"headerlink\" title=\"RabbitMQ WebUI\"></a>RabbitMQ WebUI</h1><p>访问地址： <a href=\"http://ip:15672\" target=\"_blank\" rel=\"noopener\">http://ip:15672</a></p>\n<h1 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h1><h2 id=\"messageProvider\"><a href=\"#messageProvider\" class=\"headerlink\" title=\"messageProvider\"></a>messageProvider</h2><p><strong>POM</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: spring-boot-ribbitmq-provider</span><br><span class=\"line\">  rabbitmq:</span><br><span class=\"line\">    host: 192.168.2.129</span><br><span class=\"line\">    port: 5672</span><br><span class=\"line\">    username: rabbit</span><br><span class=\"line\">    password: 123456</span><br></pre></td></tr></table></figure>\n\n<p><strong>config</strong><br>创建一个名为<code>helloRabbit</code>的队列</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/5/31 11:59</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitMQConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">queue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"helloRabbit\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消息推送</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/5/31 12:01</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitProvider</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate amqpTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">send</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String context = <span class=\"string\">\"hello\"</span> + <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Provider: \"</span> + context);</span><br><span class=\"line\">        amqpTemplate.convertAndSend(<span class=\"string\">\"helloRabbit\"</span>, context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"messageConsumer\"><a href=\"#messageConsumer\" class=\"headerlink\" title=\"messageConsumer\"></a>messageConsumer</h2><p><strong>POM</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: spring-boot-ribbitmq-consumer</span><br><span class=\"line\">  rabbitmq:</span><br><span class=\"line\">    host: 192.168.2.129</span><br><span class=\"line\">    port: 5672</span><br><span class=\"line\">    username: rabbit</span><br><span class=\"line\">    password: 123456</span><br></pre></td></tr></table></figure>\n\n<p><strong>消息接收者</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/5/31 13:49</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"helloRabbit\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitConsumer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Consumer: \"</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>@RabbitListener(queues = &quot;helloRabbit&quot;)</code>:监听的队列</p>\n"},{"title":"SSL免密登陆服务器","date":"2021-04-22T02:51:43.000Z","_content":"","source":"_posts/SSL免密登陆服务器.md","raw":"---\ntitle: SSL免密登陆服务器\ndate: 2021-04-22 10:51:43\ntags:\n---\n","slug":"SSL免密登陆服务器","published":1,"updated":"2021-04-22T03:43:26.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysk000zko9b01167yju","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Spring Aop","date":"2019-09-02T02:59:06.000Z","_content":"","source":"_posts/SpringAop.md","raw":"---\ntitle: Spring Aop\ndate: 2019-09-02 10:59:06\ntags:\n---\n","slug":"SpringAop","published":1,"updated":"2021-04-22T03:43:26.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysl0011ko9ba57u99hk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"RocketMq","date":"2019-08-15T02:49:08.000Z","_content":"\n# MQ背景&选型\n\n消息队列作为高并发系统的核心组件之一，能够帮助业务系统解构提升开发效率和系统稳定性。主要具有以下优势：\n\n- 削峰填谷（主要解决瞬时写压力大于应用服务能力导致消息丢失、系统奔溃等问题）\n- 系统解耦（解决不同重要程度、不同能力级别系统之间依赖导致一死全死）\n- 提升性能（当存在一对多调用时，可以发一条消息给消息系统，让消息系统通知相关系统）\n- 蓄流压测（线上有些链路不好压测，可以通过堆积一定量消息再放开来压测）\n\n目前主流的MQ主要是Rocketmq、kafka、Rabbitmq，Rocketmq相比于Rabbitmq、kafka具有主要优势特性有：\n- 支持事务型消息（消息发送和DB操作保持两方的最终一致性，rabbitmq和kafka不支持）\n- 支持结合rocketmq的多个系统之间数据最终一致性（多方事务，二方事务是前提）\n- 支持18个级别的延迟消息（rabbitmq和kafka不支持）\n- 支持指定次数和时间间隔的失败消息重发（kafka不支持，rabbitmq需要手动确认）\n- 支持consumer端tag过滤，减少不必要的网络传输（rabbitmq和kafka不支持）\n- 支持重复消费（rabbitmq不支持，kafka支持）\n\n# RocketMQ 特点\n\n- 支持严格的消息顺序\n- 支持 Topic 与 Queue 两种模式\n- 亿级消息堆积能力\n- 比较友好的分布式特性\n- 同时支持 Push 与 Pull 方式消费消息\n- 历经多次天猫双十一海量消息考验\n\n# 基于Docker安装RocketMq\n\n**docker-compose.yml**\n\n```\nversion: '3.5'\nservices:\n  rmqnamesrv:\n    image: foxiswho/rocketmq:server\n    container_name: rmqnamesrv\n    ports:\n      - 9876:9876\n    volumes:\n      - ./data/logs:/opt/logs\n      - ./data/store:/opt/store\n    networks:\n        rmq:\n          aliases:\n            - rmqnamesrv\n\n  rmqbroker:\n    image: foxiswho/rocketmq:broker\n    container_name: rmqbroker\n    ports:\n      - 10909:10909\n      - 10911:10911\n    volumes:\n      - ./data/logs:/opt/logs\n      - ./data/store:/opt/store\n      - ./data/brokerconf/broker.conf:/etc/rocketmq/broker.conf\n    environment:\n        NAMESRV_ADDR: \"rmqnamesrv:9876\"\n        JAVA_OPTS: \" -Duser.home=/opt\"\n        JAVA_OPT_EXT: \"-server -Xms128m -Xmx128m -Xmn128m\"\n    command: mqbroker -c /etc/rocketmq/broker.conf\n    depends_on:\n      - rmqnamesrv\n    networks:\n      rmq:\n        aliases:\n          - rmqbroker\n\n  rmqconsole:\n    image: styletang/rocketmq-console-ng\n    container_name: rmqconsole\n    ports:\n      - 8080:8080\n    environment:\n        JAVA_OPTS: \"-Drocketmq.namesrv.addr=rmqnamesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false\"\n    depends_on:\n      - rmqnamesrv\n    networks:\n      rmq:\n        aliases:\n          - rmqconsole\n\nnetworks:\n  rmq:\n    name: rmq\n    driver: bridge\n```\n**broker.conf**\nRocketMQ Broker 需要一个配置文件，按照上面的 Compose 配置，我们需要在 ./data/brokerconf/ 目录下创建一个名为 broker.conf 的配置文件，内容如下：\n\n```\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n\n\n# 所属集群名字\nbrokerClusterName=DefaultCluster\n\n# broker 名字，注意此处不同的配置文件填写的不一样，如果在 broker-a.properties 使用: broker-a,\n# 在 broker-b.properties 使用: broker-b\nbrokerName=broker-a\n\n# 0 表示 Master，> 0 表示 Slave\nbrokerId=0\n\n# nameServer地址，分号分割\n# namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876\n\n# 启动IP,如果 docker 报 com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to <192.168.0.120:10909> failed\n# 解决方式1 加上一句 producer.setVipChannelEnabled(false);，解决方式2 brokerIP1 设置宿主机IP，不要使用docker 内部IP\n# brokerIP1=192.168.0.253\n\n# 在发送消息时，自动创建服务器不存在的topic，默认创建的队列数\ndefaultTopicQueueNums=4\n\n# 是否允许 Broker 自动创建 Topic，建议线下开启，线上关闭 ！！！这里仔细看是 false，false，false\nautoCreateTopicEnable=true\n\n# 是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭\nautoCreateSubscriptionGroup=true\n\n# Broker 对外服务的监听端口\nlistenPort=10911\n\n# 删除文件时间点，默认凌晨4点\ndeleteWhen=04\n\n# 文件保留时间，默认48小时\nfileReservedTime=120\n\n# commitLog 每个文件的大小默认1G\nmapedFileSizeCommitLog=1073741824\n\n# ConsumeQueue 每个文件默认存 30W 条，根据业务情况调整\nmapedFileSizeConsumeQueue=300000\n\n# destroyMapedFileIntervalForcibly=120000\n# redeleteHangedFileInterval=120000\n# 检测物理文件磁盘空间\ndiskMaxUsedSpaceRatio=88\n# 存储路径\n# storePathRootDir=/home/ztztdata/rocketmq-all-4.1.0-incubating/store\n# commitLog 存储路径\n# storePathCommitLog=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/commitlog\n# 消费队列存储\n# storePathConsumeQueue=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/consumequeue\n# 消息索引存储路径\n# storePathIndex=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/index\n# checkpoint 文件存储路径\n# storeCheckpoint=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/checkpoint\n# abort 文件存储路径\n# abortFile=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/abort\n# 限制的消息大小\nmaxMessageSize=65536\n\n# flushCommitLogLeastPages=4\n# flushConsumeQueueLeastPages=2\n# flushCommitLogThoroughInterval=10000\n# flushConsumeQueueThoroughInterval=60000\n\n# Broker 的角色\n# - ASYNC_MASTER 异步复制Master\n# - SYNC_MASTER 同步双写Master\n# - SLAVE\nbrokerRole=ASYNC_MASTER\n\n# 刷盘方式\n# - ASYNC_FLUSH 异步刷盘\n# - SYNC_FLUSH 同步刷盘\nflushDiskType=ASYNC_FLUSH\n\n# 发消息线程池数量\n# sendMessageThreadPoolNums=128\n# 拉消息线程池数量\n# pullMessageThreadPoolNums=128\n```\n\n## RocketMQ 控制台\n访问 http://rmqIP:8080 登入控制台\n\n# 最佳实践\n\n## 基于`org.apache.rocketmq`包实例\n**添加依赖**\n```java\n<dependency>\n    <groupId>org.apache.rocketmq</groupId>\n    <artifactId>rocketmq-client</artifactId>\n    <version>4.1.0-incubating</version>\n</dependency>\n```\n**消息生产者**\n```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/8/15 14:41\n */\npublic class Producer {\n\n    public static void main(String[] args) {\n        DefaultMQProducer producer = new DefaultMQProducer(\"Producer\");\n        producer.setNamesrvAddr(\"47.101.135.160:9876\");\n        try {\n            producer.start();\n\n            Message msg = new Message(\"PushTopic\",\n                    \"push\",\n                    \"1\",\n                    \"Just for test.\".getBytes());\n\n            SendResult result = producer.send(msg);\n            System.out.println(\"id:\" + result.getMsgId() +\n                    \" result:\" + result.getSendStatus());\n\n            msg = new Message(\"PushTopic\",\n                    \"push\",\n                    \"2\",\n                    \"Just for test.\".getBytes());\n\n            result = producer.send(msg);\n            System.out.println(\"id:\" + result.getMsgId() +\n                    \" result:\" + result.getSendStatus());\n\n            msg = new Message(\"PushTopic\",\n                    \"push\",\n                    \"1\",\n                    \"Just for test.\".getBytes());\n\n            result = producer.send(msg);\n            System.out.println(\"id:\" + result.getMsgId() +\n                    \" result:\" + result.getSendStatus());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }finally{\n            producer.shutdown();\n        }\n    }\n}\n```\n\n**消息消费者**\n```java\n\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/8/15 14:45\n */\npublic class Consumer {\n    public static void main(String[] args) {\n        DefaultMQPushConsumer consumer =\n                new DefaultMQPushConsumer(\"PushConsumer\");\n        consumer.setNamesrvAddr(\"47.101.135.160:9876\");\n        try {\n            //订阅PushTopic下Tag为push的消息\n            consumer.subscribe(\"PushTopic\", \"push\");\n\n            //程序第一次启动从消息队列头取数据\n            consumer.setConsumeFromWhere(\n                    ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n            consumer.registerMessageListener(new MessageListenerConcurrently() {\n                                                 @Override\n                                                 public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> list, ConsumeConcurrentlyContext Context) {\n                                                     Message msg = list.get(0);\n//                            System.out.println(msg.toString());\n\n                                                     String topic = msg.getTopic();\n                                                     System.out.println(\"topic = \" + topic);\n                                                     byte[] body = msg.getBody();\n                                                     System.out.println(\"body:  \" + new String(body));\n                                                     String keys = msg.getKeys();\n                                                     System.out.println(\"keys = \" + keys);\n                                                     String tags = msg.getTags();\n                                                     System.out.println(\"tags = \" + tags);\n                                                     System.out.println(\"-----------------------------------------------\");\n\n                                                     return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n                                                 }\n                                             }\n            );\n            consumer.start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n## 基于com.alibaba.rocketmq包实例\n**添加依赖**\n```java\n<dependency>\n    <groupId>com.alibaba.rocketmq</groupId>\n    <artifactId>rocketmq-client</artifactId>\n    <version>3.5.9</version>\n</dependency>\n```\n\n**消息生产者**\n```java\n\nimport com.alibaba.rocketmq.client.exception.MQClientException;\nimport com.alibaba.rocketmq.client.producer.DefaultMQProducer;\n\n\n/**\n * @Author: 胡文良\n * @Date: 2019/8/15 15:01\n */\npublic class Producer {\n\n    /*\n     * Constructs a client instance with your account for accessing DefaultMQProducer\n     */\n    private static DefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\");\n    private static int initialState = 0;\n\n    private Producer() {\n\n    }\n\n    public static DefaultMQProducer getDefaultMQProducer(){\n        if(producer == null){\n            producer = new DefaultMQProducer(\"ProducerGroupName\");\n        }\n\n        if(initialState == 0){\n            producer.setNamesrvAddr(\"192.168.2.129:9876\");\n            try {\n                producer.start();\n            } catch (MQClientException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n                return null;\n            }\n\n            initialState = 1;\n        }\n\n        return producer;\n    }\n\n}\n```\n**测试类**\n\n```java\nimport com.alibaba.rocketmq.client.exception.MQBrokerException;\nimport com.alibaba.rocketmq.client.exception.MQClientException;\nimport com.alibaba.rocketmq.client.producer.DefaultMQProducer;\nimport com.alibaba.rocketmq.client.producer.SendResult;\nimport com.alibaba.rocketmq.common.message.Message;\nimport com.alibaba.rocketmq.remoting.exception.RemotingException;\nimport com.demo.demorocketmqprovider.aliProvider.Producer;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class DemoRocketmqProviderApplication implements CommandLineRunner {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoRocketmqProviderApplication.class, args);\n    }\n\n    @Override\n    public void run(String... args) {\n        // 获取消息生产者\n        DefaultMQProducer producer = Producer.getDefaultMQProducer();\n        try {\n            for (int i = 0; i < 2000; i++) {\n                Message msg = new Message(\n                        \"TopicTest1\",                   // topic\n                        \"TagA\",                         // tag\n                        \"OrderID00\" + i,                  // key\n                        (\"Hello MetaQ\" + i).getBytes());  // body\n                SendResult sendResult = producer.send(msg);\n                System.out.println(\"sendResult:\" + sendResult);\n            }\n        } catch (MQClientException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (RemotingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (MQBrokerException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (InterruptedException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n        producer.shutdown();\n\n    }\n}\n\n```\n\n**消息消费者**\n\n```java\n\nimport com.alibaba.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport com.alibaba.rocketmq.common.consumer.ConsumeFromWhere;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/8/15 15:02\n */\npublic class Consumer {\n\n    /*\n     * Constructs a client instance with your account for accessing DefaultMQConsumer\n     */\n    private static DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"ConsumerGroupName\");\n    private static int initialState = 0;\n\n    private Consumer() {\n\n    }\n\n    public static DefaultMQPushConsumer getDefaultMQPushConsumer(){\n        if(consumer == null){\n            consumer = new DefaultMQPushConsumer(\"ConsumerGroupName\");\n        }\n\n        if(initialState == 0){\n            consumer.setNamesrvAddr(\"192.168.2.129:9876\");\n            consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n            initialState = 1;\n        }\n\n        return consumer;\n    }\n\n}\n```\n\n**测试类**\n```java\nimport com.alibaba.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport com.alibaba.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport com.alibaba.rocketmq.client.exception.MQClientException;\nimport com.alibaba.rocketmq.common.message.MessageExt;\nimport com.demo.demorocketmqconsumer.aliConsumer.Consumer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\nimport java.util.List;\n\n@SpringBootApplication\npublic class DemoRocketmqConsumerApplication implements CommandLineRunner {\n\n    private static final Logger logger = LoggerFactory.getLogger(DemoRocketmqConsumerApplication.class);\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoRocketmqConsumerApplication.class, args);\n    }\n\n    @Override\n    public void run(String... args) {\n        // 获取消息生产者\n        DefaultMQPushConsumer consumer = Consumer.getDefaultMQPushConsumer();\n\n        // 订阅主体\n        try {\n            consumer.subscribe(\"TopicTest1\", \"*\");\n\n            consumer.registerMessageListener(new MessageListenerConcurrently() {\n\n                /**\n                 * * 默认msgs里唯独一条消息，能够通过设置consumeMessageBatchMaxSize參数来批量接收消息\n                 */\n                @Override\n                public ConsumeConcurrentlyStatus consumeMessage(\n                        List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n\n                    logger.info(\"currentThreadName:{} and Receive New Messages:{}\", Thread.currentThread().getName(), msgs);\n\n                    MessageExt msg = msgs.get(0);\n\n                    if (msg.getTopic().equals(\"TopicTest1\")) {\n                        // 运行TopicTest1的消费逻辑\n                        if (msg.getTags() != null && msg.getTags().equals(\"TagA\")) {\n                            // 运行TagA的消费\n                            logger.info(\"MsgBody:{}\", new String(msg.getBody()));\n                        } else if (msg.getTags() != null\n                                && msg.getTags().equals(\"TagC\")) {\n                            // 运行TagC的消费\n                        } else if (msg.getTags() != null\n                                && msg.getTags().equals(\"TagD\")) {\n                            // 运行TagD的消费\n                        }\n                    } else if (msg.getTopic().equals(\"TopicTest2\")) {\n                        // 运行TopicTest2的消费逻辑\n                    }\n\n                    return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n                }\n            });\n\n            /**\n             * Consumer对象在使用之前必须要调用start初始化。初始化一次就可以<br>\n             */\n            consumer.start();\n\n            logger.info(\"Consumer Started.\");\n        } catch (MQClientException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n\n        }\n    }\n}\n```","source":"_posts/RocketMq.md","raw":"---\ntitle: RocketMq\ndate: 2019-08-15 10:49:08\ntags:\n    - 中间件\n---\n\n# MQ背景&选型\n\n消息队列作为高并发系统的核心组件之一，能够帮助业务系统解构提升开发效率和系统稳定性。主要具有以下优势：\n\n- 削峰填谷（主要解决瞬时写压力大于应用服务能力导致消息丢失、系统奔溃等问题）\n- 系统解耦（解决不同重要程度、不同能力级别系统之间依赖导致一死全死）\n- 提升性能（当存在一对多调用时，可以发一条消息给消息系统，让消息系统通知相关系统）\n- 蓄流压测（线上有些链路不好压测，可以通过堆积一定量消息再放开来压测）\n\n目前主流的MQ主要是Rocketmq、kafka、Rabbitmq，Rocketmq相比于Rabbitmq、kafka具有主要优势特性有：\n- 支持事务型消息（消息发送和DB操作保持两方的最终一致性，rabbitmq和kafka不支持）\n- 支持结合rocketmq的多个系统之间数据最终一致性（多方事务，二方事务是前提）\n- 支持18个级别的延迟消息（rabbitmq和kafka不支持）\n- 支持指定次数和时间间隔的失败消息重发（kafka不支持，rabbitmq需要手动确认）\n- 支持consumer端tag过滤，减少不必要的网络传输（rabbitmq和kafka不支持）\n- 支持重复消费（rabbitmq不支持，kafka支持）\n\n# RocketMQ 特点\n\n- 支持严格的消息顺序\n- 支持 Topic 与 Queue 两种模式\n- 亿级消息堆积能力\n- 比较友好的分布式特性\n- 同时支持 Push 与 Pull 方式消费消息\n- 历经多次天猫双十一海量消息考验\n\n# 基于Docker安装RocketMq\n\n**docker-compose.yml**\n\n```\nversion: '3.5'\nservices:\n  rmqnamesrv:\n    image: foxiswho/rocketmq:server\n    container_name: rmqnamesrv\n    ports:\n      - 9876:9876\n    volumes:\n      - ./data/logs:/opt/logs\n      - ./data/store:/opt/store\n    networks:\n        rmq:\n          aliases:\n            - rmqnamesrv\n\n  rmqbroker:\n    image: foxiswho/rocketmq:broker\n    container_name: rmqbroker\n    ports:\n      - 10909:10909\n      - 10911:10911\n    volumes:\n      - ./data/logs:/opt/logs\n      - ./data/store:/opt/store\n      - ./data/brokerconf/broker.conf:/etc/rocketmq/broker.conf\n    environment:\n        NAMESRV_ADDR: \"rmqnamesrv:9876\"\n        JAVA_OPTS: \" -Duser.home=/opt\"\n        JAVA_OPT_EXT: \"-server -Xms128m -Xmx128m -Xmn128m\"\n    command: mqbroker -c /etc/rocketmq/broker.conf\n    depends_on:\n      - rmqnamesrv\n    networks:\n      rmq:\n        aliases:\n          - rmqbroker\n\n  rmqconsole:\n    image: styletang/rocketmq-console-ng\n    container_name: rmqconsole\n    ports:\n      - 8080:8080\n    environment:\n        JAVA_OPTS: \"-Drocketmq.namesrv.addr=rmqnamesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false\"\n    depends_on:\n      - rmqnamesrv\n    networks:\n      rmq:\n        aliases:\n          - rmqconsole\n\nnetworks:\n  rmq:\n    name: rmq\n    driver: bridge\n```\n**broker.conf**\nRocketMQ Broker 需要一个配置文件，按照上面的 Compose 配置，我们需要在 ./data/brokerconf/ 目录下创建一个名为 broker.conf 的配置文件，内容如下：\n\n```\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n\n\n# 所属集群名字\nbrokerClusterName=DefaultCluster\n\n# broker 名字，注意此处不同的配置文件填写的不一样，如果在 broker-a.properties 使用: broker-a,\n# 在 broker-b.properties 使用: broker-b\nbrokerName=broker-a\n\n# 0 表示 Master，> 0 表示 Slave\nbrokerId=0\n\n# nameServer地址，分号分割\n# namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876\n\n# 启动IP,如果 docker 报 com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to <192.168.0.120:10909> failed\n# 解决方式1 加上一句 producer.setVipChannelEnabled(false);，解决方式2 brokerIP1 设置宿主机IP，不要使用docker 内部IP\n# brokerIP1=192.168.0.253\n\n# 在发送消息时，自动创建服务器不存在的topic，默认创建的队列数\ndefaultTopicQueueNums=4\n\n# 是否允许 Broker 自动创建 Topic，建议线下开启，线上关闭 ！！！这里仔细看是 false，false，false\nautoCreateTopicEnable=true\n\n# 是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭\nautoCreateSubscriptionGroup=true\n\n# Broker 对外服务的监听端口\nlistenPort=10911\n\n# 删除文件时间点，默认凌晨4点\ndeleteWhen=04\n\n# 文件保留时间，默认48小时\nfileReservedTime=120\n\n# commitLog 每个文件的大小默认1G\nmapedFileSizeCommitLog=1073741824\n\n# ConsumeQueue 每个文件默认存 30W 条，根据业务情况调整\nmapedFileSizeConsumeQueue=300000\n\n# destroyMapedFileIntervalForcibly=120000\n# redeleteHangedFileInterval=120000\n# 检测物理文件磁盘空间\ndiskMaxUsedSpaceRatio=88\n# 存储路径\n# storePathRootDir=/home/ztztdata/rocketmq-all-4.1.0-incubating/store\n# commitLog 存储路径\n# storePathCommitLog=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/commitlog\n# 消费队列存储\n# storePathConsumeQueue=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/consumequeue\n# 消息索引存储路径\n# storePathIndex=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/index\n# checkpoint 文件存储路径\n# storeCheckpoint=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/checkpoint\n# abort 文件存储路径\n# abortFile=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/abort\n# 限制的消息大小\nmaxMessageSize=65536\n\n# flushCommitLogLeastPages=4\n# flushConsumeQueueLeastPages=2\n# flushCommitLogThoroughInterval=10000\n# flushConsumeQueueThoroughInterval=60000\n\n# Broker 的角色\n# - ASYNC_MASTER 异步复制Master\n# - SYNC_MASTER 同步双写Master\n# - SLAVE\nbrokerRole=ASYNC_MASTER\n\n# 刷盘方式\n# - ASYNC_FLUSH 异步刷盘\n# - SYNC_FLUSH 同步刷盘\nflushDiskType=ASYNC_FLUSH\n\n# 发消息线程池数量\n# sendMessageThreadPoolNums=128\n# 拉消息线程池数量\n# pullMessageThreadPoolNums=128\n```\n\n## RocketMQ 控制台\n访问 http://rmqIP:8080 登入控制台\n\n# 最佳实践\n\n## 基于`org.apache.rocketmq`包实例\n**添加依赖**\n```java\n<dependency>\n    <groupId>org.apache.rocketmq</groupId>\n    <artifactId>rocketmq-client</artifactId>\n    <version>4.1.0-incubating</version>\n</dependency>\n```\n**消息生产者**\n```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/8/15 14:41\n */\npublic class Producer {\n\n    public static void main(String[] args) {\n        DefaultMQProducer producer = new DefaultMQProducer(\"Producer\");\n        producer.setNamesrvAddr(\"47.101.135.160:9876\");\n        try {\n            producer.start();\n\n            Message msg = new Message(\"PushTopic\",\n                    \"push\",\n                    \"1\",\n                    \"Just for test.\".getBytes());\n\n            SendResult result = producer.send(msg);\n            System.out.println(\"id:\" + result.getMsgId() +\n                    \" result:\" + result.getSendStatus());\n\n            msg = new Message(\"PushTopic\",\n                    \"push\",\n                    \"2\",\n                    \"Just for test.\".getBytes());\n\n            result = producer.send(msg);\n            System.out.println(\"id:\" + result.getMsgId() +\n                    \" result:\" + result.getSendStatus());\n\n            msg = new Message(\"PushTopic\",\n                    \"push\",\n                    \"1\",\n                    \"Just for test.\".getBytes());\n\n            result = producer.send(msg);\n            System.out.println(\"id:\" + result.getMsgId() +\n                    \" result:\" + result.getSendStatus());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }finally{\n            producer.shutdown();\n        }\n    }\n}\n```\n\n**消息消费者**\n```java\n\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/8/15 14:45\n */\npublic class Consumer {\n    public static void main(String[] args) {\n        DefaultMQPushConsumer consumer =\n                new DefaultMQPushConsumer(\"PushConsumer\");\n        consumer.setNamesrvAddr(\"47.101.135.160:9876\");\n        try {\n            //订阅PushTopic下Tag为push的消息\n            consumer.subscribe(\"PushTopic\", \"push\");\n\n            //程序第一次启动从消息队列头取数据\n            consumer.setConsumeFromWhere(\n                    ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n            consumer.registerMessageListener(new MessageListenerConcurrently() {\n                                                 @Override\n                                                 public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> list, ConsumeConcurrentlyContext Context) {\n                                                     Message msg = list.get(0);\n//                            System.out.println(msg.toString());\n\n                                                     String topic = msg.getTopic();\n                                                     System.out.println(\"topic = \" + topic);\n                                                     byte[] body = msg.getBody();\n                                                     System.out.println(\"body:  \" + new String(body));\n                                                     String keys = msg.getKeys();\n                                                     System.out.println(\"keys = \" + keys);\n                                                     String tags = msg.getTags();\n                                                     System.out.println(\"tags = \" + tags);\n                                                     System.out.println(\"-----------------------------------------------\");\n\n                                                     return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n                                                 }\n                                             }\n            );\n            consumer.start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n## 基于com.alibaba.rocketmq包实例\n**添加依赖**\n```java\n<dependency>\n    <groupId>com.alibaba.rocketmq</groupId>\n    <artifactId>rocketmq-client</artifactId>\n    <version>3.5.9</version>\n</dependency>\n```\n\n**消息生产者**\n```java\n\nimport com.alibaba.rocketmq.client.exception.MQClientException;\nimport com.alibaba.rocketmq.client.producer.DefaultMQProducer;\n\n\n/**\n * @Author: 胡文良\n * @Date: 2019/8/15 15:01\n */\npublic class Producer {\n\n    /*\n     * Constructs a client instance with your account for accessing DefaultMQProducer\n     */\n    private static DefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\");\n    private static int initialState = 0;\n\n    private Producer() {\n\n    }\n\n    public static DefaultMQProducer getDefaultMQProducer(){\n        if(producer == null){\n            producer = new DefaultMQProducer(\"ProducerGroupName\");\n        }\n\n        if(initialState == 0){\n            producer.setNamesrvAddr(\"192.168.2.129:9876\");\n            try {\n                producer.start();\n            } catch (MQClientException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n                return null;\n            }\n\n            initialState = 1;\n        }\n\n        return producer;\n    }\n\n}\n```\n**测试类**\n\n```java\nimport com.alibaba.rocketmq.client.exception.MQBrokerException;\nimport com.alibaba.rocketmq.client.exception.MQClientException;\nimport com.alibaba.rocketmq.client.producer.DefaultMQProducer;\nimport com.alibaba.rocketmq.client.producer.SendResult;\nimport com.alibaba.rocketmq.common.message.Message;\nimport com.alibaba.rocketmq.remoting.exception.RemotingException;\nimport com.demo.demorocketmqprovider.aliProvider.Producer;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class DemoRocketmqProviderApplication implements CommandLineRunner {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoRocketmqProviderApplication.class, args);\n    }\n\n    @Override\n    public void run(String... args) {\n        // 获取消息生产者\n        DefaultMQProducer producer = Producer.getDefaultMQProducer();\n        try {\n            for (int i = 0; i < 2000; i++) {\n                Message msg = new Message(\n                        \"TopicTest1\",                   // topic\n                        \"TagA\",                         // tag\n                        \"OrderID00\" + i,                  // key\n                        (\"Hello MetaQ\" + i).getBytes());  // body\n                SendResult sendResult = producer.send(msg);\n                System.out.println(\"sendResult:\" + sendResult);\n            }\n        } catch (MQClientException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (RemotingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (MQBrokerException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (InterruptedException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n        producer.shutdown();\n\n    }\n}\n\n```\n\n**消息消费者**\n\n```java\n\nimport com.alibaba.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport com.alibaba.rocketmq.common.consumer.ConsumeFromWhere;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/8/15 15:02\n */\npublic class Consumer {\n\n    /*\n     * Constructs a client instance with your account for accessing DefaultMQConsumer\n     */\n    private static DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"ConsumerGroupName\");\n    private static int initialState = 0;\n\n    private Consumer() {\n\n    }\n\n    public static DefaultMQPushConsumer getDefaultMQPushConsumer(){\n        if(consumer == null){\n            consumer = new DefaultMQPushConsumer(\"ConsumerGroupName\");\n        }\n\n        if(initialState == 0){\n            consumer.setNamesrvAddr(\"192.168.2.129:9876\");\n            consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n            initialState = 1;\n        }\n\n        return consumer;\n    }\n\n}\n```\n\n**测试类**\n```java\nimport com.alibaba.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport com.alibaba.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport com.alibaba.rocketmq.client.exception.MQClientException;\nimport com.alibaba.rocketmq.common.message.MessageExt;\nimport com.demo.demorocketmqconsumer.aliConsumer.Consumer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\nimport java.util.List;\n\n@SpringBootApplication\npublic class DemoRocketmqConsumerApplication implements CommandLineRunner {\n\n    private static final Logger logger = LoggerFactory.getLogger(DemoRocketmqConsumerApplication.class);\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoRocketmqConsumerApplication.class, args);\n    }\n\n    @Override\n    public void run(String... args) {\n        // 获取消息生产者\n        DefaultMQPushConsumer consumer = Consumer.getDefaultMQPushConsumer();\n\n        // 订阅主体\n        try {\n            consumer.subscribe(\"TopicTest1\", \"*\");\n\n            consumer.registerMessageListener(new MessageListenerConcurrently() {\n\n                /**\n                 * * 默认msgs里唯独一条消息，能够通过设置consumeMessageBatchMaxSize參数来批量接收消息\n                 */\n                @Override\n                public ConsumeConcurrentlyStatus consumeMessage(\n                        List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n\n                    logger.info(\"currentThreadName:{} and Receive New Messages:{}\", Thread.currentThread().getName(), msgs);\n\n                    MessageExt msg = msgs.get(0);\n\n                    if (msg.getTopic().equals(\"TopicTest1\")) {\n                        // 运行TopicTest1的消费逻辑\n                        if (msg.getTags() != null && msg.getTags().equals(\"TagA\")) {\n                            // 运行TagA的消费\n                            logger.info(\"MsgBody:{}\", new String(msg.getBody()));\n                        } else if (msg.getTags() != null\n                                && msg.getTags().equals(\"TagC\")) {\n                            // 运行TagC的消费\n                        } else if (msg.getTags() != null\n                                && msg.getTags().equals(\"TagD\")) {\n                            // 运行TagD的消费\n                        }\n                    } else if (msg.getTopic().equals(\"TopicTest2\")) {\n                        // 运行TopicTest2的消费逻辑\n                    }\n\n                    return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n                }\n            });\n\n            /**\n             * Consumer对象在使用之前必须要调用start初始化。初始化一次就可以<br>\n             */\n            consumer.start();\n\n            logger.info(\"Consumer Started.\");\n        } catch (MQClientException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n\n        }\n    }\n}\n```","slug":"RocketMq","published":1,"updated":"2021-04-22T03:43:26.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysl0012ko9bd88ilkqr","content":"<h1 id=\"MQ背景-amp-选型\"><a href=\"#MQ背景-amp-选型\" class=\"headerlink\" title=\"MQ背景&amp;选型\"></a>MQ背景&amp;选型</h1><p>消息队列作为高并发系统的核心组件之一，能够帮助业务系统解构提升开发效率和系统稳定性。主要具有以下优势：</p>\n<ul>\n<li>削峰填谷（主要解决瞬时写压力大于应用服务能力导致消息丢失、系统奔溃等问题）</li>\n<li>系统解耦（解决不同重要程度、不同能力级别系统之间依赖导致一死全死）</li>\n<li>提升性能（当存在一对多调用时，可以发一条消息给消息系统，让消息系统通知相关系统）</li>\n<li>蓄流压测（线上有些链路不好压测，可以通过堆积一定量消息再放开来压测）</li>\n</ul>\n<p>目前主流的MQ主要是Rocketmq、kafka、Rabbitmq，Rocketmq相比于Rabbitmq、kafka具有主要优势特性有：</p>\n<ul>\n<li>支持事务型消息（消息发送和DB操作保持两方的最终一致性，rabbitmq和kafka不支持）</li>\n<li>支持结合rocketmq的多个系统之间数据最终一致性（多方事务，二方事务是前提）</li>\n<li>支持18个级别的延迟消息（rabbitmq和kafka不支持）</li>\n<li>支持指定次数和时间间隔的失败消息重发（kafka不支持，rabbitmq需要手动确认）</li>\n<li>支持consumer端tag过滤，减少不必要的网络传输（rabbitmq和kafka不支持）</li>\n<li>支持重复消费（rabbitmq不支持，kafka支持）</li>\n</ul>\n<h1 id=\"RocketMQ-特点\"><a href=\"#RocketMQ-特点\" class=\"headerlink\" title=\"RocketMQ 特点\"></a>RocketMQ 特点</h1><ul>\n<li>支持严格的消息顺序</li>\n<li>支持 Topic 与 Queue 两种模式</li>\n<li>亿级消息堆积能力</li>\n<li>比较友好的分布式特性</li>\n<li>同时支持 Push 与 Pull 方式消费消息</li>\n<li>历经多次天猫双十一海量消息考验</li>\n</ul>\n<h1 id=\"基于Docker安装RocketMq\"><a href=\"#基于Docker安装RocketMq\" class=\"headerlink\" title=\"基于Docker安装RocketMq\"></a>基于Docker安装RocketMq</h1><p><strong>docker-compose.yml</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &apos;3.5&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  rmqnamesrv:</span><br><span class=\"line\">    image: foxiswho/rocketmq:server</span><br><span class=\"line\">    container_name: rmqnamesrv</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 9876:9876</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./data/logs:/opt/logs</span><br><span class=\"line\">      - ./data/store:/opt/store</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">        rmq:</span><br><span class=\"line\">          aliases:</span><br><span class=\"line\">            - rmqnamesrv</span><br><span class=\"line\"></span><br><span class=\"line\">  rmqbroker:</span><br><span class=\"line\">    image: foxiswho/rocketmq:broker</span><br><span class=\"line\">    container_name: rmqbroker</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 10909:10909</span><br><span class=\"line\">      - 10911:10911</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./data/logs:/opt/logs</span><br><span class=\"line\">      - ./data/store:/opt/store</span><br><span class=\"line\">      - ./data/brokerconf/broker.conf:/etc/rocketmq/broker.conf</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">        NAMESRV_ADDR: &quot;rmqnamesrv:9876&quot;</span><br><span class=\"line\">        JAVA_OPTS: &quot; -Duser.home=/opt&quot;</span><br><span class=\"line\">        JAVA_OPT_EXT: &quot;-server -Xms128m -Xmx128m -Xmn128m&quot;</span><br><span class=\"line\">    command: mqbroker -c /etc/rocketmq/broker.conf</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - rmqnamesrv</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      rmq:</span><br><span class=\"line\">        aliases:</span><br><span class=\"line\">          - rmqbroker</span><br><span class=\"line\"></span><br><span class=\"line\">  rmqconsole:</span><br><span class=\"line\">    image: styletang/rocketmq-console-ng</span><br><span class=\"line\">    container_name: rmqconsole</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 8080:8080</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">        JAVA_OPTS: &quot;-Drocketmq.namesrv.addr=rmqnamesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false&quot;</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - rmqnamesrv</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      rmq:</span><br><span class=\"line\">        aliases:</span><br><span class=\"line\">          - rmqconsole</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  rmq:</span><br><span class=\"line\">    name: rmq</span><br><span class=\"line\">    driver: bridge</span><br></pre></td></tr></table></figure>\n\n<p><strong>broker.conf</strong><br>RocketMQ Broker 需要一个配置文件，按照上面的 Compose 配置，我们需要在 ./data/brokerconf/ 目录下创建一个名为 broker.conf 的配置文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class=\"line\"># contributor license agreements.  See the NOTICE file distributed with</span><br><span class=\"line\"># this work for additional information regarding copyright ownership.</span><br><span class=\"line\"># The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class=\"line\"># (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class=\"line\"># the License.  You may obtain a copy of the License at</span><br><span class=\"line\">#</span><br><span class=\"line\">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\">#</span><br><span class=\"line\">#  Unless required by applicable law or agreed to in writing, software</span><br><span class=\"line\">#  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class=\"line\">#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"line\">#  See the License for the specific language governing permissions and</span><br><span class=\"line\">#  limitations under the License.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 所属集群名字</span><br><span class=\"line\">brokerClusterName=DefaultCluster</span><br><span class=\"line\"></span><br><span class=\"line\"># broker 名字，注意此处不同的配置文件填写的不一样，如果在 broker-a.properties 使用: broker-a,</span><br><span class=\"line\"># 在 broker-b.properties 使用: broker-b</span><br><span class=\"line\">brokerName=broker-a</span><br><span class=\"line\"></span><br><span class=\"line\"># 0 表示 Master，&gt; 0 表示 Slave</span><br><span class=\"line\">brokerId=0</span><br><span class=\"line\"></span><br><span class=\"line\"># nameServer地址，分号分割</span><br><span class=\"line\"># namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动IP,如果 docker 报 com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;192.168.0.120:10909&gt; failed</span><br><span class=\"line\"># 解决方式1 加上一句 producer.setVipChannelEnabled(false);，解决方式2 brokerIP1 设置宿主机IP，不要使用docker 内部IP</span><br><span class=\"line\"># brokerIP1=192.168.0.253</span><br><span class=\"line\"></span><br><span class=\"line\"># 在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span><br><span class=\"line\">defaultTopicQueueNums=4</span><br><span class=\"line\"></span><br><span class=\"line\"># 是否允许 Broker 自动创建 Topic，建议线下开启，线上关闭 ！！！这里仔细看是 false，false，false</span><br><span class=\"line\">autoCreateTopicEnable=true</span><br><span class=\"line\"></span><br><span class=\"line\"># 是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span><br><span class=\"line\">autoCreateSubscriptionGroup=true</span><br><span class=\"line\"></span><br><span class=\"line\"># Broker 对外服务的监听端口</span><br><span class=\"line\">listenPort=10911</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除文件时间点，默认凌晨4点</span><br><span class=\"line\">deleteWhen=04</span><br><span class=\"line\"></span><br><span class=\"line\"># 文件保留时间，默认48小时</span><br><span class=\"line\">fileReservedTime=120</span><br><span class=\"line\"></span><br><span class=\"line\"># commitLog 每个文件的大小默认1G</span><br><span class=\"line\">mapedFileSizeCommitLog=1073741824</span><br><span class=\"line\"></span><br><span class=\"line\"># ConsumeQueue 每个文件默认存 30W 条，根据业务情况调整</span><br><span class=\"line\">mapedFileSizeConsumeQueue=300000</span><br><span class=\"line\"></span><br><span class=\"line\"># destroyMapedFileIntervalForcibly=120000</span><br><span class=\"line\"># redeleteHangedFileInterval=120000</span><br><span class=\"line\"># 检测物理文件磁盘空间</span><br><span class=\"line\">diskMaxUsedSpaceRatio=88</span><br><span class=\"line\"># 存储路径</span><br><span class=\"line\"># storePathRootDir=/home/ztztdata/rocketmq-all-4.1.0-incubating/store</span><br><span class=\"line\"># commitLog 存储路径</span><br><span class=\"line\"># storePathCommitLog=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/commitlog</span><br><span class=\"line\"># 消费队列存储</span><br><span class=\"line\"># storePathConsumeQueue=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/consumequeue</span><br><span class=\"line\"># 消息索引存储路径</span><br><span class=\"line\"># storePathIndex=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/index</span><br><span class=\"line\"># checkpoint 文件存储路径</span><br><span class=\"line\"># storeCheckpoint=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/checkpoint</span><br><span class=\"line\"># abort 文件存储路径</span><br><span class=\"line\"># abortFile=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/abort</span><br><span class=\"line\"># 限制的消息大小</span><br><span class=\"line\">maxMessageSize=65536</span><br><span class=\"line\"></span><br><span class=\"line\"># flushCommitLogLeastPages=4</span><br><span class=\"line\"># flushConsumeQueueLeastPages=2</span><br><span class=\"line\"># flushCommitLogThoroughInterval=10000</span><br><span class=\"line\"># flushConsumeQueueThoroughInterval=60000</span><br><span class=\"line\"></span><br><span class=\"line\"># Broker 的角色</span><br><span class=\"line\"># - ASYNC_MASTER 异步复制Master</span><br><span class=\"line\"># - SYNC_MASTER 同步双写Master</span><br><span class=\"line\"># - SLAVE</span><br><span class=\"line\">brokerRole=ASYNC_MASTER</span><br><span class=\"line\"></span><br><span class=\"line\"># 刷盘方式</span><br><span class=\"line\"># - ASYNC_FLUSH 异步刷盘</span><br><span class=\"line\"># - SYNC_FLUSH 同步刷盘</span><br><span class=\"line\">flushDiskType=ASYNC_FLUSH</span><br><span class=\"line\"></span><br><span class=\"line\"># 发消息线程池数量</span><br><span class=\"line\"># sendMessageThreadPoolNums=128</span><br><span class=\"line\"># 拉消息线程池数量</span><br><span class=\"line\"># pullMessageThreadPoolNums=128</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RocketMQ-控制台\"><a href=\"#RocketMQ-控制台\" class=\"headerlink\" title=\"RocketMQ 控制台\"></a>RocketMQ 控制台</h2><p>访问 <a href=\"http://rmqIP:8080\" target=\"_blank\" rel=\"noopener\">http://rmqIP:8080</a> 登入控制台</p>\n<h1 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h1><h2 id=\"基于org-apache-rocketmq包实例\"><a href=\"#基于org-apache-rocketmq包实例\" class=\"headerlink\" title=\"基于org.apache.rocketmq包实例\"></a>基于<code>org.apache.rocketmq</code>包实例</h2><p><strong>添加依赖</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.rocketmq&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;rocketmq-client&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;4.1.0-incubating&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消息生产者</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/15 14:41</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"Producer\"</span>);</span><br><span class=\"line\">        producer.setNamesrvAddr(<span class=\"string\">\"47.101.135.160:9876\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">            Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"PushTopic\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"push\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"Just for test.\"</span>.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">            SendResult result = producer.send(msg);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"id:\"</span> + result.getMsgId() +</span><br><span class=\"line\">                    <span class=\"string\">\" result:\"</span> + result.getSendStatus());</span><br><span class=\"line\"></span><br><span class=\"line\">            msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"PushTopic\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"push\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"2\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"Just for test.\"</span>.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">            result = producer.send(msg);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"id:\"</span> + result.getMsgId() +</span><br><span class=\"line\">                    <span class=\"string\">\" result:\"</span> + result.getSendStatus());</span><br><span class=\"line\"></span><br><span class=\"line\">            msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"PushTopic\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"push\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"Just for test.\"</span>.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">            result = producer.send(msg);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"id:\"</span> + result.getMsgId() +</span><br><span class=\"line\">                    <span class=\"string\">\" result:\"</span> + result.getSendStatus());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">            producer.shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消息消费者</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/15 14:45</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        DefaultMQPushConsumer consumer =</span><br><span class=\"line\">                <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"PushConsumer\"</span>);</span><br><span class=\"line\">        consumer.setNamesrvAddr(<span class=\"string\">\"47.101.135.160:9876\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//订阅PushTopic下Tag为push的消息</span></span><br><span class=\"line\">            consumer.subscribe(<span class=\"string\">\"PushTopic\"</span>, <span class=\"string\">\"push\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//程序第一次启动从消息队列头取数据</span></span><br><span class=\"line\">            consumer.setConsumeFromWhere(</span><br><span class=\"line\">                    ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class=\"line\">            consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\">                                                 <span class=\"meta\">@Override</span></span><br><span class=\"line\">                                                 <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext Context)</span> </span>&#123;</span><br><span class=\"line\">                                                     Message msg = list.get(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">//                            System.out.println(msg.toString());</span></span><br><span class=\"line\"></span><br><span class=\"line\">                                                     String topic = msg.getTopic();</span><br><span class=\"line\">                                                     System.out.println(<span class=\"string\">\"topic = \"</span> + topic);</span><br><span class=\"line\">                                                     <span class=\"keyword\">byte</span>[] body = msg.getBody();</span><br><span class=\"line\">                                                     System.out.println(<span class=\"string\">\"body:  \"</span> + <span class=\"keyword\">new</span> String(body));</span><br><span class=\"line\">                                                     String keys = msg.getKeys();</span><br><span class=\"line\">                                                     System.out.println(<span class=\"string\">\"keys = \"</span> + keys);</span><br><span class=\"line\">                                                     String tags = msg.getTags();</span><br><span class=\"line\">                                                     System.out.println(<span class=\"string\">\"tags = \"</span> + tags);</span><br><span class=\"line\">                                                     System.out.println(<span class=\"string\">\"-----------------------------------------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                                                     <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">                                                 &#125;</span><br><span class=\"line\">                                             &#125;</span><br><span class=\"line\">            );</span><br><span class=\"line\">            consumer.start();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基于com-alibaba-rocketmq包实例\"><a href=\"#基于com-alibaba-rocketmq包实例\" class=\"headerlink\" title=\"基于com.alibaba.rocketmq包实例\"></a>基于com.alibaba.rocketmq包实例</h2><p><strong>添加依赖</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba.rocketmq&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;rocketmq-client&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.5.9&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消息生产者</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/15 15:01</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Constructs a client instance with your account for accessing DefaultMQProducer</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"ProducerGroupName\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> initialState = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Producer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DefaultMQProducer <span class=\"title\">getDefaultMQProducer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(producer == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"ProducerGroupName\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(initialState == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            producer.setNamesrvAddr(<span class=\"string\">\"192.168.2.129:9876\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                producer.start();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            initialState = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> producer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.exception.MQBrokerException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.remoting.exception.RemotingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.demo.demorocketmqprovider.aliProvider.Producer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoRocketmqProviderApplication</span> <span class=\"keyword\">implements</span> <span class=\"title\">CommandLineRunner</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DemoRocketmqProviderApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取消息生产者</span></span><br><span class=\"line\">        DefaultMQProducer producer = Producer.getDefaultMQProducer();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2000</span>; i++) &#123;</span><br><span class=\"line\">                Message msg = <span class=\"keyword\">new</span> Message(</span><br><span class=\"line\">                        <span class=\"string\">\"TopicTest1\"</span>,                   <span class=\"comment\">// topic</span></span><br><span class=\"line\">                        <span class=\"string\">\"TagA\"</span>,                         <span class=\"comment\">// tag</span></span><br><span class=\"line\">                        <span class=\"string\">\"OrderID00\"</span> + i,                  <span class=\"comment\">// key</span></span><br><span class=\"line\">                        (<span class=\"string\">\"Hello MetaQ\"</span> + i).getBytes());  <span class=\"comment\">// body</span></span><br><span class=\"line\">                SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"sendResult:\"</span> + sendResult);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemotingException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQBrokerException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消息消费者</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/15 15:02</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Constructs a client instance with your account for accessing DefaultMQConsumer</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"ConsumerGroupName\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> initialState = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Consumer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DefaultMQPushConsumer <span class=\"title\">getDefaultMQPushConsumer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(consumer == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"ConsumerGroupName\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(initialState == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            consumer.setNamesrvAddr(<span class=\"string\">\"192.168.2.129:9876\"</span>);</span><br><span class=\"line\">            consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class=\"line\">            initialState = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> consumer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.demo.demorocketmqconsumer.aliConsumer.Consumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoRocketmqConsumerApplication</span> <span class=\"keyword\">implements</span> <span class=\"title\">CommandLineRunner</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(DemoRocketmqConsumerApplication.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DemoRocketmqConsumerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取消息生产者</span></span><br><span class=\"line\">        DefaultMQPushConsumer consumer = Consumer.getDefaultMQPushConsumer();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 订阅主体</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            consumer.subscribe(<span class=\"string\">\"TopicTest1\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                 * * 默认msgs里唯独一条消息，能够通过设置consumeMessageBatchMaxSize參数来批量接收消息</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    logger.info(<span class=\"string\">\"currentThreadName:&#123;&#125; and Receive New Messages:&#123;&#125;\"</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\"></span><br><span class=\"line\">                    MessageExt msg = msgs.get(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (msg.getTopic().equals(<span class=\"string\">\"TopicTest1\"</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 运行TopicTest1的消费逻辑</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (msg.getTags() != <span class=\"keyword\">null</span> &amp;&amp; msg.getTags().equals(<span class=\"string\">\"TagA\"</span>)) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 运行TagA的消费</span></span><br><span class=\"line\">                            logger.info(<span class=\"string\">\"MsgBody:&#123;&#125;\"</span>, <span class=\"keyword\">new</span> String(msg.getBody()));</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.getTags() != <span class=\"keyword\">null</span></span><br><span class=\"line\">                                &amp;&amp; msg.getTags().equals(<span class=\"string\">\"TagC\"</span>)) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 运行TagC的消费</span></span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.getTags() != <span class=\"keyword\">null</span></span><br><span class=\"line\">                                &amp;&amp; msg.getTags().equals(<span class=\"string\">\"TagD\"</span>)) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 运行TagD的消费</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.getTopic().equals(<span class=\"string\">\"TopicTest2\"</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 运行TopicTest2的消费逻辑</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * Consumer对象在使用之前必须要调用start初始化。初始化一次就可以&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            consumer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">            logger.info(<span class=\"string\">\"Consumer Started.\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MQ背景-amp-选型\"><a href=\"#MQ背景-amp-选型\" class=\"headerlink\" title=\"MQ背景&amp;选型\"></a>MQ背景&amp;选型</h1><p>消息队列作为高并发系统的核心组件之一，能够帮助业务系统解构提升开发效率和系统稳定性。主要具有以下优势：</p>\n<ul>\n<li>削峰填谷（主要解决瞬时写压力大于应用服务能力导致消息丢失、系统奔溃等问题）</li>\n<li>系统解耦（解决不同重要程度、不同能力级别系统之间依赖导致一死全死）</li>\n<li>提升性能（当存在一对多调用时，可以发一条消息给消息系统，让消息系统通知相关系统）</li>\n<li>蓄流压测（线上有些链路不好压测，可以通过堆积一定量消息再放开来压测）</li>\n</ul>\n<p>目前主流的MQ主要是Rocketmq、kafka、Rabbitmq，Rocketmq相比于Rabbitmq、kafka具有主要优势特性有：</p>\n<ul>\n<li>支持事务型消息（消息发送和DB操作保持两方的最终一致性，rabbitmq和kafka不支持）</li>\n<li>支持结合rocketmq的多个系统之间数据最终一致性（多方事务，二方事务是前提）</li>\n<li>支持18个级别的延迟消息（rabbitmq和kafka不支持）</li>\n<li>支持指定次数和时间间隔的失败消息重发（kafka不支持，rabbitmq需要手动确认）</li>\n<li>支持consumer端tag过滤，减少不必要的网络传输（rabbitmq和kafka不支持）</li>\n<li>支持重复消费（rabbitmq不支持，kafka支持）</li>\n</ul>\n<h1 id=\"RocketMQ-特点\"><a href=\"#RocketMQ-特点\" class=\"headerlink\" title=\"RocketMQ 特点\"></a>RocketMQ 特点</h1><ul>\n<li>支持严格的消息顺序</li>\n<li>支持 Topic 与 Queue 两种模式</li>\n<li>亿级消息堆积能力</li>\n<li>比较友好的分布式特性</li>\n<li>同时支持 Push 与 Pull 方式消费消息</li>\n<li>历经多次天猫双十一海量消息考验</li>\n</ul>\n<h1 id=\"基于Docker安装RocketMq\"><a href=\"#基于Docker安装RocketMq\" class=\"headerlink\" title=\"基于Docker安装RocketMq\"></a>基于Docker安装RocketMq</h1><p><strong>docker-compose.yml</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &apos;3.5&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  rmqnamesrv:</span><br><span class=\"line\">    image: foxiswho/rocketmq:server</span><br><span class=\"line\">    container_name: rmqnamesrv</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 9876:9876</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./data/logs:/opt/logs</span><br><span class=\"line\">      - ./data/store:/opt/store</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">        rmq:</span><br><span class=\"line\">          aliases:</span><br><span class=\"line\">            - rmqnamesrv</span><br><span class=\"line\"></span><br><span class=\"line\">  rmqbroker:</span><br><span class=\"line\">    image: foxiswho/rocketmq:broker</span><br><span class=\"line\">    container_name: rmqbroker</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 10909:10909</span><br><span class=\"line\">      - 10911:10911</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./data/logs:/opt/logs</span><br><span class=\"line\">      - ./data/store:/opt/store</span><br><span class=\"line\">      - ./data/brokerconf/broker.conf:/etc/rocketmq/broker.conf</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">        NAMESRV_ADDR: &quot;rmqnamesrv:9876&quot;</span><br><span class=\"line\">        JAVA_OPTS: &quot; -Duser.home=/opt&quot;</span><br><span class=\"line\">        JAVA_OPT_EXT: &quot;-server -Xms128m -Xmx128m -Xmn128m&quot;</span><br><span class=\"line\">    command: mqbroker -c /etc/rocketmq/broker.conf</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - rmqnamesrv</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      rmq:</span><br><span class=\"line\">        aliases:</span><br><span class=\"line\">          - rmqbroker</span><br><span class=\"line\"></span><br><span class=\"line\">  rmqconsole:</span><br><span class=\"line\">    image: styletang/rocketmq-console-ng</span><br><span class=\"line\">    container_name: rmqconsole</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 8080:8080</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">        JAVA_OPTS: &quot;-Drocketmq.namesrv.addr=rmqnamesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false&quot;</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - rmqnamesrv</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      rmq:</span><br><span class=\"line\">        aliases:</span><br><span class=\"line\">          - rmqconsole</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  rmq:</span><br><span class=\"line\">    name: rmq</span><br><span class=\"line\">    driver: bridge</span><br></pre></td></tr></table></figure>\n\n<p><strong>broker.conf</strong><br>RocketMQ Broker 需要一个配置文件，按照上面的 Compose 配置，我们需要在 ./data/brokerconf/ 目录下创建一个名为 broker.conf 的配置文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class=\"line\"># contributor license agreements.  See the NOTICE file distributed with</span><br><span class=\"line\"># this work for additional information regarding copyright ownership.</span><br><span class=\"line\"># The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class=\"line\"># (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class=\"line\"># the License.  You may obtain a copy of the License at</span><br><span class=\"line\">#</span><br><span class=\"line\">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\">#</span><br><span class=\"line\">#  Unless required by applicable law or agreed to in writing, software</span><br><span class=\"line\">#  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class=\"line\">#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"line\">#  See the License for the specific language governing permissions and</span><br><span class=\"line\">#  limitations under the License.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 所属集群名字</span><br><span class=\"line\">brokerClusterName=DefaultCluster</span><br><span class=\"line\"></span><br><span class=\"line\"># broker 名字，注意此处不同的配置文件填写的不一样，如果在 broker-a.properties 使用: broker-a,</span><br><span class=\"line\"># 在 broker-b.properties 使用: broker-b</span><br><span class=\"line\">brokerName=broker-a</span><br><span class=\"line\"></span><br><span class=\"line\"># 0 表示 Master，&gt; 0 表示 Slave</span><br><span class=\"line\">brokerId=0</span><br><span class=\"line\"></span><br><span class=\"line\"># nameServer地址，分号分割</span><br><span class=\"line\"># namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动IP,如果 docker 报 com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;192.168.0.120:10909&gt; failed</span><br><span class=\"line\"># 解决方式1 加上一句 producer.setVipChannelEnabled(false);，解决方式2 brokerIP1 设置宿主机IP，不要使用docker 内部IP</span><br><span class=\"line\"># brokerIP1=192.168.0.253</span><br><span class=\"line\"></span><br><span class=\"line\"># 在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span><br><span class=\"line\">defaultTopicQueueNums=4</span><br><span class=\"line\"></span><br><span class=\"line\"># 是否允许 Broker 自动创建 Topic，建议线下开启，线上关闭 ！！！这里仔细看是 false，false，false</span><br><span class=\"line\">autoCreateTopicEnable=true</span><br><span class=\"line\"></span><br><span class=\"line\"># 是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span><br><span class=\"line\">autoCreateSubscriptionGroup=true</span><br><span class=\"line\"></span><br><span class=\"line\"># Broker 对外服务的监听端口</span><br><span class=\"line\">listenPort=10911</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除文件时间点，默认凌晨4点</span><br><span class=\"line\">deleteWhen=04</span><br><span class=\"line\"></span><br><span class=\"line\"># 文件保留时间，默认48小时</span><br><span class=\"line\">fileReservedTime=120</span><br><span class=\"line\"></span><br><span class=\"line\"># commitLog 每个文件的大小默认1G</span><br><span class=\"line\">mapedFileSizeCommitLog=1073741824</span><br><span class=\"line\"></span><br><span class=\"line\"># ConsumeQueue 每个文件默认存 30W 条，根据业务情况调整</span><br><span class=\"line\">mapedFileSizeConsumeQueue=300000</span><br><span class=\"line\"></span><br><span class=\"line\"># destroyMapedFileIntervalForcibly=120000</span><br><span class=\"line\"># redeleteHangedFileInterval=120000</span><br><span class=\"line\"># 检测物理文件磁盘空间</span><br><span class=\"line\">diskMaxUsedSpaceRatio=88</span><br><span class=\"line\"># 存储路径</span><br><span class=\"line\"># storePathRootDir=/home/ztztdata/rocketmq-all-4.1.0-incubating/store</span><br><span class=\"line\"># commitLog 存储路径</span><br><span class=\"line\"># storePathCommitLog=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/commitlog</span><br><span class=\"line\"># 消费队列存储</span><br><span class=\"line\"># storePathConsumeQueue=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/consumequeue</span><br><span class=\"line\"># 消息索引存储路径</span><br><span class=\"line\"># storePathIndex=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/index</span><br><span class=\"line\"># checkpoint 文件存储路径</span><br><span class=\"line\"># storeCheckpoint=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/checkpoint</span><br><span class=\"line\"># abort 文件存储路径</span><br><span class=\"line\"># abortFile=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/abort</span><br><span class=\"line\"># 限制的消息大小</span><br><span class=\"line\">maxMessageSize=65536</span><br><span class=\"line\"></span><br><span class=\"line\"># flushCommitLogLeastPages=4</span><br><span class=\"line\"># flushConsumeQueueLeastPages=2</span><br><span class=\"line\"># flushCommitLogThoroughInterval=10000</span><br><span class=\"line\"># flushConsumeQueueThoroughInterval=60000</span><br><span class=\"line\"></span><br><span class=\"line\"># Broker 的角色</span><br><span class=\"line\"># - ASYNC_MASTER 异步复制Master</span><br><span class=\"line\"># - SYNC_MASTER 同步双写Master</span><br><span class=\"line\"># - SLAVE</span><br><span class=\"line\">brokerRole=ASYNC_MASTER</span><br><span class=\"line\"></span><br><span class=\"line\"># 刷盘方式</span><br><span class=\"line\"># - ASYNC_FLUSH 异步刷盘</span><br><span class=\"line\"># - SYNC_FLUSH 同步刷盘</span><br><span class=\"line\">flushDiskType=ASYNC_FLUSH</span><br><span class=\"line\"></span><br><span class=\"line\"># 发消息线程池数量</span><br><span class=\"line\"># sendMessageThreadPoolNums=128</span><br><span class=\"line\"># 拉消息线程池数量</span><br><span class=\"line\"># pullMessageThreadPoolNums=128</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RocketMQ-控制台\"><a href=\"#RocketMQ-控制台\" class=\"headerlink\" title=\"RocketMQ 控制台\"></a>RocketMQ 控制台</h2><p>访问 <a href=\"http://rmqIP:8080\" target=\"_blank\" rel=\"noopener\">http://rmqIP:8080</a> 登入控制台</p>\n<h1 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h1><h2 id=\"基于org-apache-rocketmq包实例\"><a href=\"#基于org-apache-rocketmq包实例\" class=\"headerlink\" title=\"基于org.apache.rocketmq包实例\"></a>基于<code>org.apache.rocketmq</code>包实例</h2><p><strong>添加依赖</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.rocketmq&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;rocketmq-client&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;4.1.0-incubating&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消息生产者</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/15 14:41</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"Producer\"</span>);</span><br><span class=\"line\">        producer.setNamesrvAddr(<span class=\"string\">\"47.101.135.160:9876\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">            Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"PushTopic\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"push\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"Just for test.\"</span>.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">            SendResult result = producer.send(msg);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"id:\"</span> + result.getMsgId() +</span><br><span class=\"line\">                    <span class=\"string\">\" result:\"</span> + result.getSendStatus());</span><br><span class=\"line\"></span><br><span class=\"line\">            msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"PushTopic\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"push\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"2\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"Just for test.\"</span>.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">            result = producer.send(msg);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"id:\"</span> + result.getMsgId() +</span><br><span class=\"line\">                    <span class=\"string\">\" result:\"</span> + result.getSendStatus());</span><br><span class=\"line\"></span><br><span class=\"line\">            msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"PushTopic\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"push\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"Just for test.\"</span>.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">            result = producer.send(msg);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"id:\"</span> + result.getMsgId() +</span><br><span class=\"line\">                    <span class=\"string\">\" result:\"</span> + result.getSendStatus());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">            producer.shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消息消费者</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/15 14:45</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        DefaultMQPushConsumer consumer =</span><br><span class=\"line\">                <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"PushConsumer\"</span>);</span><br><span class=\"line\">        consumer.setNamesrvAddr(<span class=\"string\">\"47.101.135.160:9876\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//订阅PushTopic下Tag为push的消息</span></span><br><span class=\"line\">            consumer.subscribe(<span class=\"string\">\"PushTopic\"</span>, <span class=\"string\">\"push\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//程序第一次启动从消息队列头取数据</span></span><br><span class=\"line\">            consumer.setConsumeFromWhere(</span><br><span class=\"line\">                    ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class=\"line\">            consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\">                                                 <span class=\"meta\">@Override</span></span><br><span class=\"line\">                                                 <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext Context)</span> </span>&#123;</span><br><span class=\"line\">                                                     Message msg = list.get(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">//                            System.out.println(msg.toString());</span></span><br><span class=\"line\"></span><br><span class=\"line\">                                                     String topic = msg.getTopic();</span><br><span class=\"line\">                                                     System.out.println(<span class=\"string\">\"topic = \"</span> + topic);</span><br><span class=\"line\">                                                     <span class=\"keyword\">byte</span>[] body = msg.getBody();</span><br><span class=\"line\">                                                     System.out.println(<span class=\"string\">\"body:  \"</span> + <span class=\"keyword\">new</span> String(body));</span><br><span class=\"line\">                                                     String keys = msg.getKeys();</span><br><span class=\"line\">                                                     System.out.println(<span class=\"string\">\"keys = \"</span> + keys);</span><br><span class=\"line\">                                                     String tags = msg.getTags();</span><br><span class=\"line\">                                                     System.out.println(<span class=\"string\">\"tags = \"</span> + tags);</span><br><span class=\"line\">                                                     System.out.println(<span class=\"string\">\"-----------------------------------------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                                                     <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">                                                 &#125;</span><br><span class=\"line\">                                             &#125;</span><br><span class=\"line\">            );</span><br><span class=\"line\">            consumer.start();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基于com-alibaba-rocketmq包实例\"><a href=\"#基于com-alibaba-rocketmq包实例\" class=\"headerlink\" title=\"基于com.alibaba.rocketmq包实例\"></a>基于com.alibaba.rocketmq包实例</h2><p><strong>添加依赖</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba.rocketmq&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;rocketmq-client&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.5.9&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消息生产者</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/15 15:01</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Constructs a client instance with your account for accessing DefaultMQProducer</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"ProducerGroupName\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> initialState = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Producer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DefaultMQProducer <span class=\"title\">getDefaultMQProducer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(producer == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"ProducerGroupName\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(initialState == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            producer.setNamesrvAddr(<span class=\"string\">\"192.168.2.129:9876\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                producer.start();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            initialState = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> producer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.exception.MQBrokerException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.remoting.exception.RemotingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.demo.demorocketmqprovider.aliProvider.Producer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoRocketmqProviderApplication</span> <span class=\"keyword\">implements</span> <span class=\"title\">CommandLineRunner</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DemoRocketmqProviderApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取消息生产者</span></span><br><span class=\"line\">        DefaultMQProducer producer = Producer.getDefaultMQProducer();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2000</span>; i++) &#123;</span><br><span class=\"line\">                Message msg = <span class=\"keyword\">new</span> Message(</span><br><span class=\"line\">                        <span class=\"string\">\"TopicTest1\"</span>,                   <span class=\"comment\">// topic</span></span><br><span class=\"line\">                        <span class=\"string\">\"TagA\"</span>,                         <span class=\"comment\">// tag</span></span><br><span class=\"line\">                        <span class=\"string\">\"OrderID00\"</span> + i,                  <span class=\"comment\">// key</span></span><br><span class=\"line\">                        (<span class=\"string\">\"Hello MetaQ\"</span> + i).getBytes());  <span class=\"comment\">// body</span></span><br><span class=\"line\">                SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"sendResult:\"</span> + sendResult);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemotingException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQBrokerException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消息消费者</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/15 15:02</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Constructs a client instance with your account for accessing DefaultMQConsumer</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"ConsumerGroupName\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> initialState = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Consumer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DefaultMQPushConsumer <span class=\"title\">getDefaultMQPushConsumer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(consumer == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"ConsumerGroupName\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(initialState == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            consumer.setNamesrvAddr(<span class=\"string\">\"192.168.2.129:9876\"</span>);</span><br><span class=\"line\">            consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class=\"line\">            initialState = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> consumer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.demo.demorocketmqconsumer.aliConsumer.Consumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoRocketmqConsumerApplication</span> <span class=\"keyword\">implements</span> <span class=\"title\">CommandLineRunner</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(DemoRocketmqConsumerApplication.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DemoRocketmqConsumerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取消息生产者</span></span><br><span class=\"line\">        DefaultMQPushConsumer consumer = Consumer.getDefaultMQPushConsumer();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 订阅主体</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            consumer.subscribe(<span class=\"string\">\"TopicTest1\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                 * * 默认msgs里唯独一条消息，能够通过设置consumeMessageBatchMaxSize參数来批量接收消息</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    logger.info(<span class=\"string\">\"currentThreadName:&#123;&#125; and Receive New Messages:&#123;&#125;\"</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\"></span><br><span class=\"line\">                    MessageExt msg = msgs.get(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (msg.getTopic().equals(<span class=\"string\">\"TopicTest1\"</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 运行TopicTest1的消费逻辑</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (msg.getTags() != <span class=\"keyword\">null</span> &amp;&amp; msg.getTags().equals(<span class=\"string\">\"TagA\"</span>)) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 运行TagA的消费</span></span><br><span class=\"line\">                            logger.info(<span class=\"string\">\"MsgBody:&#123;&#125;\"</span>, <span class=\"keyword\">new</span> String(msg.getBody()));</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.getTags() != <span class=\"keyword\">null</span></span><br><span class=\"line\">                                &amp;&amp; msg.getTags().equals(<span class=\"string\">\"TagC\"</span>)) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 运行TagC的消费</span></span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.getTags() != <span class=\"keyword\">null</span></span><br><span class=\"line\">                                &amp;&amp; msg.getTags().equals(<span class=\"string\">\"TagD\"</span>)) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 运行TagD的消费</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.getTopic().equals(<span class=\"string\">\"TopicTest2\"</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 运行TopicTest2的消费逻辑</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * Consumer对象在使用之前必须要调用start初始化。初始化一次就可以&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            consumer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">            logger.info(<span class=\"string\">\"Consumer Started.\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"SpirngMVC异常处理","date":"2019-09-02T03:02:41.000Z","_content":"","source":"_posts/SpirngMVC异常处理.md","raw":"---\ntitle: SpirngMVC异常处理\ndate: 2019-09-02 11:02:41\ntags:\n---\n","slug":"SpirngMVC异常处理","published":1,"updated":"2021-04-22T03:43:26.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysm0013ko9bhddo079j","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"SpringBoot","date":"2019-07-22T06:48:07.000Z","_content":"\n# 概述\n\n随着动态语言的流行 (Ruby、Groovy、Scala、Node.js)，Java 的开发显得格外的笨重：繁多的配置、低下的开发效率、复杂的部署流程以及第三方技术集成难度大。\n\n在上述环境下，Spring Boot 应运而生。它使用“习惯优于配置”（项目中存在大量的配置，此外还内置了一个习惯性的配置，让你无需手动进行配置）的理念让你的项目快速的运行起来。使用 Spring Boot 很容易创建一个独立运行（运行 Jar，内嵌 Servlet 容器）准生产级别的基于 Spring 框架的项目，使用 Spring Boot 你可以不用或者只需很少的 Spring 配置。\n\n\n## 优点\n- 快速构建项目\n- 对主流开发框架的无配置集成\n- 项目可独立运行，无需外部依赖 Servlet 容器\n- 提供运行时的应用监控\n- 极大地提高了开发、部署效率\n- 与云计算的天然集成\n\n## 缺点\n- 版本迭代速度很快，一些模块改动很大\n- 由于不用自己做配置，报错时很难定位\n- 网上现成的解决方案比较少\n\n# pom.xml\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.6.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.example.demo</groupId>\n    <artifactId>spring-boot-demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring-boot-demo</name>\n    <description>Demo project for Spring Boot</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n- parent：继承了 Spring Boot 的 Parent，表示我们是一个 Spring Boot 工程\n- `spring-boot-starter-web`：包含了 `spring-boot-starter` 还自动帮我们开启了 Web 支持\n\n# application.properties配置文件\napplication.properties(application.yml)为boot项目中的一个系统自带的全局属性配置文件. 提供默认属性重写的作用. 可包含重写系统tomcat,spring,springmvc,mybatis等诸多默认配置属性:\n\n#全局配置文件: 重写视图解析器的资源地址.\n#页面默认前缀目录\nspring.mvc.view.prefix=/WEB-INF/jsp/\n#响应页面默认后缀\nspring.mvc.view.suffix=.jsp\n#静态资源目录配置,\nspring.mvc.static-path-pattern=/static/**\n\n#tomcat服务器的配置:\nserver.port=8081\nserver.servlet.context-path=/sb2\n\n#默认支持的日志记录:\n#logging.config=classpath:logback.xml 加载单独的日志配置文件.\nlogging.file=d:/test/log.log\nlogging.level.org.springframework.web=DEBUG\n\n#提供jdbc的基本配置:\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost:3306/c01?useUnicode=true&characterEncoding=utf-8\nspring.datasource.username=root\nspring.datasource.password=root\nspring.datasource.type=org.apache.commons.dbcp.BasicDataSource\n#提供mybatis的属性配置: 扫描.\nmybatis.mapper-locations=classpath:mapper/*_mapper.xml\n\n# springboot中的核心启动主函数\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SpringBootDemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootDemoApplication.class, args);\n    }\n\n}\n```\n- 该主函数: 主要启动springboot框架.用于加载容器和诸多默认组件.\n- 用到核心注解: `@SpringBootApplication`, 作用:用于标识声明一个springboot框架容器.\n\n\n# springBoot中常用的starter的组件\n\n- spring-boot-starter-parent //boot项目继承的父项目模块.\n- spring-boot-starter-web //boot项目集成web开发模块.\n- spring-boot-starter-tomcat //boot项目集成tomcat内嵌服务器.\n- spring-boot-starter-test //boot项目集成测试模块.\n- mybatis-spring-boot-starter //boot项目集成mybatis框架.\n- spring-boot-starter-jdbc //boot项目底层集成jdbc实现数据库操作支持.\n\n# springBoot自动配置原理\nSpring Boot有一个全局配置文件：application.properties或application.yml。我们的各种属性都可以在这个文件中进行配置，最常配置的比如：server.port、logging.level.* 等等\n\nSpringBoot 自动配置主要通过 `@EnableAutoConfiguration`, `@Conditional`, `@EnableConfigurationProperties` 或者 `@ConfigurationProperties` 等几个注解来进行自动配置完成的。\n\n- `@EnableAutoConfiguration` 开启自动配置，主要作用就是调用 Spring-Core 包里的 loadFactoryNames()，将 autoconfig 包里的已经写好的自动配置加载进来。\n\n- `@Conditional` 条件注解，通过判断类路径下有没有相应配置的 jar 包来确定是否加载和自动配置这个类。\n\n- `@EnableConfigurationProperties` 的作用就是，给自动配置提供具体的配置参数，只需要写在 application.properties 中，就可以通过映射写入配置类的 POJO 属性中。\n\n**工作原理剖**\n\nSpring Boot关于自动配置的源码在spring-boot-autoconfigure-x.x.x.x.jar中,当我们程序去依赖了这些组件的 jar 包后，启动 SpringBoot应用，于是自动加载开始了。","source":"_posts/SpringBoot.md","raw":"---\ntitle: SpringBoot\ndate: 2019-07-22 14:48:07\ntags:\n    - spring\n---\n\n# 概述\n\n随着动态语言的流行 (Ruby、Groovy、Scala、Node.js)，Java 的开发显得格外的笨重：繁多的配置、低下的开发效率、复杂的部署流程以及第三方技术集成难度大。\n\n在上述环境下，Spring Boot 应运而生。它使用“习惯优于配置”（项目中存在大量的配置，此外还内置了一个习惯性的配置，让你无需手动进行配置）的理念让你的项目快速的运行起来。使用 Spring Boot 很容易创建一个独立运行（运行 Jar，内嵌 Servlet 容器）准生产级别的基于 Spring 框架的项目，使用 Spring Boot 你可以不用或者只需很少的 Spring 配置。\n\n\n## 优点\n- 快速构建项目\n- 对主流开发框架的无配置集成\n- 项目可独立运行，无需外部依赖 Servlet 容器\n- 提供运行时的应用监控\n- 极大地提高了开发、部署效率\n- 与云计算的天然集成\n\n## 缺点\n- 版本迭代速度很快，一些模块改动很大\n- 由于不用自己做配置，报错时很难定位\n- 网上现成的解决方案比较少\n\n# pom.xml\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.6.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.example.demo</groupId>\n    <artifactId>spring-boot-demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring-boot-demo</name>\n    <description>Demo project for Spring Boot</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n- parent：继承了 Spring Boot 的 Parent，表示我们是一个 Spring Boot 工程\n- `spring-boot-starter-web`：包含了 `spring-boot-starter` 还自动帮我们开启了 Web 支持\n\n# application.properties配置文件\napplication.properties(application.yml)为boot项目中的一个系统自带的全局属性配置文件. 提供默认属性重写的作用. 可包含重写系统tomcat,spring,springmvc,mybatis等诸多默认配置属性:\n\n#全局配置文件: 重写视图解析器的资源地址.\n#页面默认前缀目录\nspring.mvc.view.prefix=/WEB-INF/jsp/\n#响应页面默认后缀\nspring.mvc.view.suffix=.jsp\n#静态资源目录配置,\nspring.mvc.static-path-pattern=/static/**\n\n#tomcat服务器的配置:\nserver.port=8081\nserver.servlet.context-path=/sb2\n\n#默认支持的日志记录:\n#logging.config=classpath:logback.xml 加载单独的日志配置文件.\nlogging.file=d:/test/log.log\nlogging.level.org.springframework.web=DEBUG\n\n#提供jdbc的基本配置:\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost:3306/c01?useUnicode=true&characterEncoding=utf-8\nspring.datasource.username=root\nspring.datasource.password=root\nspring.datasource.type=org.apache.commons.dbcp.BasicDataSource\n#提供mybatis的属性配置: 扫描.\nmybatis.mapper-locations=classpath:mapper/*_mapper.xml\n\n# springboot中的核心启动主函数\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SpringBootDemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootDemoApplication.class, args);\n    }\n\n}\n```\n- 该主函数: 主要启动springboot框架.用于加载容器和诸多默认组件.\n- 用到核心注解: `@SpringBootApplication`, 作用:用于标识声明一个springboot框架容器.\n\n\n# springBoot中常用的starter的组件\n\n- spring-boot-starter-parent //boot项目继承的父项目模块.\n- spring-boot-starter-web //boot项目集成web开发模块.\n- spring-boot-starter-tomcat //boot项目集成tomcat内嵌服务器.\n- spring-boot-starter-test //boot项目集成测试模块.\n- mybatis-spring-boot-starter //boot项目集成mybatis框架.\n- spring-boot-starter-jdbc //boot项目底层集成jdbc实现数据库操作支持.\n\n# springBoot自动配置原理\nSpring Boot有一个全局配置文件：application.properties或application.yml。我们的各种属性都可以在这个文件中进行配置，最常配置的比如：server.port、logging.level.* 等等\n\nSpringBoot 自动配置主要通过 `@EnableAutoConfiguration`, `@Conditional`, `@EnableConfigurationProperties` 或者 `@ConfigurationProperties` 等几个注解来进行自动配置完成的。\n\n- `@EnableAutoConfiguration` 开启自动配置，主要作用就是调用 Spring-Core 包里的 loadFactoryNames()，将 autoconfig 包里的已经写好的自动配置加载进来。\n\n- `@Conditional` 条件注解，通过判断类路径下有没有相应配置的 jar 包来确定是否加载和自动配置这个类。\n\n- `@EnableConfigurationProperties` 的作用就是，给自动配置提供具体的配置参数，只需要写在 application.properties 中，就可以通过映射写入配置类的 POJO 属性中。\n\n**工作原理剖**\n\nSpring Boot关于自动配置的源码在spring-boot-autoconfigure-x.x.x.x.jar中,当我们程序去依赖了这些组件的 jar 包后，启动 SpringBoot应用，于是自动加载开始了。","slug":"SpringBoot","published":1,"updated":"2021-04-22T03:43:26.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysn0016ko9bl6ikwtc0","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>随着动态语言的流行 (Ruby、Groovy、Scala、Node.js)，Java 的开发显得格外的笨重：繁多的配置、低下的开发效率、复杂的部署流程以及第三方技术集成难度大。</p>\n<p>在上述环境下，Spring Boot 应运而生。它使用“习惯优于配置”（项目中存在大量的配置，此外还内置了一个习惯性的配置，让你无需手动进行配置）的理念让你的项目快速的运行起来。使用 Spring Boot 很容易创建一个独立运行（运行 Jar，内嵌 Servlet 容器）准生产级别的基于 Spring 框架的项目，使用 Spring Boot 你可以不用或者只需很少的 Spring 配置。</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>快速构建项目</li>\n<li>对主流开发框架的无配置集成</li>\n<li>项目可独立运行，无需外部依赖 Servlet 容器</li>\n<li>提供运行时的应用监控</li>\n<li>极大地提高了开发、部署效率</li>\n<li>与云计算的天然集成</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>版本迭代速度很快，一些模块改动很大</li>\n<li>由于不用自己做配置，报错时很难定位</li>\n<li>网上现成的解决方案比较少</li>\n</ul>\n<h1 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.1.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.example.demo&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-demo&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;spring-boot-demo&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>parent：继承了 Spring Boot 的 Parent，表示我们是一个 Spring Boot 工程</li>\n<li><code>spring-boot-starter-web</code>：包含了 <code>spring-boot-starter</code> 还自动帮我们开启了 Web 支持</li>\n</ul>\n<h1 id=\"application-properties配置文件\"><a href=\"#application-properties配置文件\" class=\"headerlink\" title=\"application.properties配置文件\"></a>application.properties配置文件</h1><p>application.properties(application.yml)为boot项目中的一个系统自带的全局属性配置文件. 提供默认属性重写的作用. 可包含重写系统tomcat,spring,springmvc,mybatis等诸多默认配置属性:</p>\n<p>#全局配置文件: 重写视图解析器的资源地址.</p>\n<p>#页面默认前缀目录<br>spring.mvc.view.prefix=/WEB-INF/jsp/</p>\n<p>#响应页面默认后缀<br>spring.mvc.view.suffix=.jsp</p>\n<p>#静态资源目录配置,<br>spring.mvc.static-path-pattern=/static/**</p>\n<p>#tomcat服务器的配置:<br>server.port=8081<br>server.servlet.context-path=/sb2</p>\n<p>#默认支持的日志记录:</p>\n<p>#logging.config=classpath:logback.xml 加载单独的日志配置文件.<br>logging.file=d:/test/log.log<br>logging.level.org.springframework.web=DEBUG</p>\n<p>#提供jdbc的基本配置:<br>spring.datasource.driver-class-name=com.mysql.jdbc.Driver<br>spring.datasource.url=jdbc:mysql://localhost:3306/c01?useUnicode=true&amp;characterEncoding=utf-8<br>spring.datasource.username=root<br>spring.datasource.password=root<br>spring.datasource.type=org.apache.commons.dbcp.BasicDataSource</p>\n<p>#提供mybatis的属性配置: 扫描.<br>mybatis.mapper-locations=classpath:mapper/*_mapper.xml</p>\n<h1 id=\"springboot中的核心启动主函数\"><a href=\"#springboot中的核心启动主函数\" class=\"headerlink\" title=\"springboot中的核心启动主函数\"></a>springboot中的核心启动主函数</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBootDemoApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootDemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>该主函数: 主要启动springboot框架.用于加载容器和诸多默认组件.</li>\n<li>用到核心注解: <code>@SpringBootApplication</code>, 作用:用于标识声明一个springboot框架容器.</li>\n</ul>\n<h1 id=\"springBoot中常用的starter的组件\"><a href=\"#springBoot中常用的starter的组件\" class=\"headerlink\" title=\"springBoot中常用的starter的组件\"></a>springBoot中常用的starter的组件</h1><ul>\n<li>spring-boot-starter-parent //boot项目继承的父项目模块.</li>\n<li>spring-boot-starter-web //boot项目集成web开发模块.</li>\n<li>spring-boot-starter-tomcat //boot项目集成tomcat内嵌服务器.</li>\n<li>spring-boot-starter-test //boot项目集成测试模块.</li>\n<li>mybatis-spring-boot-starter //boot项目集成mybatis框架.</li>\n<li>spring-boot-starter-jdbc //boot项目底层集成jdbc实现数据库操作支持.</li>\n</ul>\n<h1 id=\"springBoot自动配置原理\"><a href=\"#springBoot自动配置原理\" class=\"headerlink\" title=\"springBoot自动配置原理\"></a>springBoot自动配置原理</h1><p>Spring Boot有一个全局配置文件：application.properties或application.yml。我们的各种属性都可以在这个文件中进行配置，最常配置的比如：server.port、logging.level.* 等等</p>\n<p>SpringBoot 自动配置主要通过 <code>@EnableAutoConfiguration</code>, <code>@Conditional</code>, <code>@EnableConfigurationProperties</code> 或者 <code>@ConfigurationProperties</code> 等几个注解来进行自动配置完成的。</p>\n<ul>\n<li><p><code>@EnableAutoConfiguration</code> 开启自动配置，主要作用就是调用 Spring-Core 包里的 loadFactoryNames()，将 autoconfig 包里的已经写好的自动配置加载进来。</p>\n</li>\n<li><p><code>@Conditional</code> 条件注解，通过判断类路径下有没有相应配置的 jar 包来确定是否加载和自动配置这个类。</p>\n</li>\n<li><p><code>@EnableConfigurationProperties</code> 的作用就是，给自动配置提供具体的配置参数，只需要写在 application.properties 中，就可以通过映射写入配置类的 POJO 属性中。</p>\n</li>\n</ul>\n<p><strong>工作原理剖</strong></p>\n<p>Spring Boot关于自动配置的源码在spring-boot-autoconfigure-x.x.x.x.jar中,当我们程序去依赖了这些组件的 jar 包后，启动 SpringBoot应用，于是自动加载开始了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>随着动态语言的流行 (Ruby、Groovy、Scala、Node.js)，Java 的开发显得格外的笨重：繁多的配置、低下的开发效率、复杂的部署流程以及第三方技术集成难度大。</p>\n<p>在上述环境下，Spring Boot 应运而生。它使用“习惯优于配置”（项目中存在大量的配置，此外还内置了一个习惯性的配置，让你无需手动进行配置）的理念让你的项目快速的运行起来。使用 Spring Boot 很容易创建一个独立运行（运行 Jar，内嵌 Servlet 容器）准生产级别的基于 Spring 框架的项目，使用 Spring Boot 你可以不用或者只需很少的 Spring 配置。</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>快速构建项目</li>\n<li>对主流开发框架的无配置集成</li>\n<li>项目可独立运行，无需外部依赖 Servlet 容器</li>\n<li>提供运行时的应用监控</li>\n<li>极大地提高了开发、部署效率</li>\n<li>与云计算的天然集成</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>版本迭代速度很快，一些模块改动很大</li>\n<li>由于不用自己做配置，报错时很难定位</li>\n<li>网上现成的解决方案比较少</li>\n</ul>\n<h1 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.1.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.example.demo&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-demo&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;spring-boot-demo&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>parent：继承了 Spring Boot 的 Parent，表示我们是一个 Spring Boot 工程</li>\n<li><code>spring-boot-starter-web</code>：包含了 <code>spring-boot-starter</code> 还自动帮我们开启了 Web 支持</li>\n</ul>\n<h1 id=\"application-properties配置文件\"><a href=\"#application-properties配置文件\" class=\"headerlink\" title=\"application.properties配置文件\"></a>application.properties配置文件</h1><p>application.properties(application.yml)为boot项目中的一个系统自带的全局属性配置文件. 提供默认属性重写的作用. 可包含重写系统tomcat,spring,springmvc,mybatis等诸多默认配置属性:</p>\n<p>#全局配置文件: 重写视图解析器的资源地址.</p>\n<p>#页面默认前缀目录<br>spring.mvc.view.prefix=/WEB-INF/jsp/</p>\n<p>#响应页面默认后缀<br>spring.mvc.view.suffix=.jsp</p>\n<p>#静态资源目录配置,<br>spring.mvc.static-path-pattern=/static/**</p>\n<p>#tomcat服务器的配置:<br>server.port=8081<br>server.servlet.context-path=/sb2</p>\n<p>#默认支持的日志记录:</p>\n<p>#logging.config=classpath:logback.xml 加载单独的日志配置文件.<br>logging.file=d:/test/log.log<br>logging.level.org.springframework.web=DEBUG</p>\n<p>#提供jdbc的基本配置:<br>spring.datasource.driver-class-name=com.mysql.jdbc.Driver<br>spring.datasource.url=jdbc:mysql://localhost:3306/c01?useUnicode=true&amp;characterEncoding=utf-8<br>spring.datasource.username=root<br>spring.datasource.password=root<br>spring.datasource.type=org.apache.commons.dbcp.BasicDataSource</p>\n<p>#提供mybatis的属性配置: 扫描.<br>mybatis.mapper-locations=classpath:mapper/*_mapper.xml</p>\n<h1 id=\"springboot中的核心启动主函数\"><a href=\"#springboot中的核心启动主函数\" class=\"headerlink\" title=\"springboot中的核心启动主函数\"></a>springboot中的核心启动主函数</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBootDemoApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootDemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>该主函数: 主要启动springboot框架.用于加载容器和诸多默认组件.</li>\n<li>用到核心注解: <code>@SpringBootApplication</code>, 作用:用于标识声明一个springboot框架容器.</li>\n</ul>\n<h1 id=\"springBoot中常用的starter的组件\"><a href=\"#springBoot中常用的starter的组件\" class=\"headerlink\" title=\"springBoot中常用的starter的组件\"></a>springBoot中常用的starter的组件</h1><ul>\n<li>spring-boot-starter-parent //boot项目继承的父项目模块.</li>\n<li>spring-boot-starter-web //boot项目集成web开发模块.</li>\n<li>spring-boot-starter-tomcat //boot项目集成tomcat内嵌服务器.</li>\n<li>spring-boot-starter-test //boot项目集成测试模块.</li>\n<li>mybatis-spring-boot-starter //boot项目集成mybatis框架.</li>\n<li>spring-boot-starter-jdbc //boot项目底层集成jdbc实现数据库操作支持.</li>\n</ul>\n<h1 id=\"springBoot自动配置原理\"><a href=\"#springBoot自动配置原理\" class=\"headerlink\" title=\"springBoot自动配置原理\"></a>springBoot自动配置原理</h1><p>Spring Boot有一个全局配置文件：application.properties或application.yml。我们的各种属性都可以在这个文件中进行配置，最常配置的比如：server.port、logging.level.* 等等</p>\n<p>SpringBoot 自动配置主要通过 <code>@EnableAutoConfiguration</code>, <code>@Conditional</code>, <code>@EnableConfigurationProperties</code> 或者 <code>@ConfigurationProperties</code> 等几个注解来进行自动配置完成的。</p>\n<ul>\n<li><p><code>@EnableAutoConfiguration</code> 开启自动配置，主要作用就是调用 Spring-Core 包里的 loadFactoryNames()，将 autoconfig 包里的已经写好的自动配置加载进来。</p>\n</li>\n<li><p><code>@Conditional</code> 条件注解，通过判断类路径下有没有相应配置的 jar 包来确定是否加载和自动配置这个类。</p>\n</li>\n<li><p><code>@EnableConfigurationProperties</code> 的作用就是，给自动配置提供具体的配置参数，只需要写在 application.properties 中，就可以通过映射写入配置类的 POJO 属性中。</p>\n</li>\n</ul>\n<p><strong>工作原理剖</strong></p>\n<p>Spring Boot关于自动配置的源码在spring-boot-autoconfigure-x.x.x.x.jar中,当我们程序去依赖了这些组件的 jar 包后，启动 SpringBoot应用，于是自动加载开始了。</p>\n"},{"title":"SpringBoot集成TkMybatis","date":"2019-08-29T08:24:18.000Z","_content":"\n# 概述\ntkmybatis是在mybatis框架的基础上提供了很多工具，让开发更加高效\n\n# tkmybatis逆向工程\n\n**POM文件**\n\n```java\n<!-- https://mvnrepository.com/artifact/tk.mybatis/mapper -->\n<dependency>\n    <groupId>tk.mybatis</groupId>\n    <artifactId>mapper</artifactId>\n    <version>4.0.3</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/tk.mybatis/mapper-spring-boot-starter -->\n<dependency>\n    <groupId>tk.mybatis</groupId>\n    <artifactId>mapper-spring-boot-starter</artifactId>\n    <version>2.0.3</version>\n</dependency>\n\n\n\n\n<plugin>\n    <groupId>org.mybatis.generator</groupId>\n    <artifactId>mybatis-generator-maven-plugin</artifactId>\n    <version>1.3.5</version>\n    <configuration>\n        <configurationFile>${basedir}/src/main/resources/generator/generatorConfig.xml</configurationFile>\n        <overwrite>true</overwrite>\n        <verbose>true</verbose>\n    </configuration>\n    <dependencies>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.13</version>\n        </dependency>\n        <dependency>\n            <groupId>tk.mybatis</groupId>\n            <artifactId>mapper</artifactId>\n            <version>4.1.4</version>\n        </dependency>\n    </dependencies>\n</plugin>\n\n```\n\n`configurationFile`:插件配置文件位置\n\n**配置文件**\n\n`resources/generator/`目录下创建`generatorConfig.xml`文件\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n    <!-- 引入数据库连接配置 -->\n    <properties resource=\"jdbc.properties\"/>\n\n    <context id=\"Mysql\" targetRuntime=\"MyBatis3Simple\" defaultModelType=\"flat\">\n        <property name=\"beginningDelimiter\" value=\"`\"/>\n        <property name=\"endingDelimiter\" value=\"`\"/>\n\n        <!-- 配置 tk.mybatis 插件 -->\n        <plugin type=\"tk.mybatis.mapper.generator.MapperPlugin\">\n            <property name=\"mappers\" value=\"tk.mybatis.mapper.MyMapper\"/>\n        </plugin>\n\n        <!-- 配置数据库连接 -->\n        <jdbcConnection\n                driverClass=\"${jdbc.driverClass}\"\n                connectionURL=\"${jdbc.connectionURL}\"\n                userId=\"${jdbc.username}\"\n                password=\"${jdbc.password}\">\n        </jdbcConnection>\n\n        <!-- 配置实体类存放路径 -->\n        <javaModelGenerator targetPackage=\"com.funtl.myshop.commons.domain\" targetProject=\"src/main/java\"/>\n\n        <!-- 配置 XML 存放路径 -->\n        <sqlMapGenerator targetPackage=\"mapper\" targetProject=\"src/main/resources\"/>\n\n        <!-- 配置 DAO 存放路径 -->\n        <javaClientGenerator\n                targetPackage=\"com.funtl.myshop.commons.mapper\"\n                targetProject=\"src/main/java\"\n                type=\"XMLMAPPER\"/>\n\n        <!-- 配置需要指定生成的数据库和表，% 代表所有表 -->\n        <table catalog=\"myshop\" tableName=\"%\">\n            <!-- mysql 配置 -->\n            <generatedKey column=\"id\" sqlStatement=\"Mysql\" identity=\"true\"/>\n        </table>\n    </context>\n</generatorConfiguration>\n```\n\n\n**配置数据源**\n\n在 `src/main/resources` 目录下创建 `jdbc.properties` 数据源配置\n\n```text\njdbc.driverClass=com.mysql.cj.jdbc.Driver\njdbc.connectionURL=jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC\njdbc.username=root\njdbc.password=123456\n```\n\n创建`tk.mybatis.mapper`包及`MyMapper`接口\n```java\npackage tk.mybatis.mapper;\n\n\nimport tk.mybatis.mapper.common.Mapper;\nimport tk.mybatis.mapper.common.MySqlMapper;\n\n\n/**\n * @Author: 胡文良\n * @Date: 2019/8/29 15:23\n */\n\npublic interface MyMapper<T> extends Mapper<T>, MySqlMapper<T> {\n}\n\n```\n\n**插件自动生成命令**\n\n```text\nmvn mybatis-generator:generate\n```\n\n**排坑：**\n\n生成的实体类：`@Table(name = \"blog..tb_user\")`需要手动删除前缀\n```java\npackage com.example.demo.entity;\n\nimport javax.persistence.*;\n\n@Table(name = \"blog..tb_user\")\npublic class TbUser {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id;\n\n    @Column(name = \"user_name\")\n    private String userName;\n\n    private String password;\n\n    private Integer age;\n\n    /**\n     * @return id\n     */\n    public Integer getId() {\n        return id;\n    }\n\n    /**\n     * @param id\n     */\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    /**\n     * @return user_name\n     */\n    public String getUserName() {\n        return userName;\n    }\n\n    /**\n     * @param userName\n     */\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    /**\n     * @return password\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**\n     * @param password\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**\n     * @return age\n     */\n    public Integer getAge() {\n        return age;\n    }\n\n    /**\n     * @param age\n     */\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n}\n```\n# 基本应用\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/tkmybatis.png)\n\ntkMybatis帮我实现一些基本查询方便我快速开发","source":"_posts/SpringBoot集成TkMybatis.md","raw":"---\ntitle: SpringBoot集成TkMybatis\ndate: 2019-08-29 16:24:18\ntags:\n---\n\n# 概述\ntkmybatis是在mybatis框架的基础上提供了很多工具，让开发更加高效\n\n# tkmybatis逆向工程\n\n**POM文件**\n\n```java\n<!-- https://mvnrepository.com/artifact/tk.mybatis/mapper -->\n<dependency>\n    <groupId>tk.mybatis</groupId>\n    <artifactId>mapper</artifactId>\n    <version>4.0.3</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/tk.mybatis/mapper-spring-boot-starter -->\n<dependency>\n    <groupId>tk.mybatis</groupId>\n    <artifactId>mapper-spring-boot-starter</artifactId>\n    <version>2.0.3</version>\n</dependency>\n\n\n\n\n<plugin>\n    <groupId>org.mybatis.generator</groupId>\n    <artifactId>mybatis-generator-maven-plugin</artifactId>\n    <version>1.3.5</version>\n    <configuration>\n        <configurationFile>${basedir}/src/main/resources/generator/generatorConfig.xml</configurationFile>\n        <overwrite>true</overwrite>\n        <verbose>true</verbose>\n    </configuration>\n    <dependencies>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.13</version>\n        </dependency>\n        <dependency>\n            <groupId>tk.mybatis</groupId>\n            <artifactId>mapper</artifactId>\n            <version>4.1.4</version>\n        </dependency>\n    </dependencies>\n</plugin>\n\n```\n\n`configurationFile`:插件配置文件位置\n\n**配置文件**\n\n`resources/generator/`目录下创建`generatorConfig.xml`文件\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n    <!-- 引入数据库连接配置 -->\n    <properties resource=\"jdbc.properties\"/>\n\n    <context id=\"Mysql\" targetRuntime=\"MyBatis3Simple\" defaultModelType=\"flat\">\n        <property name=\"beginningDelimiter\" value=\"`\"/>\n        <property name=\"endingDelimiter\" value=\"`\"/>\n\n        <!-- 配置 tk.mybatis 插件 -->\n        <plugin type=\"tk.mybatis.mapper.generator.MapperPlugin\">\n            <property name=\"mappers\" value=\"tk.mybatis.mapper.MyMapper\"/>\n        </plugin>\n\n        <!-- 配置数据库连接 -->\n        <jdbcConnection\n                driverClass=\"${jdbc.driverClass}\"\n                connectionURL=\"${jdbc.connectionURL}\"\n                userId=\"${jdbc.username}\"\n                password=\"${jdbc.password}\">\n        </jdbcConnection>\n\n        <!-- 配置实体类存放路径 -->\n        <javaModelGenerator targetPackage=\"com.funtl.myshop.commons.domain\" targetProject=\"src/main/java\"/>\n\n        <!-- 配置 XML 存放路径 -->\n        <sqlMapGenerator targetPackage=\"mapper\" targetProject=\"src/main/resources\"/>\n\n        <!-- 配置 DAO 存放路径 -->\n        <javaClientGenerator\n                targetPackage=\"com.funtl.myshop.commons.mapper\"\n                targetProject=\"src/main/java\"\n                type=\"XMLMAPPER\"/>\n\n        <!-- 配置需要指定生成的数据库和表，% 代表所有表 -->\n        <table catalog=\"myshop\" tableName=\"%\">\n            <!-- mysql 配置 -->\n            <generatedKey column=\"id\" sqlStatement=\"Mysql\" identity=\"true\"/>\n        </table>\n    </context>\n</generatorConfiguration>\n```\n\n\n**配置数据源**\n\n在 `src/main/resources` 目录下创建 `jdbc.properties` 数据源配置\n\n```text\njdbc.driverClass=com.mysql.cj.jdbc.Driver\njdbc.connectionURL=jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC\njdbc.username=root\njdbc.password=123456\n```\n\n创建`tk.mybatis.mapper`包及`MyMapper`接口\n```java\npackage tk.mybatis.mapper;\n\n\nimport tk.mybatis.mapper.common.Mapper;\nimport tk.mybatis.mapper.common.MySqlMapper;\n\n\n/**\n * @Author: 胡文良\n * @Date: 2019/8/29 15:23\n */\n\npublic interface MyMapper<T> extends Mapper<T>, MySqlMapper<T> {\n}\n\n```\n\n**插件自动生成命令**\n\n```text\nmvn mybatis-generator:generate\n```\n\n**排坑：**\n\n生成的实体类：`@Table(name = \"blog..tb_user\")`需要手动删除前缀\n```java\npackage com.example.demo.entity;\n\nimport javax.persistence.*;\n\n@Table(name = \"blog..tb_user\")\npublic class TbUser {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id;\n\n    @Column(name = \"user_name\")\n    private String userName;\n\n    private String password;\n\n    private Integer age;\n\n    /**\n     * @return id\n     */\n    public Integer getId() {\n        return id;\n    }\n\n    /**\n     * @param id\n     */\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    /**\n     * @return user_name\n     */\n    public String getUserName() {\n        return userName;\n    }\n\n    /**\n     * @param userName\n     */\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    /**\n     * @return password\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**\n     * @param password\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**\n     * @return age\n     */\n    public Integer getAge() {\n        return age;\n    }\n\n    /**\n     * @param age\n     */\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n}\n```\n# 基本应用\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/tkmybatis.png)\n\ntkMybatis帮我实现一些基本查询方便我快速开发","slug":"SpringBoot集成TkMybatis","published":1,"updated":"2021-04-22T03:43:26.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysn0017ko9bm6i0wnt7","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>tkmybatis是在mybatis框架的基础上提供了很多工具，让开发更加高效</p>\n<h1 id=\"tkmybatis逆向工程\"><a href=\"#tkmybatis逆向工程\" class=\"headerlink\" title=\"tkmybatis逆向工程\"></a>tkmybatis逆向工程</h1><p><strong>POM文件</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- https:<span class=\"comment\">//mvnrepository.com/artifact/tk.mybatis/mapper --&gt;</span></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mapper&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;4.0.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- https:<span class=\"comment\">//mvnrepository.com/artifact/tk.mybatis/mapper-spring-boot-starter --&gt;</span></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.0.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.3.5&lt;/version&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;configurationFile&gt;$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml&lt;/configurationFile&gt;</span><br><span class=\"line\">        &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class=\"line\">        &lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;8.0.13&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mapper&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;4.1.4&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>configurationFile</code>:插件配置文件位置</p>\n<p><strong>配置文件</strong></p>\n<p><code>resources/generator/</code>目录下创建<code>generatorConfig.xml</code>文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入数据库连接配置 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"jdbc.properties\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Mysql\"</span> <span class=\"attr\">targetRuntime</span>=<span class=\"string\">\"MyBatis3Simple\"</span> <span class=\"attr\">defaultModelType</span>=<span class=\"string\">\"flat\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"beginningDelimiter\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"`\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"endingDelimiter\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"`\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置 tk.mybatis 插件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">type</span>=<span class=\"string\">\"tk.mybatis.mapper.generator.MapperPlugin\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mappers\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"tk.mybatis.mapper.MyMapper\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置数据库连接 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">driverClass</span>=<span class=\"string\">\"$&#123;jdbc.driverClass&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"$&#123;jdbc.connectionURL&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">userId</span>=<span class=\"string\">\"$&#123;jdbc.username&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">password</span>=<span class=\"string\">\"$&#123;jdbc.password&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">jdbcConnection</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置实体类存放路径 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.funtl.myshop.commons.domain\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置 XML 存放路径 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"mapper\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/resources\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置 DAO 存放路径 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.funtl.myshop.commons.mapper\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置需要指定生成的数据库和表，% 代表所有表 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">catalog</span>=<span class=\"string\">\"myshop\"</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"%\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- mysql 配置 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">generatedKey</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">sqlStatement</span>=<span class=\"string\">\"Mysql\"</span> <span class=\"attr\">identity</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>配置数据源</strong></p>\n<p>在 <code>src/main/resources</code> 目录下创建 <code>jdbc.properties</code> 数据源配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driverClass=com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">jdbc.connectionURL=jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</span><br><span class=\"line\">jdbc.username=root</span><br><span class=\"line\">jdbc.password=123456</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>tk.mybatis.mapper</code>包及<code>MyMapper</code>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tk.mybatis.mapper;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> tk.mybatis.mapper.common.MySqlMapper;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/29 15:23</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyMapper</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Mapper</span>&lt;<span class=\"title\">T</span>&gt;, <span class=\"title\">MySqlMapper</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>插件自动生成命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn mybatis-generator:generate</span><br></pre></td></tr></table></figure>\n\n<p><strong>排坑：</strong></p>\n<p>生成的实体类：<code>@Table(name = &quot;blog..tb_user&quot;)</code>需要手动删除前缀</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"blog..tb_user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TbUser</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"user_name\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> user_name</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUserName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userName</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserName</span><span class=\"params\">(String userName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userName = userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> password</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPassword</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> password</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPassword</span><span class=\"params\">(String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.password = password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> age</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> age</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"基本应用\"><a href=\"#基本应用\" class=\"headerlink\" title=\"基本应用\"></a>基本应用</h1><p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/tkmybatis.png\" alt></p>\n<p>tkMybatis帮我实现一些基本查询方便我快速开发</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>tkmybatis是在mybatis框架的基础上提供了很多工具，让开发更加高效</p>\n<h1 id=\"tkmybatis逆向工程\"><a href=\"#tkmybatis逆向工程\" class=\"headerlink\" title=\"tkmybatis逆向工程\"></a>tkmybatis逆向工程</h1><p><strong>POM文件</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- https:<span class=\"comment\">//mvnrepository.com/artifact/tk.mybatis/mapper --&gt;</span></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mapper&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;4.0.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- https:<span class=\"comment\">//mvnrepository.com/artifact/tk.mybatis/mapper-spring-boot-starter --&gt;</span></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.0.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.3.5&lt;/version&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;configurationFile&gt;$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml&lt;/configurationFile&gt;</span><br><span class=\"line\">        &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class=\"line\">        &lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;8.0.13&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mapper&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;4.1.4&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>configurationFile</code>:插件配置文件位置</p>\n<p><strong>配置文件</strong></p>\n<p><code>resources/generator/</code>目录下创建<code>generatorConfig.xml</code>文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入数据库连接配置 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"jdbc.properties\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Mysql\"</span> <span class=\"attr\">targetRuntime</span>=<span class=\"string\">\"MyBatis3Simple\"</span> <span class=\"attr\">defaultModelType</span>=<span class=\"string\">\"flat\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"beginningDelimiter\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"`\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"endingDelimiter\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"`\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置 tk.mybatis 插件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">type</span>=<span class=\"string\">\"tk.mybatis.mapper.generator.MapperPlugin\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mappers\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"tk.mybatis.mapper.MyMapper\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置数据库连接 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">driverClass</span>=<span class=\"string\">\"$&#123;jdbc.driverClass&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"$&#123;jdbc.connectionURL&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">userId</span>=<span class=\"string\">\"$&#123;jdbc.username&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">password</span>=<span class=\"string\">\"$&#123;jdbc.password&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">jdbcConnection</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置实体类存放路径 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.funtl.myshop.commons.domain\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置 XML 存放路径 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"mapper\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/resources\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置 DAO 存放路径 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.funtl.myshop.commons.mapper\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置需要指定生成的数据库和表，% 代表所有表 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">catalog</span>=<span class=\"string\">\"myshop\"</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"%\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- mysql 配置 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">generatedKey</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">sqlStatement</span>=<span class=\"string\">\"Mysql\"</span> <span class=\"attr\">identity</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>配置数据源</strong></p>\n<p>在 <code>src/main/resources</code> 目录下创建 <code>jdbc.properties</code> 数据源配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driverClass=com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">jdbc.connectionURL=jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</span><br><span class=\"line\">jdbc.username=root</span><br><span class=\"line\">jdbc.password=123456</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>tk.mybatis.mapper</code>包及<code>MyMapper</code>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tk.mybatis.mapper;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> tk.mybatis.mapper.common.MySqlMapper;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/29 15:23</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyMapper</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Mapper</span>&lt;<span class=\"title\">T</span>&gt;, <span class=\"title\">MySqlMapper</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>插件自动生成命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn mybatis-generator:generate</span><br></pre></td></tr></table></figure>\n\n<p><strong>排坑：</strong></p>\n<p>生成的实体类：<code>@Table(name = &quot;blog..tb_user&quot;)</code>需要手动删除前缀</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"blog..tb_user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TbUser</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"user_name\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> user_name</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUserName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userName</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserName</span><span class=\"params\">(String userName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userName = userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> password</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPassword</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> password</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPassword</span><span class=\"params\">(String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.password = password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> age</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> age</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"基本应用\"><a href=\"#基本应用\" class=\"headerlink\" title=\"基本应用\"></a>基本应用</h1><p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/tkmybatis.png\" alt></p>\n<p>tkMybatis帮我实现一些基本查询方便我快速开发</p>\n"},{"title":"Spring Cloud","date":"2019-08-15T02:45:29.000Z","_content":"","source":"_posts/SpringCloud.md","raw":"---\ntitle: Spring Cloud\ndate: 2019-08-15 10:45:29\ntags:\n---\n","slug":"SpringCloud","published":1,"updated":"2021-04-22T03:43:26.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcyso0018ko9bc5lfcvts","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"SpringBoot集成Mybatis","date":"2019-08-29T01:46:45.000Z","_content":"\n# SpringBoot集成Mybatis\n\n**添加依赖**\n\n```java\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n</dependency>\n\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>1.3.0</version>\n</dependency>\n```\n\n**application.properties配置**\n\n```text\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC\nspring.datasource.username=root\nspring.datasource.password=123456\n\nmybatis.type-aliases-package=com.example.demo.entity\nmybatis.mapperLocations=classpath:mapper/*.xml\n```\n\n*实体类*\n\n```java\nimport lombok.Data;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/8/28 20:58\n */\n\n@Data\npublic class User {\n    private String id;\n    private String userName;\n    private String password;\n    private int age;\n}\n```\n\n**mapper接口**\n\n```java \n/**\n * @Author: 胡文良\n * @Date: 2019/8/28 20:57\n */\nimport com.example.demo.entity.User;\nimport org.apache.ibatis.annotations.Mapper;\n\n\n@Mapper\npublic interface UserMapper {\n    User select(int id);\n}\n```\n\n**xml文件**\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.example.demo.service.UserMapper\">\n\n    <select id=\"select\" parameterType=\"INTEGER\" resultType=\"com.example.demo.entity.User\">\n        select\n        b.id as id,\n        b.user_name as userName,\n        b.password as password,\n        b.age as age\n        from tb_user b\n        where id=1\n    </select>\n    \n</mapper>\n```\n\n**启动类**\n\n```java\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\n@MapperScan(\"com.example.demo.service\")\npublic class DemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n\n}\n```\n\n# SpringBoot集成Druid\n\n**添加POM依赖**\n\n```java\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid-spring-boot-starter</artifactId>\n    <version>1.1.10</version>\n</dependency>\n```\n\n**application.properties文件配置**\n\n```text\n#druid配置详情信息\n# 初始化大小，最小，最大\nspring.datasource.initialSize=5\nspring.datasource.minIdle=1\nspring.datasource.maxActive=50\n# 配置获取连接等待超时的时间\nspring.datasource.maxWait=60000\n# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\nspring.datasource.timeBetweenEvictionRunsMillis=60000\n# 配置一个连接在池中最小生存的时间，单位是毫秒\nspring.datasource.minEvictableIdleTimeMillis=300000\nspring.datasource.validationQuery=SELECT 1 FROM DUAL\nspring.datasource.testWhileIdle=true\nspring.datasource.testOnBorrow=false\nspring.datasource.testOnReturn=false\n# 打开PSCache，并且指定每个连接上PSCache的大小\nspring.datasource.poolPreparedStatements=false\n#spring.datasource.maxPoolPreparedStatementPerConnectionSize=20\n# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙\nspring.datasource.filters=stat,wall,log4j\n# 通过connectProperties属性来打开mergeSql功能；慢SQL记录\nspring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\n# 合并多个DruidDataSource的监控数据\n#spring.datasource.useGlobalDataSourceStat=true\n```\n打开浏览器，输入：http://localhost:8080/druid/index.html 浏览器显示效果\n\n\n# springboot2.0集成hikaricp\n\n**概述**\n\n`HikariCP`是数据库连接池,而且是号称史上最快的,而且目前来看确实是这样的,SpringBoot2.0也已经采用HikariCP作为默认连接池配置.\n\n**HikariCP配置**\n\n```text\n# Hikari will use the above plus the following to setup connection pooling\nspring.datasource.type=com.zaxxer.hikari.HikariDataSource\nspring.datasource.hikari.minimum-idle=5\nspring.datasource.hikari.maximum-pool-size=15\nspring.datasource.hikari.auto-commit=true\nspring.datasource.hikari.idle-timeout=30000\nspring.datasource.hikari.pool-name=HikariCP\nspring.datasource.hikari.max-lifetime=1800000\nspring.datasource.hikari.connection-timeout=30000\n```\n\n如图展示配置成功\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/Hikaricp.png)","source":"_posts/SpringBoot集成Mybatis.md","raw":"---\ntitle: SpringBoot集成Mybatis\ndate: 2019-08-29 09:46:45\ntags:\n---\n\n# SpringBoot集成Mybatis\n\n**添加依赖**\n\n```java\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n</dependency>\n\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>1.3.0</version>\n</dependency>\n```\n\n**application.properties配置**\n\n```text\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC\nspring.datasource.username=root\nspring.datasource.password=123456\n\nmybatis.type-aliases-package=com.example.demo.entity\nmybatis.mapperLocations=classpath:mapper/*.xml\n```\n\n*实体类*\n\n```java\nimport lombok.Data;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/8/28 20:58\n */\n\n@Data\npublic class User {\n    private String id;\n    private String userName;\n    private String password;\n    private int age;\n}\n```\n\n**mapper接口**\n\n```java \n/**\n * @Author: 胡文良\n * @Date: 2019/8/28 20:57\n */\nimport com.example.demo.entity.User;\nimport org.apache.ibatis.annotations.Mapper;\n\n\n@Mapper\npublic interface UserMapper {\n    User select(int id);\n}\n```\n\n**xml文件**\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.example.demo.service.UserMapper\">\n\n    <select id=\"select\" parameterType=\"INTEGER\" resultType=\"com.example.demo.entity.User\">\n        select\n        b.id as id,\n        b.user_name as userName,\n        b.password as password,\n        b.age as age\n        from tb_user b\n        where id=1\n    </select>\n    \n</mapper>\n```\n\n**启动类**\n\n```java\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\n@MapperScan(\"com.example.demo.service\")\npublic class DemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n\n}\n```\n\n# SpringBoot集成Druid\n\n**添加POM依赖**\n\n```java\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid-spring-boot-starter</artifactId>\n    <version>1.1.10</version>\n</dependency>\n```\n\n**application.properties文件配置**\n\n```text\n#druid配置详情信息\n# 初始化大小，最小，最大\nspring.datasource.initialSize=5\nspring.datasource.minIdle=1\nspring.datasource.maxActive=50\n# 配置获取连接等待超时的时间\nspring.datasource.maxWait=60000\n# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\nspring.datasource.timeBetweenEvictionRunsMillis=60000\n# 配置一个连接在池中最小生存的时间，单位是毫秒\nspring.datasource.minEvictableIdleTimeMillis=300000\nspring.datasource.validationQuery=SELECT 1 FROM DUAL\nspring.datasource.testWhileIdle=true\nspring.datasource.testOnBorrow=false\nspring.datasource.testOnReturn=false\n# 打开PSCache，并且指定每个连接上PSCache的大小\nspring.datasource.poolPreparedStatements=false\n#spring.datasource.maxPoolPreparedStatementPerConnectionSize=20\n# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙\nspring.datasource.filters=stat,wall,log4j\n# 通过connectProperties属性来打开mergeSql功能；慢SQL记录\nspring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\n# 合并多个DruidDataSource的监控数据\n#spring.datasource.useGlobalDataSourceStat=true\n```\n打开浏览器，输入：http://localhost:8080/druid/index.html 浏览器显示效果\n\n\n# springboot2.0集成hikaricp\n\n**概述**\n\n`HikariCP`是数据库连接池,而且是号称史上最快的,而且目前来看确实是这样的,SpringBoot2.0也已经采用HikariCP作为默认连接池配置.\n\n**HikariCP配置**\n\n```text\n# Hikari will use the above plus the following to setup connection pooling\nspring.datasource.type=com.zaxxer.hikari.HikariDataSource\nspring.datasource.hikari.minimum-idle=5\nspring.datasource.hikari.maximum-pool-size=15\nspring.datasource.hikari.auto-commit=true\nspring.datasource.hikari.idle-timeout=30000\nspring.datasource.hikari.pool-name=HikariCP\nspring.datasource.hikari.max-lifetime=1800000\nspring.datasource.hikari.connection-timeout=30000\n```\n\n如图展示配置成功\n\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/Hikaricp.png)","slug":"SpringBoot集成Mybatis","published":1,"updated":"2021-04-22T03:43:26.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysp001bko9beyqatx4d","content":"<h1 id=\"SpringBoot集成Mybatis\"><a href=\"#SpringBoot集成Mybatis\" class=\"headerlink\" title=\"SpringBoot集成Mybatis\"></a>SpringBoot集成Mybatis</h1><p><strong>添加依赖</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>application.properties配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">spring.datasource.url=jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</span><br><span class=\"line\">spring.datasource.username=root</span><br><span class=\"line\">spring.datasource.password=123456</span><br><span class=\"line\"></span><br><span class=\"line\">mybatis.type-aliases-package=com.example.demo.entity</span><br><span class=\"line\">mybatis.mapperLocations=classpath:mapper/*.xml</span><br></pre></td></tr></table></figure>\n\n<p><em>实体类</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/28 20:58</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>mapper接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/28 20:57</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.entity.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">User <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>xml文件</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.example.demo.service.UserMapper\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"select\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"INTEGER\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.example.demo.entity.User\"</span>&gt;</span></span><br><span class=\"line\">        select</span><br><span class=\"line\">        b.id as id,</span><br><span class=\"line\">        b.user_name as userName,</span><br><span class=\"line\">        b.password as password,</span><br><span class=\"line\">        b.age as age</span><br><span class=\"line\">        from tb_user b</span><br><span class=\"line\">        where id=1</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>启动类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(<span class=\"string\">\"com.example.demo.service\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SpringBoot集成Druid\"><a href=\"#SpringBoot集成Druid\" class=\"headerlink\" title=\"SpringBoot集成Druid\"></a>SpringBoot集成Druid</h1><p><strong>添加POM依赖</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.1.10&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>application.properties文件配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#druid配置详情信息</span><br><span class=\"line\"># 初始化大小，最小，最大</span><br><span class=\"line\">spring.datasource.initialSize=5</span><br><span class=\"line\">spring.datasource.minIdle=1</span><br><span class=\"line\">spring.datasource.maxActive=50</span><br><span class=\"line\"># 配置获取连接等待超时的时间</span><br><span class=\"line\">spring.datasource.maxWait=60000</span><br><span class=\"line\"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span><br><span class=\"line\">spring.datasource.timeBetweenEvictionRunsMillis=60000</span><br><span class=\"line\"># 配置一个连接在池中最小生存的时间，单位是毫秒</span><br><span class=\"line\">spring.datasource.minEvictableIdleTimeMillis=300000</span><br><span class=\"line\">spring.datasource.validationQuery=SELECT 1 FROM DUAL</span><br><span class=\"line\">spring.datasource.testWhileIdle=true</span><br><span class=\"line\">spring.datasource.testOnBorrow=false</span><br><span class=\"line\">spring.datasource.testOnReturn=false</span><br><span class=\"line\"># 打开PSCache，并且指定每个连接上PSCache的大小</span><br><span class=\"line\">spring.datasource.poolPreparedStatements=false</span><br><span class=\"line\">#spring.datasource.maxPoolPreparedStatementPerConnectionSize=20</span><br><span class=\"line\"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&apos;wall&apos;用于防火墙</span><br><span class=\"line\">spring.datasource.filters=stat,wall,log4j</span><br><span class=\"line\"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span><br><span class=\"line\">spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span><br><span class=\"line\"># 合并多个DruidDataSource的监控数据</span><br><span class=\"line\">#spring.datasource.useGlobalDataSourceStat=true</span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器，输入：<a href=\"http://localhost:8080/druid/index.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/druid/index.html</a> 浏览器显示效果</p>\n<h1 id=\"springboot2-0集成hikaricp\"><a href=\"#springboot2-0集成hikaricp\" class=\"headerlink\" title=\"springboot2.0集成hikaricp\"></a>springboot2.0集成hikaricp</h1><p><strong>概述</strong></p>\n<p><code>HikariCP</code>是数据库连接池,而且是号称史上最快的,而且目前来看确实是这样的,SpringBoot2.0也已经采用HikariCP作为默认连接池配置.</p>\n<p><strong>HikariCP配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Hikari will use the above plus the following to setup connection pooling</span><br><span class=\"line\">spring.datasource.type=com.zaxxer.hikari.HikariDataSource</span><br><span class=\"line\">spring.datasource.hikari.minimum-idle=5</span><br><span class=\"line\">spring.datasource.hikari.maximum-pool-size=15</span><br><span class=\"line\">spring.datasource.hikari.auto-commit=true</span><br><span class=\"line\">spring.datasource.hikari.idle-timeout=30000</span><br><span class=\"line\">spring.datasource.hikari.pool-name=HikariCP</span><br><span class=\"line\">spring.datasource.hikari.max-lifetime=1800000</span><br><span class=\"line\">spring.datasource.hikari.connection-timeout=30000</span><br></pre></td></tr></table></figure>\n\n<p>如图展示配置成功</p>\n<p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/Hikaricp.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot集成Mybatis\"><a href=\"#SpringBoot集成Mybatis\" class=\"headerlink\" title=\"SpringBoot集成Mybatis\"></a>SpringBoot集成Mybatis</h1><p><strong>添加依赖</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>application.properties配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">spring.datasource.url=jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</span><br><span class=\"line\">spring.datasource.username=root</span><br><span class=\"line\">spring.datasource.password=123456</span><br><span class=\"line\"></span><br><span class=\"line\">mybatis.type-aliases-package=com.example.demo.entity</span><br><span class=\"line\">mybatis.mapperLocations=classpath:mapper/*.xml</span><br></pre></td></tr></table></figure>\n\n<p><em>实体类</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/28 20:58</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>mapper接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/28 20:57</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.entity.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">User <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>xml文件</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.example.demo.service.UserMapper\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"select\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"INTEGER\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.example.demo.entity.User\"</span>&gt;</span></span><br><span class=\"line\">        select</span><br><span class=\"line\">        b.id as id,</span><br><span class=\"line\">        b.user_name as userName,</span><br><span class=\"line\">        b.password as password,</span><br><span class=\"line\">        b.age as age</span><br><span class=\"line\">        from tb_user b</span><br><span class=\"line\">        where id=1</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>启动类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(<span class=\"string\">\"com.example.demo.service\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SpringBoot集成Druid\"><a href=\"#SpringBoot集成Druid\" class=\"headerlink\" title=\"SpringBoot集成Druid\"></a>SpringBoot集成Druid</h1><p><strong>添加POM依赖</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.1.10&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>application.properties文件配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#druid配置详情信息</span><br><span class=\"line\"># 初始化大小，最小，最大</span><br><span class=\"line\">spring.datasource.initialSize=5</span><br><span class=\"line\">spring.datasource.minIdle=1</span><br><span class=\"line\">spring.datasource.maxActive=50</span><br><span class=\"line\"># 配置获取连接等待超时的时间</span><br><span class=\"line\">spring.datasource.maxWait=60000</span><br><span class=\"line\"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span><br><span class=\"line\">spring.datasource.timeBetweenEvictionRunsMillis=60000</span><br><span class=\"line\"># 配置一个连接在池中最小生存的时间，单位是毫秒</span><br><span class=\"line\">spring.datasource.minEvictableIdleTimeMillis=300000</span><br><span class=\"line\">spring.datasource.validationQuery=SELECT 1 FROM DUAL</span><br><span class=\"line\">spring.datasource.testWhileIdle=true</span><br><span class=\"line\">spring.datasource.testOnBorrow=false</span><br><span class=\"line\">spring.datasource.testOnReturn=false</span><br><span class=\"line\"># 打开PSCache，并且指定每个连接上PSCache的大小</span><br><span class=\"line\">spring.datasource.poolPreparedStatements=false</span><br><span class=\"line\">#spring.datasource.maxPoolPreparedStatementPerConnectionSize=20</span><br><span class=\"line\"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&apos;wall&apos;用于防火墙</span><br><span class=\"line\">spring.datasource.filters=stat,wall,log4j</span><br><span class=\"line\"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span><br><span class=\"line\">spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span><br><span class=\"line\"># 合并多个DruidDataSource的监控数据</span><br><span class=\"line\">#spring.datasource.useGlobalDataSourceStat=true</span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器，输入：<a href=\"http://localhost:8080/druid/index.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/druid/index.html</a> 浏览器显示效果</p>\n<h1 id=\"springboot2-0集成hikaricp\"><a href=\"#springboot2-0集成hikaricp\" class=\"headerlink\" title=\"springboot2.0集成hikaricp\"></a>springboot2.0集成hikaricp</h1><p><strong>概述</strong></p>\n<p><code>HikariCP</code>是数据库连接池,而且是号称史上最快的,而且目前来看确实是这样的,SpringBoot2.0也已经采用HikariCP作为默认连接池配置.</p>\n<p><strong>HikariCP配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Hikari will use the above plus the following to setup connection pooling</span><br><span class=\"line\">spring.datasource.type=com.zaxxer.hikari.HikariDataSource</span><br><span class=\"line\">spring.datasource.hikari.minimum-idle=5</span><br><span class=\"line\">spring.datasource.hikari.maximum-pool-size=15</span><br><span class=\"line\">spring.datasource.hikari.auto-commit=true</span><br><span class=\"line\">spring.datasource.hikari.idle-timeout=30000</span><br><span class=\"line\">spring.datasource.hikari.pool-name=HikariCP</span><br><span class=\"line\">spring.datasource.hikari.max-lifetime=1800000</span><br><span class=\"line\">spring.datasource.hikari.connection-timeout=30000</span><br></pre></td></tr></table></figure>\n\n<p>如图展示配置成功</p>\n<p><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/Hikaricp.png\" alt></p>\n"},{"title":"Spring CloudA libaba","date":"2019-09-02T03:06:22.000Z","_content":"","source":"_posts/SpringCloudAlibaba.md","raw":"---\ntitle: Spring CloudA libaba\ndate: 2019-09-02 11:06:22\ntags:\n---\n","slug":"SpringCloudAlibaba","published":1,"updated":"2021-04-22T03:43:26.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysq001cko9bz7lz3d6d","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Swagger2","date":"2019-08-28T02:08:29.000Z","_content":"\nSwagger2 是一个规范和完整的框架，用于生成、描述、调用和可视化Restful风格的web服务\n\n# SpringBoot集成Swagger2\n\n**添加依赖**\n```java\n    <!-- Swagger2 Begin -->\n    <dependency>\n        <groupId>io.springfox</groupId>\n        <artifactId>springfox-swagger2</artifactId>\n        <version>2.9.2</version>\n    </dependency>\n    <dependency>\n        <groupId>io.springfox</groupId>\n        <artifactId>springfox-swagger-ui</artifactId>\n        <version>2.9.2</version>\n    </dependency>\n    <!-- Swagger2 End -->\n\n```\n\n**创建一个Java 配置类**\n\n```java\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/8/28 10:50\n */\n@Configuration\n@EnableSwagger2\npublic class Swagger2Configuration {\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.example.demo.swagger2.controller\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"标题：某公司_用户信息管理系统_接口文档\")\n                .description(\"描述：用于管理集团旗下公司的人员信息,具体包括XXX,XXX模块...\")\n                .termsOfServiceUrl(\"http://www.baidu.com\")\n                .version(\"1.0.0\")\n                .build();\n    }\n}\n```\n\n`RequestHandlerSelectors.basePackage(\"com.example.demo.swagger2.controller\")`为 Controller 包路径，不然生成的文档扫描不到接口\n\n`@EnableSwagger2`表示开启 Swagger\n\n**响应数据**\n```java\n\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Data;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/8/28 11:34\n */\n\n@Data\n@ApiModel(value=\"用户信息\", description=\"用户描述\")\npublic class User {\n\n    @ApiModelProperty(value=\"用户ID\")\n    private String userId;\n\n    @ApiModelProperty(value=\"用户名\")\n    private String username;\n\n    @ApiModelProperty(value=\"密码\")\n    private String password;\n\n    public User() {\n    }\n\n    public User(String userId, String username, String password) {\n        this.userId = userId;\n        this.username = username;\n        this.password = password;\n    }\n}\n\n```\n\n\n**使用 Swagger2 在 Controller 中增加 Swagger2 相关注解，代码如下：**\n\n```java\n\nimport com.example.demo.swagger2.entity.User;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiOperation;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/8/28 11:35\n */\n\n@Api(tags = \"用户信息管理\")\n@RestController\n@RequestMapping(\"/user/\")\npublic class UserController {\n\n    private final static List<User> userList = new ArrayList<>();\n\n    {\n        userList.add(new User(\"1\", \"admin\", \"123456\"));\n        userList.add(new User(\"2\", \"jacks\", \"111111\"));\n    }\n\n    @ApiOperation(\"获取列表\")\n    @GetMapping(\"list\")\n    public List userList() {\n        return userList;\n    }\n\n    @ApiOperation(\"新增用户\")\n    @PostMapping(\"save\")\n    public boolean save(User user) {\n        return userList.add(user);\n    }\n\n    @ApiOperation(\"更新用户\")\n    @ApiImplicitParam(name = \"user\", value = \"单个用户信息\", dataType = \"User\")\n    @PutMapping(\"update\")\n    public boolean update(User user) {\n        return userList.remove(user) && userList.add(user);\n    }\n\n    @ApiOperation(\"批量删除\")\n    @ApiImplicitParam(name = \"users\", value = \"N个用户信息\", dataType = \"List<User>\")\n    @DeleteMapping(\"delete\")\n    public boolean delete(@RequestBody List<User> users) {\n        return userList.removeAll(users);\n    }\n}\n\n```\n\n**访问 Swagger2,访问地址：http://ip:port/swagger-ui.html**\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/swagger2.png)\n\n# Swagger 常用注解说明\n\n- `@Api`：修饰整个类，描述 Controller 的作用\n- `@ApiOperation`：描述一个类的一个方法，或者说一个接口\n- `@ApiParam`：单个参数描述\n- `@ApiModel`：用对象来接收参数\n- `@ApiProperty`：用对象接收参数时，描述对象的一个字段\n- `@ApiResponse`：HTTP 响应其中 1 个描述\n- `@ApiResponses`：HTTP 响应整体描述\n- `@ApiIgnore`：使用该注解忽略这个API\n- `@ApiError`：发生错误返回的信息\n- `@ApiImplicitParam`：一个请求参数\n- `@ApiImplicitParams`：多个请求参数\n\n### `@ApiImplicitParams`\n\n说明：用在请求的方法上，表示一组参数说明；`@ApiImplicitParam`：用在 `@ApiImplicitParams` 注解中，指定一个请求参数的各个方面\n\n常用参数：\n\n- name：参数名，参数名称可以覆盖方法参数名称，路径参数必须与方法参数一致\n- value：参数的汉字说明、解释\n- required：参数是否必须传，默认为 false （路径参数必填）\n- paramType：参数放在哪个地方\n  - header 请求参数的获取：`@RequestHeader`\n  - query 请求参数的获取：`@RequestParam`\n  - path（用于 restful 接口）--> 请求参数的获取：`@PathVariable`\n  - body（不常用）\n  - form（不常用）\n- dataType：参数类型，默认 String，其它值 dataType=\"Integer\"\n- defaultValue：参数的默认值\n\n其他参数（`@ApiImplicitParam`）：\n\n- allowableValues 限制参数的可接受值。1.以逗号分隔的列表 2.范围值 3.设置最小值/最大值\n- access 允许从API文档中过滤参数。\n- allowMultiple 指定参数是否可以通过具有多个事件接受多个值，默认为 false\n- example 单个示例\n- examples 参数示例。仅适用于 BodyParameters\n\n```java\n@ResponseBody\n@PostMapping(value=\"/login\")\n@ApiOperation(value = \"登录检测\", notes=\"根据用户名、密码判断该用户是否存在\")\n@ApiImplicitParams({\n    @ApiImplicitParam(name = \"name\", value = \"用户名\", required = false, paramType = \"query\", dataType = \"String\"),\n    @ApiImplicitParam(name = \"pass\", value = \"密码\", required = false, paramType = \"query\", dataType = \"String\")\n})\npublic UserModel login(@RequestParam(value = \"name\", required = false) String account,\n@RequestParam(value = \"pass\", required = false) String password){}\n```\n\n\n\n### `@ApiParam`\n\n说明：用在请求方法中，描述参数信息\n\n常用参数：\n\n- name：参数名称，参数名称可以覆盖方法参数名称，路径参数必须与方法参数一致\n- value：参数的简要说明。\n- defaultValue：参数默认值\n- required：属性是否必填，默认为 false （路径参数必须填）\n\n```java\n@ResponseBody\n@PostMapping(value=\"/login\")\n@ApiOperation(value = \"登录检测\", notes=\"根据用户名、密码判断该用户是否存在\")\npublic UserModel login(@ApiParam(name = \"model\", value = \"用户信息Model\") UserModel model){}\n```\n\n\n\n### `@ApiModel`\n\n说明：用于响应类上，表示一个返回响应数据的信息（这种一般用在 POST 创建的时候，使用 `@RequestBody` 这样的场景，请求参数无法使用 `@ApiImplicitParam` 注解进行描述的时候）；`@ApiModelProperty`：用在属性上，描述响应类的属性\n\n其他参数(@ApiModelProperty)：\n\n- value 此属性的简要说明。\n- name 允许覆盖属性名称\n- allowableValues 限制参数的可接受值。1.以逗号分隔的列表 2.范围值 3.设置最小值/最大值\n- access 允许从 API 文档中过滤属性。\n  - notes 目前尚未使用。\n- dataType 参数的数据类型。可以是类名或者参数名，会覆盖类的属性名称。\n- required 参数是否必传，默认为 false\n- position 允许在类中对属性进行排序。默认为 0\n- hidden 允许在 Swagger 模型定义中隐藏该属性。\n- example 属性的示例。\n- readOnly 将属性设定为只读。\n- reference 指定对相应类型定义的引用，覆盖指定的任何参数值\n\n```java\n@ApiModel(value=\"用户登录信息\", description=\"用于判断用户是否存在\")\npublic class UserModel implements Serializable{\n\n   private static final long serialVersionUID = 1L;\n\n   /**\n    * 用户名\n    */\n   @ApiModelProperty(value=\"用户名\")\n   private String account;\n\n   /**\n     * 密码\n     */\n    @ApiModelProperty(value=\"密码\")\n   private String password;\n}\n```\n\n\n\n### `@ApiResponses`\n\n说明：用在请求的方法上，表示一组响应；`@ApiResponse`：用在 `@ApiResponses` 中，一般用于表达一个错误的响应信息\n\n常用参数：\n\n- code：数字，例如 400\n- message：信息，例如 \"请求参数没填好\"\n- response：抛出异常的类\n\n```java\n@ResponseBody\n@PostMapping(value=\"/update/{id}\")\n@ApiOperation(value = \"修改用户信息\",notes = \"打开页面并修改指定用户信息\")\n@ApiResponses({\n    @ApiResponse(code=400,message=\"请求参数没填好\"),\n    @ApiResponse(code=404,message=\"请求路径没有或页面跳转路径不对\")\n})\npublic JsonResult update(@PathVariable String id, UserModel model){}\n```","source":"_posts/Swagger2.md","raw":"---\ntitle: Swagger2\ndate: 2019-08-28 10:08:29\ntags:\n---\n\nSwagger2 是一个规范和完整的框架，用于生成、描述、调用和可视化Restful风格的web服务\n\n# SpringBoot集成Swagger2\n\n**添加依赖**\n```java\n    <!-- Swagger2 Begin -->\n    <dependency>\n        <groupId>io.springfox</groupId>\n        <artifactId>springfox-swagger2</artifactId>\n        <version>2.9.2</version>\n    </dependency>\n    <dependency>\n        <groupId>io.springfox</groupId>\n        <artifactId>springfox-swagger-ui</artifactId>\n        <version>2.9.2</version>\n    </dependency>\n    <!-- Swagger2 End -->\n\n```\n\n**创建一个Java 配置类**\n\n```java\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/8/28 10:50\n */\n@Configuration\n@EnableSwagger2\npublic class Swagger2Configuration {\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.example.demo.swagger2.controller\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"标题：某公司_用户信息管理系统_接口文档\")\n                .description(\"描述：用于管理集团旗下公司的人员信息,具体包括XXX,XXX模块...\")\n                .termsOfServiceUrl(\"http://www.baidu.com\")\n                .version(\"1.0.0\")\n                .build();\n    }\n}\n```\n\n`RequestHandlerSelectors.basePackage(\"com.example.demo.swagger2.controller\")`为 Controller 包路径，不然生成的文档扫描不到接口\n\n`@EnableSwagger2`表示开启 Swagger\n\n**响应数据**\n```java\n\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Data;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/8/28 11:34\n */\n\n@Data\n@ApiModel(value=\"用户信息\", description=\"用户描述\")\npublic class User {\n\n    @ApiModelProperty(value=\"用户ID\")\n    private String userId;\n\n    @ApiModelProperty(value=\"用户名\")\n    private String username;\n\n    @ApiModelProperty(value=\"密码\")\n    private String password;\n\n    public User() {\n    }\n\n    public User(String userId, String username, String password) {\n        this.userId = userId;\n        this.username = username;\n        this.password = password;\n    }\n}\n\n```\n\n\n**使用 Swagger2 在 Controller 中增加 Swagger2 相关注解，代码如下：**\n\n```java\n\nimport com.example.demo.swagger2.entity.User;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiOperation;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @Author: 胡文良\n * @Date: 2019/8/28 11:35\n */\n\n@Api(tags = \"用户信息管理\")\n@RestController\n@RequestMapping(\"/user/\")\npublic class UserController {\n\n    private final static List<User> userList = new ArrayList<>();\n\n    {\n        userList.add(new User(\"1\", \"admin\", \"123456\"));\n        userList.add(new User(\"2\", \"jacks\", \"111111\"));\n    }\n\n    @ApiOperation(\"获取列表\")\n    @GetMapping(\"list\")\n    public List userList() {\n        return userList;\n    }\n\n    @ApiOperation(\"新增用户\")\n    @PostMapping(\"save\")\n    public boolean save(User user) {\n        return userList.add(user);\n    }\n\n    @ApiOperation(\"更新用户\")\n    @ApiImplicitParam(name = \"user\", value = \"单个用户信息\", dataType = \"User\")\n    @PutMapping(\"update\")\n    public boolean update(User user) {\n        return userList.remove(user) && userList.add(user);\n    }\n\n    @ApiOperation(\"批量删除\")\n    @ApiImplicitParam(name = \"users\", value = \"N个用户信息\", dataType = \"List<User>\")\n    @DeleteMapping(\"delete\")\n    public boolean delete(@RequestBody List<User> users) {\n        return userList.removeAll(users);\n    }\n}\n\n```\n\n**访问 Swagger2,访问地址：http://ip:port/swagger-ui.html**\n![](https://414706657.oss-cn-shenzhen.aliyuncs.com/swagger2.png)\n\n# Swagger 常用注解说明\n\n- `@Api`：修饰整个类，描述 Controller 的作用\n- `@ApiOperation`：描述一个类的一个方法，或者说一个接口\n- `@ApiParam`：单个参数描述\n- `@ApiModel`：用对象来接收参数\n- `@ApiProperty`：用对象接收参数时，描述对象的一个字段\n- `@ApiResponse`：HTTP 响应其中 1 个描述\n- `@ApiResponses`：HTTP 响应整体描述\n- `@ApiIgnore`：使用该注解忽略这个API\n- `@ApiError`：发生错误返回的信息\n- `@ApiImplicitParam`：一个请求参数\n- `@ApiImplicitParams`：多个请求参数\n\n### `@ApiImplicitParams`\n\n说明：用在请求的方法上，表示一组参数说明；`@ApiImplicitParam`：用在 `@ApiImplicitParams` 注解中，指定一个请求参数的各个方面\n\n常用参数：\n\n- name：参数名，参数名称可以覆盖方法参数名称，路径参数必须与方法参数一致\n- value：参数的汉字说明、解释\n- required：参数是否必须传，默认为 false （路径参数必填）\n- paramType：参数放在哪个地方\n  - header 请求参数的获取：`@RequestHeader`\n  - query 请求参数的获取：`@RequestParam`\n  - path（用于 restful 接口）--> 请求参数的获取：`@PathVariable`\n  - body（不常用）\n  - form（不常用）\n- dataType：参数类型，默认 String，其它值 dataType=\"Integer\"\n- defaultValue：参数的默认值\n\n其他参数（`@ApiImplicitParam`）：\n\n- allowableValues 限制参数的可接受值。1.以逗号分隔的列表 2.范围值 3.设置最小值/最大值\n- access 允许从API文档中过滤参数。\n- allowMultiple 指定参数是否可以通过具有多个事件接受多个值，默认为 false\n- example 单个示例\n- examples 参数示例。仅适用于 BodyParameters\n\n```java\n@ResponseBody\n@PostMapping(value=\"/login\")\n@ApiOperation(value = \"登录检测\", notes=\"根据用户名、密码判断该用户是否存在\")\n@ApiImplicitParams({\n    @ApiImplicitParam(name = \"name\", value = \"用户名\", required = false, paramType = \"query\", dataType = \"String\"),\n    @ApiImplicitParam(name = \"pass\", value = \"密码\", required = false, paramType = \"query\", dataType = \"String\")\n})\npublic UserModel login(@RequestParam(value = \"name\", required = false) String account,\n@RequestParam(value = \"pass\", required = false) String password){}\n```\n\n\n\n### `@ApiParam`\n\n说明：用在请求方法中，描述参数信息\n\n常用参数：\n\n- name：参数名称，参数名称可以覆盖方法参数名称，路径参数必须与方法参数一致\n- value：参数的简要说明。\n- defaultValue：参数默认值\n- required：属性是否必填，默认为 false （路径参数必须填）\n\n```java\n@ResponseBody\n@PostMapping(value=\"/login\")\n@ApiOperation(value = \"登录检测\", notes=\"根据用户名、密码判断该用户是否存在\")\npublic UserModel login(@ApiParam(name = \"model\", value = \"用户信息Model\") UserModel model){}\n```\n\n\n\n### `@ApiModel`\n\n说明：用于响应类上，表示一个返回响应数据的信息（这种一般用在 POST 创建的时候，使用 `@RequestBody` 这样的场景，请求参数无法使用 `@ApiImplicitParam` 注解进行描述的时候）；`@ApiModelProperty`：用在属性上，描述响应类的属性\n\n其他参数(@ApiModelProperty)：\n\n- value 此属性的简要说明。\n- name 允许覆盖属性名称\n- allowableValues 限制参数的可接受值。1.以逗号分隔的列表 2.范围值 3.设置最小值/最大值\n- access 允许从 API 文档中过滤属性。\n  - notes 目前尚未使用。\n- dataType 参数的数据类型。可以是类名或者参数名，会覆盖类的属性名称。\n- required 参数是否必传，默认为 false\n- position 允许在类中对属性进行排序。默认为 0\n- hidden 允许在 Swagger 模型定义中隐藏该属性。\n- example 属性的示例。\n- readOnly 将属性设定为只读。\n- reference 指定对相应类型定义的引用，覆盖指定的任何参数值\n\n```java\n@ApiModel(value=\"用户登录信息\", description=\"用于判断用户是否存在\")\npublic class UserModel implements Serializable{\n\n   private static final long serialVersionUID = 1L;\n\n   /**\n    * 用户名\n    */\n   @ApiModelProperty(value=\"用户名\")\n   private String account;\n\n   /**\n     * 密码\n     */\n    @ApiModelProperty(value=\"密码\")\n   private String password;\n}\n```\n\n\n\n### `@ApiResponses`\n\n说明：用在请求的方法上，表示一组响应；`@ApiResponse`：用在 `@ApiResponses` 中，一般用于表达一个错误的响应信息\n\n常用参数：\n\n- code：数字，例如 400\n- message：信息，例如 \"请求参数没填好\"\n- response：抛出异常的类\n\n```java\n@ResponseBody\n@PostMapping(value=\"/update/{id}\")\n@ApiOperation(value = \"修改用户信息\",notes = \"打开页面并修改指定用户信息\")\n@ApiResponses({\n    @ApiResponse(code=400,message=\"请求参数没填好\"),\n    @ApiResponse(code=404,message=\"请求路径没有或页面跳转路径不对\")\n})\npublic JsonResult update(@PathVariable String id, UserModel model){}\n```","slug":"Swagger2","published":1,"updated":"2021-04-22T03:43:26.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcysq001dko9biun6tfr8","content":"<p>Swagger2 是一个规范和完整的框架，用于生成、描述、调用和可视化Restful风格的web服务</p>\n<h1 id=\"SpringBoot集成Swagger2\"><a href=\"#SpringBoot集成Swagger2\" class=\"headerlink\" title=\"SpringBoot集成Swagger2\"></a>SpringBoot集成Swagger2</h1><p><strong>添加依赖</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Swagger2 Begin --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- Swagger2 End --&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建一个Java 配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.service.ApiInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/28 10:50</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger</span>2</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Swagger2Configuration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">createRestApi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .apiInfo(apiInfo())</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">\"com.example.demo.swagger2.controller\"</span>))</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ApiInfo <span class=\"title\">apiInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApiInfoBuilder()</span><br><span class=\"line\">                .title(<span class=\"string\">\"标题：某公司_用户信息管理系统_接口文档\"</span>)</span><br><span class=\"line\">                .description(<span class=\"string\">\"描述：用于管理集团旗下公司的人员信息,具体包括XXX,XXX模块...\"</span>)</span><br><span class=\"line\">                .termsOfServiceUrl(<span class=\"string\">\"http://www.baidu.com\"</span>)</span><br><span class=\"line\">                .version(<span class=\"string\">\"1.0.0\"</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>RequestHandlerSelectors.basePackage(&quot;com.example.demo.swagger2.controller&quot;)</code>为 Controller 包路径，不然生成的文档扫描不到接口</p>\n<p><code>@EnableSwagger2</code>表示开启 Swagger</p>\n<p><strong>响应数据</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/28 11:34</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel</span>(value=<span class=\"string\">\"用户信息\"</span>, description=<span class=\"string\">\"用户描述\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value=<span class=\"string\">\"用户ID\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value=<span class=\"string\">\"用户名\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value=<span class=\"string\">\"密码\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String userId, String username, String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userId = userId;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.password = password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用 Swagger2 在 Controller 中增加 Swagger2 相关注解，代码如下：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.swagger2.entity.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.Api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiOperation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.DeleteMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PutMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/28 11:35</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Api</span>(tags = <span class=\"string\">\"用户信息管理\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/user/\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> List&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        userList.add(<span class=\"keyword\">new</span> User(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"admin\"</span>, <span class=\"string\">\"123456\"</span>));</span><br><span class=\"line\">        userList.add(<span class=\"keyword\">new</span> User(<span class=\"string\">\"2\"</span>, <span class=\"string\">\"jacks\"</span>, <span class=\"string\">\"111111\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation</span>(<span class=\"string\">\"获取列表\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"list\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">userList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation</span>(<span class=\"string\">\"新增用户\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"save\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userList.add(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation</span>(<span class=\"string\">\"更新用户\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ApiImplicitParam</span>(name = <span class=\"string\">\"user\"</span>, value = <span class=\"string\">\"单个用户信息\"</span>, dataType = <span class=\"string\">\"User\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@PutMapping</span>(<span class=\"string\">\"update\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">update</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userList.remove(user) &amp;&amp; userList.add(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation</span>(<span class=\"string\">\"批量删除\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ApiImplicitParam</span>(name = <span class=\"string\">\"users\"</span>, value = <span class=\"string\">\"N个用户信息\"</span>, dataType = <span class=\"string\">\"List&lt;User&gt;\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@DeleteMapping</span>(<span class=\"string\">\"delete\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(@RequestBody List&lt;User&gt; users)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userList.removeAll(users);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>访问 Swagger2,访问地址：<a href=\"http://ip:port/swagger-ui.html\" target=\"_blank\" rel=\"noopener\">http://ip:port/swagger-ui.html</a></strong><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/swagger2.png\" alt></p>\n<h1 id=\"Swagger-常用注解说明\"><a href=\"#Swagger-常用注解说明\" class=\"headerlink\" title=\"Swagger 常用注解说明\"></a>Swagger 常用注解说明</h1><ul>\n<li><code>@Api</code>：修饰整个类，描述 Controller 的作用</li>\n<li><code>@ApiOperation</code>：描述一个类的一个方法，或者说一个接口</li>\n<li><code>@ApiParam</code>：单个参数描述</li>\n<li><code>@ApiModel</code>：用对象来接收参数</li>\n<li><code>@ApiProperty</code>：用对象接收参数时，描述对象的一个字段</li>\n<li><code>@ApiResponse</code>：HTTP 响应其中 1 个描述</li>\n<li><code>@ApiResponses</code>：HTTP 响应整体描述</li>\n<li><code>@ApiIgnore</code>：使用该注解忽略这个API</li>\n<li><code>@ApiError</code>：发生错误返回的信息</li>\n<li><code>@ApiImplicitParam</code>：一个请求参数</li>\n<li><code>@ApiImplicitParams</code>：多个请求参数</li>\n</ul>\n<h3 id=\"ApiImplicitParams\"><a href=\"#ApiImplicitParams\" class=\"headerlink\" title=\"@ApiImplicitParams\"></a><code>@ApiImplicitParams</code></h3><p>说明：用在请求的方法上，表示一组参数说明；<code>@ApiImplicitParam</code>：用在 <code>@ApiImplicitParams</code> 注解中，指定一个请求参数的各个方面</p>\n<p>常用参数：</p>\n<ul>\n<li>name：参数名，参数名称可以覆盖方法参数名称，路径参数必须与方法参数一致</li>\n<li>value：参数的汉字说明、解释</li>\n<li>required：参数是否必须传，默认为 false （路径参数必填）</li>\n<li>paramType：参数放在哪个地方<ul>\n<li>header 请求参数的获取：<code>@RequestHeader</code></li>\n<li>query 请求参数的获取：<code>@RequestParam</code></li>\n<li>path（用于 restful 接口）–&gt; 请求参数的获取：<code>@PathVariable</code></li>\n<li>body（不常用）</li>\n<li>form（不常用）</li>\n</ul>\n</li>\n<li>dataType：参数类型，默认 String，其它值 dataType=”Integer”</li>\n<li>defaultValue：参数的默认值</li>\n</ul>\n<p>其他参数（<code>@ApiImplicitParam</code>）：</p>\n<ul>\n<li>allowableValues 限制参数的可接受值。1.以逗号分隔的列表 2.范围值 3.设置最小值/最大值</li>\n<li>access 允许从API文档中过滤参数。</li>\n<li>allowMultiple 指定参数是否可以通过具有多个事件接受多个值，默认为 false</li>\n<li>example 单个示例</li>\n<li>examples 参数示例。仅适用于 BodyParameters</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping</span>(value=<span class=\"string\">\"/login\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ApiOperation</span>(value = <span class=\"string\">\"登录检测\"</span>, notes=<span class=\"string\">\"根据用户名、密码判断该用户是否存在\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ApiImplicitParams</span>(&#123;</span><br><span class=\"line\">    <span class=\"meta\">@ApiImplicitParam</span>(name = <span class=\"string\">\"name\"</span>, value = <span class=\"string\">\"用户名\"</span>, required = <span class=\"keyword\">false</span>, paramType = <span class=\"string\">\"query\"</span>, dataType = <span class=\"string\">\"String\"</span>),</span><br><span class=\"line\">    <span class=\"meta\">@ApiImplicitParam</span>(name = <span class=\"string\">\"pass\"</span>, value = <span class=\"string\">\"密码\"</span>, required = <span class=\"keyword\">false</span>, paramType = <span class=\"string\">\"query\"</span>, dataType = <span class=\"string\">\"String\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> UserModel <span class=\"title\">login</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"name\"</span>, required = <span class=\"keyword\">false</span>)</span> String account,</span></span><br><span class=\"line\"><span class=\"function\">@<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"pass\"</span>, required = <span class=\"keyword\">false</span>)</span> String password)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ApiParam\"><a href=\"#ApiParam\" class=\"headerlink\" title=\"@ApiParam\"></a><code>@ApiParam</code></h3><p>说明：用在请求方法中，描述参数信息</p>\n<p>常用参数：</p>\n<ul>\n<li>name：参数名称，参数名称可以覆盖方法参数名称，路径参数必须与方法参数一致</li>\n<li>value：参数的简要说明。</li>\n<li>defaultValue：参数默认值</li>\n<li>required：属性是否必填，默认为 false （路径参数必须填）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping</span>(value=<span class=\"string\">\"/login\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ApiOperation</span>(value = <span class=\"string\">\"登录检测\"</span>, notes=<span class=\"string\">\"根据用户名、密码判断该用户是否存在\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> UserModel <span class=\"title\">login</span><span class=\"params\">(@ApiParam(name = <span class=\"string\">\"model\"</span>, value = <span class=\"string\">\"用户信息Model\"</span>)</span> UserModel model)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ApiModel\"><a href=\"#ApiModel\" class=\"headerlink\" title=\"@ApiModel\"></a><code>@ApiModel</code></h3><p>说明：用于响应类上，表示一个返回响应数据的信息（这种一般用在 POST 创建的时候，使用 <code>@RequestBody</code> 这样的场景，请求参数无法使用 <code>@ApiImplicitParam</code> 注解进行描述的时候）；<code>@ApiModelProperty</code>：用在属性上，描述响应类的属性</p>\n<p>其他参数(@ApiModelProperty)：</p>\n<ul>\n<li>value 此属性的简要说明。</li>\n<li>name 允许覆盖属性名称</li>\n<li>allowableValues 限制参数的可接受值。1.以逗号分隔的列表 2.范围值 3.设置最小值/最大值</li>\n<li>access 允许从 API 文档中过滤属性。<ul>\n<li>notes 目前尚未使用。</li>\n</ul>\n</li>\n<li>dataType 参数的数据类型。可以是类名或者参数名，会覆盖类的属性名称。</li>\n<li>required 参数是否必传，默认为 false</li>\n<li>position 允许在类中对属性进行排序。默认为 0</li>\n<li>hidden 允许在 Swagger 模型定义中隐藏该属性。</li>\n<li>example 属性的示例。</li>\n<li>readOnly 将属性设定为只读。</li>\n<li>reference 指定对相应类型定义的引用，覆盖指定的任何参数值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiModel</span>(value=<span class=\"string\">\"用户登录信息\"</span>, description=<span class=\"string\">\"用于判断用户是否存在\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserModel</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 用户名</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@ApiModelProperty</span>(value=<span class=\"string\">\"用户名\"</span>)</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String account;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 密码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value=<span class=\"string\">\"密码\"</span>)</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ApiResponses\"><a href=\"#ApiResponses\" class=\"headerlink\" title=\"@ApiResponses\"></a><code>@ApiResponses</code></h3><p>说明：用在请求的方法上，表示一组响应；<code>@ApiResponse</code>：用在 <code>@ApiResponses</code> 中，一般用于表达一个错误的响应信息</p>\n<p>常用参数：</p>\n<ul>\n<li>code：数字，例如 400</li>\n<li>message：信息，例如 “请求参数没填好”</li>\n<li>response：抛出异常的类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping</span>(value=<span class=\"string\">\"/update/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ApiOperation</span>(value = <span class=\"string\">\"修改用户信息\"</span>,notes = <span class=\"string\">\"打开页面并修改指定用户信息\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ApiResponses</span>(&#123;</span><br><span class=\"line\">    <span class=\"meta\">@ApiResponse</span>(code=<span class=\"number\">400</span>,message=<span class=\"string\">\"请求参数没填好\"</span>),</span><br><span class=\"line\">    <span class=\"meta\">@ApiResponse</span>(code=<span class=\"number\">404</span>,message=<span class=\"string\">\"请求路径没有或页面跳转路径不对\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">update</span><span class=\"params\">(@PathVariable String id, UserModel model)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Swagger2 是一个规范和完整的框架，用于生成、描述、调用和可视化Restful风格的web服务</p>\n<h1 id=\"SpringBoot集成Swagger2\"><a href=\"#SpringBoot集成Swagger2\" class=\"headerlink\" title=\"SpringBoot集成Swagger2\"></a>SpringBoot集成Swagger2</h1><p><strong>添加依赖</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Swagger2 Begin --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- Swagger2 End --&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建一个Java 配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.service.ApiInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/28 10:50</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger</span>2</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Swagger2Configuration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">createRestApi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .apiInfo(apiInfo())</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">\"com.example.demo.swagger2.controller\"</span>))</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ApiInfo <span class=\"title\">apiInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApiInfoBuilder()</span><br><span class=\"line\">                .title(<span class=\"string\">\"标题：某公司_用户信息管理系统_接口文档\"</span>)</span><br><span class=\"line\">                .description(<span class=\"string\">\"描述：用于管理集团旗下公司的人员信息,具体包括XXX,XXX模块...\"</span>)</span><br><span class=\"line\">                .termsOfServiceUrl(<span class=\"string\">\"http://www.baidu.com\"</span>)</span><br><span class=\"line\">                .version(<span class=\"string\">\"1.0.0\"</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>RequestHandlerSelectors.basePackage(&quot;com.example.demo.swagger2.controller&quot;)</code>为 Controller 包路径，不然生成的文档扫描不到接口</p>\n<p><code>@EnableSwagger2</code>表示开启 Swagger</p>\n<p><strong>响应数据</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/28 11:34</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel</span>(value=<span class=\"string\">\"用户信息\"</span>, description=<span class=\"string\">\"用户描述\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value=<span class=\"string\">\"用户ID\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value=<span class=\"string\">\"用户名\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value=<span class=\"string\">\"密码\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String userId, String username, String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userId = userId;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.password = password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用 Swagger2 在 Controller 中增加 Swagger2 相关注解，代码如下：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.swagger2.entity.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.Api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiOperation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.DeleteMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PutMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/28 11:35</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Api</span>(tags = <span class=\"string\">\"用户信息管理\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/user/\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> List&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        userList.add(<span class=\"keyword\">new</span> User(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"admin\"</span>, <span class=\"string\">\"123456\"</span>));</span><br><span class=\"line\">        userList.add(<span class=\"keyword\">new</span> User(<span class=\"string\">\"2\"</span>, <span class=\"string\">\"jacks\"</span>, <span class=\"string\">\"111111\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation</span>(<span class=\"string\">\"获取列表\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"list\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">userList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation</span>(<span class=\"string\">\"新增用户\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"save\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userList.add(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation</span>(<span class=\"string\">\"更新用户\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ApiImplicitParam</span>(name = <span class=\"string\">\"user\"</span>, value = <span class=\"string\">\"单个用户信息\"</span>, dataType = <span class=\"string\">\"User\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@PutMapping</span>(<span class=\"string\">\"update\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">update</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userList.remove(user) &amp;&amp; userList.add(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation</span>(<span class=\"string\">\"批量删除\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ApiImplicitParam</span>(name = <span class=\"string\">\"users\"</span>, value = <span class=\"string\">\"N个用户信息\"</span>, dataType = <span class=\"string\">\"List&lt;User&gt;\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@DeleteMapping</span>(<span class=\"string\">\"delete\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(@RequestBody List&lt;User&gt; users)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userList.removeAll(users);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>访问 Swagger2,访问地址：<a href=\"http://ip:port/swagger-ui.html\" target=\"_blank\" rel=\"noopener\">http://ip:port/swagger-ui.html</a></strong><br><img src=\"https://414706657.oss-cn-shenzhen.aliyuncs.com/swagger2.png\" alt></p>\n<h1 id=\"Swagger-常用注解说明\"><a href=\"#Swagger-常用注解说明\" class=\"headerlink\" title=\"Swagger 常用注解说明\"></a>Swagger 常用注解说明</h1><ul>\n<li><code>@Api</code>：修饰整个类，描述 Controller 的作用</li>\n<li><code>@ApiOperation</code>：描述一个类的一个方法，或者说一个接口</li>\n<li><code>@ApiParam</code>：单个参数描述</li>\n<li><code>@ApiModel</code>：用对象来接收参数</li>\n<li><code>@ApiProperty</code>：用对象接收参数时，描述对象的一个字段</li>\n<li><code>@ApiResponse</code>：HTTP 响应其中 1 个描述</li>\n<li><code>@ApiResponses</code>：HTTP 响应整体描述</li>\n<li><code>@ApiIgnore</code>：使用该注解忽略这个API</li>\n<li><code>@ApiError</code>：发生错误返回的信息</li>\n<li><code>@ApiImplicitParam</code>：一个请求参数</li>\n<li><code>@ApiImplicitParams</code>：多个请求参数</li>\n</ul>\n<h3 id=\"ApiImplicitParams\"><a href=\"#ApiImplicitParams\" class=\"headerlink\" title=\"@ApiImplicitParams\"></a><code>@ApiImplicitParams</code></h3><p>说明：用在请求的方法上，表示一组参数说明；<code>@ApiImplicitParam</code>：用在 <code>@ApiImplicitParams</code> 注解中，指定一个请求参数的各个方面</p>\n<p>常用参数：</p>\n<ul>\n<li>name：参数名，参数名称可以覆盖方法参数名称，路径参数必须与方法参数一致</li>\n<li>value：参数的汉字说明、解释</li>\n<li>required：参数是否必须传，默认为 false （路径参数必填）</li>\n<li>paramType：参数放在哪个地方<ul>\n<li>header 请求参数的获取：<code>@RequestHeader</code></li>\n<li>query 请求参数的获取：<code>@RequestParam</code></li>\n<li>path（用于 restful 接口）–&gt; 请求参数的获取：<code>@PathVariable</code></li>\n<li>body（不常用）</li>\n<li>form（不常用）</li>\n</ul>\n</li>\n<li>dataType：参数类型，默认 String，其它值 dataType=”Integer”</li>\n<li>defaultValue：参数的默认值</li>\n</ul>\n<p>其他参数（<code>@ApiImplicitParam</code>）：</p>\n<ul>\n<li>allowableValues 限制参数的可接受值。1.以逗号分隔的列表 2.范围值 3.设置最小值/最大值</li>\n<li>access 允许从API文档中过滤参数。</li>\n<li>allowMultiple 指定参数是否可以通过具有多个事件接受多个值，默认为 false</li>\n<li>example 单个示例</li>\n<li>examples 参数示例。仅适用于 BodyParameters</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping</span>(value=<span class=\"string\">\"/login\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ApiOperation</span>(value = <span class=\"string\">\"登录检测\"</span>, notes=<span class=\"string\">\"根据用户名、密码判断该用户是否存在\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ApiImplicitParams</span>(&#123;</span><br><span class=\"line\">    <span class=\"meta\">@ApiImplicitParam</span>(name = <span class=\"string\">\"name\"</span>, value = <span class=\"string\">\"用户名\"</span>, required = <span class=\"keyword\">false</span>, paramType = <span class=\"string\">\"query\"</span>, dataType = <span class=\"string\">\"String\"</span>),</span><br><span class=\"line\">    <span class=\"meta\">@ApiImplicitParam</span>(name = <span class=\"string\">\"pass\"</span>, value = <span class=\"string\">\"密码\"</span>, required = <span class=\"keyword\">false</span>, paramType = <span class=\"string\">\"query\"</span>, dataType = <span class=\"string\">\"String\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> UserModel <span class=\"title\">login</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"name\"</span>, required = <span class=\"keyword\">false</span>)</span> String account,</span></span><br><span class=\"line\"><span class=\"function\">@<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"pass\"</span>, required = <span class=\"keyword\">false</span>)</span> String password)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ApiParam\"><a href=\"#ApiParam\" class=\"headerlink\" title=\"@ApiParam\"></a><code>@ApiParam</code></h3><p>说明：用在请求方法中，描述参数信息</p>\n<p>常用参数：</p>\n<ul>\n<li>name：参数名称，参数名称可以覆盖方法参数名称，路径参数必须与方法参数一致</li>\n<li>value：参数的简要说明。</li>\n<li>defaultValue：参数默认值</li>\n<li>required：属性是否必填，默认为 false （路径参数必须填）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping</span>(value=<span class=\"string\">\"/login\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ApiOperation</span>(value = <span class=\"string\">\"登录检测\"</span>, notes=<span class=\"string\">\"根据用户名、密码判断该用户是否存在\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> UserModel <span class=\"title\">login</span><span class=\"params\">(@ApiParam(name = <span class=\"string\">\"model\"</span>, value = <span class=\"string\">\"用户信息Model\"</span>)</span> UserModel model)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ApiModel\"><a href=\"#ApiModel\" class=\"headerlink\" title=\"@ApiModel\"></a><code>@ApiModel</code></h3><p>说明：用于响应类上，表示一个返回响应数据的信息（这种一般用在 POST 创建的时候，使用 <code>@RequestBody</code> 这样的场景，请求参数无法使用 <code>@ApiImplicitParam</code> 注解进行描述的时候）；<code>@ApiModelProperty</code>：用在属性上，描述响应类的属性</p>\n<p>其他参数(@ApiModelProperty)：</p>\n<ul>\n<li>value 此属性的简要说明。</li>\n<li>name 允许覆盖属性名称</li>\n<li>allowableValues 限制参数的可接受值。1.以逗号分隔的列表 2.范围值 3.设置最小值/最大值</li>\n<li>access 允许从 API 文档中过滤属性。<ul>\n<li>notes 目前尚未使用。</li>\n</ul>\n</li>\n<li>dataType 参数的数据类型。可以是类名或者参数名，会覆盖类的属性名称。</li>\n<li>required 参数是否必传，默认为 false</li>\n<li>position 允许在类中对属性进行排序。默认为 0</li>\n<li>hidden 允许在 Swagger 模型定义中隐藏该属性。</li>\n<li>example 属性的示例。</li>\n<li>readOnly 将属性设定为只读。</li>\n<li>reference 指定对相应类型定义的引用，覆盖指定的任何参数值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiModel</span>(value=<span class=\"string\">\"用户登录信息\"</span>, description=<span class=\"string\">\"用于判断用户是否存在\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserModel</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 用户名</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@ApiModelProperty</span>(value=<span class=\"string\">\"用户名\"</span>)</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String account;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 密码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value=<span class=\"string\">\"密码\"</span>)</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ApiResponses\"><a href=\"#ApiResponses\" class=\"headerlink\" title=\"@ApiResponses\"></a><code>@ApiResponses</code></h3><p>说明：用在请求的方法上，表示一组响应；<code>@ApiResponse</code>：用在 <code>@ApiResponses</code> 中，一般用于表达一个错误的响应信息</p>\n<p>常用参数：</p>\n<ul>\n<li>code：数字，例如 400</li>\n<li>message：信息，例如 “请求参数没填好”</li>\n<li>response：抛出异常的类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping</span>(value=<span class=\"string\">\"/update/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ApiOperation</span>(value = <span class=\"string\">\"修改用户信息\"</span>,notes = <span class=\"string\">\"打开页面并修改指定用户信息\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ApiResponses</span>(&#123;</span><br><span class=\"line\">    <span class=\"meta\">@ApiResponse</span>(code=<span class=\"number\">400</span>,message=<span class=\"string\">\"请求参数没填好\"</span>),</span><br><span class=\"line\">    <span class=\"meta\">@ApiResponse</span>(code=<span class=\"number\">404</span>,message=<span class=\"string\">\"请求路径没有或页面跳转路径不对\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">update</span><span class=\"params\">(@PathVariable String id, UserModel model)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>"},{"title":"XML文档解析","date":"2019-09-04T02:20:45.000Z","_content":"","source":"_posts/XML文档解析.md","raw":"---\ntitle: XML文档解析\ndate: 2019-09-04 10:20:45\ntags:\n---\n","slug":"XML文档解析","published":1,"updated":"2021-04-22T03:43:26.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcz8p001fko9bxuwd2xxy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"jar包后台运行","date":"2020-01-21T06:26:50.000Z","_content":"\n```\n后台运行 nohup java -jar xxx.jar &\n```\n\n**查看端口进程**\n\n```\nlsof -i:8080\n```\n\n\n","source":"_posts/jar包后台运行.md","raw":"---\ntitle: jar包后台运行\ndate: 2020-01-21 14:26:50\ntags:\n---\n\n```\n后台运行 nohup java -jar xxx.jar &\n```\n\n**查看端口进程**\n\n```\nlsof -i:8080\n```\n\n\n","slug":"jar包后台运行","published":1,"updated":"2021-04-22T03:43:26.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcz8t001hko9bamhzuwz3","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后台运行 nohup java -jar xxx.jar &amp;</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看端口进程</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:8080</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后台运行 nohup java -jar xxx.jar &amp;</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看端口进程</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:8080</span><br></pre></td></tr></table></figure>\n\n"},{"title":"iTerm2与远程服务器进行文件上传、下载","date":"2021-04-30T06:37:51.000Z","_content":"- 上传文件\n```test\n#scp 【本地文件路径】 【服务器用户名】@【服务器ip】：【服务器文件存放路径】\nscp local_folder remote_username@remote_ip:remote_folder\n\n#示例\nscp /usr/123.txt root@192.168.31.200:/home\n\n#上传文件夹(加-r参数)\nscp -r local_folder   remote_username@remote_ip:remote_folder\n```\n- 下载文件\n```test\n#scp 【服务器用户名】@【服务器地址】：【服务器上存放文件的路径】【本地文件的路径】\nscp -r remote_username@remote_ip:remote_folder local_folder\n```\n- scp相关参数\n```test\n-v 详细显示输出,显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题\n-r 递归处理，递归复制整个目录\n-C 使能压缩选项\n-p 保留原文件的修改时间，访问时间和访问权限。\n-P port 选择传输端口\n-4 强行使用 IPV4 地址\n-6 强行使用 IPV6 地址\n\n```","source":"_posts/iTerm2与远程服务器进行文件上传、下载.md","raw":"---\ntitle: iTerm2与远程服务器进行文件上传、下载\ndate: 2021-04-30 14:37:51\ntags:\n---\n- 上传文件\n```test\n#scp 【本地文件路径】 【服务器用户名】@【服务器ip】：【服务器文件存放路径】\nscp local_folder remote_username@remote_ip:remote_folder\n\n#示例\nscp /usr/123.txt root@192.168.31.200:/home\n\n#上传文件夹(加-r参数)\nscp -r local_folder   remote_username@remote_ip:remote_folder\n```\n- 下载文件\n```test\n#scp 【服务器用户名】@【服务器地址】：【服务器上存放文件的路径】【本地文件的路径】\nscp -r remote_username@remote_ip:remote_folder local_folder\n```\n- scp相关参数\n```test\n-v 详细显示输出,显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题\n-r 递归处理，递归复制整个目录\n-C 使能压缩选项\n-p 保留原文件的修改时间，访问时间和访问权限。\n-P port 选择传输端口\n-4 强行使用 IPV4 地址\n-6 强行使用 IPV6 地址\n\n```","slug":"iTerm2与远程服务器进行文件上传、下载","published":1,"updated":"2021-04-30T06:41:03.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcz8w001iko9bitlz8d7i","content":"<ul>\n<li><p>上传文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#scp 【本地文件路径】 【服务器用户名】@【服务器ip】：【服务器文件存放路径】</span><br><span class=\"line\">scp local_folder remote_username@remote_ip:remote_folder</span><br><span class=\"line\"></span><br><span class=\"line\">#示例</span><br><span class=\"line\">scp /usr/123.txt root@192.168.31.200:/home</span><br><span class=\"line\"></span><br><span class=\"line\">#上传文件夹(加-r参数)</span><br><span class=\"line\">scp -r local_folder   remote_username@remote_ip:remote_folder</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#scp 【服务器用户名】@【服务器地址】：【服务器上存放文件的路径】【本地文件的路径】</span><br><span class=\"line\">scp -r remote_username@remote_ip:remote_folder local_folder</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>scp相关参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-v 详细显示输出,显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题</span><br><span class=\"line\">-r 递归处理，递归复制整个目录</span><br><span class=\"line\">-C 使能压缩选项</span><br><span class=\"line\">-p 保留原文件的修改时间，访问时间和访问权限。</span><br><span class=\"line\">-P port 选择传输端口</span><br><span class=\"line\">-4 强行使用 IPV4 地址</span><br><span class=\"line\">-6 强行使用 IPV6 地址</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>上传文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#scp 【本地文件路径】 【服务器用户名】@【服务器ip】：【服务器文件存放路径】</span><br><span class=\"line\">scp local_folder remote_username@remote_ip:remote_folder</span><br><span class=\"line\"></span><br><span class=\"line\">#示例</span><br><span class=\"line\">scp /usr/123.txt root@192.168.31.200:/home</span><br><span class=\"line\"></span><br><span class=\"line\">#上传文件夹(加-r参数)</span><br><span class=\"line\">scp -r local_folder   remote_username@remote_ip:remote_folder</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#scp 【服务器用户名】@【服务器地址】：【服务器上存放文件的路径】【本地文件的路径】</span><br><span class=\"line\">scp -r remote_username@remote_ip:remote_folder local_folder</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>scp相关参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-v 详细显示输出,显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题</span><br><span class=\"line\">-r 递归处理，递归复制整个目录</span><br><span class=\"line\">-C 使能压缩选项</span><br><span class=\"line\">-p 保留原文件的修改时间，访问时间和访问权限。</span><br><span class=\"line\">-P port 选择传输端口</span><br><span class=\"line\">-4 强行使用 IPV4 地址</span><br><span class=\"line\">-6 强行使用 IPV6 地址</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Zookeeper的高可用集群与leader选举策略","date":"2019-07-17T06:23:02.000Z","_content":"\n\n# Zookeeper的高可用集群与leader选举策略\n\n### 一、概述\n\n+ zookeeper作为分布式系统协调者和管理者，承担着联结分布式系统的各组件来组成一个完整服务的职责，如kafka作为一个分布式集群，在kafka的内部体系结构中包含消息生产者，消费消费者，消息存储broker三个核心组件，kafka通过在zookeeper中维护这三大组件的运作信息，并且这三大组件分别通过zookeeper获取其他组件的运作信息或者获取组件内部其他子组件的运作状态来协同工作，如消息消费者节点将其所消费的消息主题的分区的消息offset上传到zookeeper中，当该消费者机器节点宕机时，另外一个消费者可以基于zookeeper中保存的消息消费情况，继续接着消费数据，避免数据重复，从而实现了不同消费者节点之间的协作。\n+ 所以zookeeper自身需要保证高可用，这样才能作为分布式系统的大管家，保证分布式系统的稳定运作。zookeeper的高可用也是通过集群的方式来实现的，即多个zookeeper实例节点共同组成一个集群来避免单点问题。\n+ 是一种分布式协调服务，用于管理大型主机。数据模型类似于数据结构当中的树，树是由节点所组成，Zookeeper 的数据存储也同样是基于节点，这种节点叫做 Znode\n  \n  #### Znode\n  - Znode包含哪些元素\n  \t- data：Znode 存储的数据信息。\n  \t- ACL：记录 Znode 的访问权限，即哪些人或哪些 IP 可以访问本节点。\n  \t- stat：包含 Znode 的各种元数据，比如事务 ID、版本号、时间戳、大小等等。\n  \t- child：当前节点的子节点引用 Zookeeper的设计初衷就是为了实现分布式锁\n  - Znode 分为四种类型：\n  \t- 持久节点（PERSISTENT）\n  \t- 持久节点顺序节点（PERSISTENT_SEQUENTIAL）\n  \t- 临时节点（EPHEMERAL）\n  \t- 临时顺序节点（EPHEMERAL_SEQUENTIAL）\n\n### 二、高可用集群\n\n- zookeeper作为分布式系统协调者，在数据存储方面，zookeeper将数据组织成目录树的结构，然后在每个目录节点存放部分数据。从zookeeper集群角度而言，集群内每个zookeeper节点存放的都是相同的数据，这个跟Redis的集群是不一样的，Redis的集群主要用于实现一个分布式数据库来进行海量数据存储，所以每个节点存放不同的数据。而zookeeper集群的主要目的是实现高可用，所以在设计层面是基于主从来设计的，这样当主节点宕机时，可以将某个从节点升级为主节点，从而避免主节点的单点问题，实现高可用。\n\n- 在数据读写方面，由于zookeeper集群是一个主从结构集群，故主节点负责处理写请求，然后将写请求同步给从节点，从而实现整个集群的数据一致性。所以zookeeper也是适合于读多写少的应用场景的。\n\n#### 机器节点角色\n\n  - 在zookeeper集群中，通过给节点定义角色来区分不同节点的功能。由以上分析可知，zookeeper集群是一个主从结构集群，其中角色定义包括三种：leader，follower，observer。\n#### leader：领导者\n\n- leader节点是zookeeper集群的主节点，主要负责所有的写请求，也可以处理读请求。除此之外，需要维持与从节点，即follower节点和observer节点的心跳，从而实时监测从节点的运作情况和通知从节点自身的运作情况，如假如leader节点宕机了，则不会再发心跳包给follower节点和observer节点，此时follower节点才能发现主节点挂了，从而进行新一轮leader选举实现崩溃恢复。\n####  follower：跟随者\n- follower节点是zookeeper集群的从节点，主要负责处理客户端的读请求，对于写请求则首先统一转发给leader节点，然后在leader节点执行写请求时，会将写请求以proposal的方式发送给向所有follower节点，投票来决定是否需要执行此次写请求，所以follower节点需要ack响应leader节点来进行投票。如果投票通过，则leader向所有的follower和observer节点发送提交commit请求，从而在所有节点执行本次数据写操作。\n- 除了对leader节点的写请求进行投票外，follower节点还需要对leader节点的选举进行投票，从而选举出leader节点。\n#### observer：观察者\n- observer节点跟follower节点差不多，也是主要处理读请求，对于写请求则统一转发给leader节点。与follower节点不同的是，observer节点没有投票权，即不参与leader节点发起的写请求的投票和leader选举的投票，只是从leader节点同步数据，处理读请求，所以observer节点主要是对zookeeper集群的读请求的拓展，所以说zookeeper是适合读多写少的应用场景。\n#### 机器节点状态与心跳包\n- 每个节点的状态跟节点的角色类似，主要包含LOOKING，LEADING, FOLLOWING和OBSERVING四种。\n- LOOKING：不确定leader节点的状态，此时该节点会认为当前集群不存在leader节点，故会主动发起一次leader选举，广播选举包，即投给自己，给其他节点。此时leader节点收到后会将自己的LEADING状态告诉该节点并投票给leader自身，其他follower节点收到后，则是将自己的FOLLOWING状态告诉该节点并投票给leader节点，该节点收到leader和其他follower的状态和投票后，知道当前leader节点的信息，并通过其他follower的投票确认该leader节点确实是leader节点，则设置自身状态为FOLLOWING，成为当前leader的follower节点。\n- FOLLOWING：跟随者状态，即自身角色是follower。\n- LEADING：领导状态，自身角色为leader，并且维持着与follower和observer的心跳。\n- OBSERVING：观察者状态，即自身角色是observer。\n### 三、Zab协议\n- Zab协议，即原子广播协议，主要定义了zookeeper集群的数据同步方式，从而实现集群数据的最终一致性和定义了在leader节点宕机时的leader选举方式，从而实现集群的高可用。\n\n#### 1. 写请求：原子广播\n\n- 由上面的分析可知，zookeeper集群的每个节点的数据是一致的，并且由leader节点负责处理所有的写请求，然后再同步给follower和observer节点。\n- leader节点执行一次写请求的过程如下：\n\t- 1. 客户端向leader节点发送写请求，或者follower节点或者observer节点向leader节点转发写请求；\n\t- 2. leader节点收到写请求，首先持久化到本地文件，然后将写请求以proposal的方式，注意proposal是包含写请求的修改操作的内容的，通过与follower节点维持的长连接（即心跳包来维持），广播给所有的follower节点并等待follower节点的ack；\n\t- 3. follower节点和observer接收到该proposal，将写操作持久化到本地，然后follower节点会响应ack给leader；\n\t- 4. leader只要收到超过半数follower节点的ack，即n/2+1个（leader自身也算一个ack），其中n为follower节点的个数，则向所有的follower和observer发送提交请求commit。注意这个过程有点像两阶段提交2PC，不同之处是2PC需要收到所有节点的ack才执行提交操作，而zab协议则只需要收到超过半数即提交，故性能相对2PC较好。不过这里说收到超过半数即提交不是说其他还没收到的节点就可以不同步，其他还没发送ack或者ack还没传到leader节点的follower还会继续同步数据，除非这个节点宕机了；\n\t- 5. leader节点，follower节点，observer节点收到commit请求后，则执行写操作，修改节点的内存数据，从而保证了数据持久性。\n#### 消息有序性：顺序一致性\n- 由以上过程可知，leader节点可能同时收到多个写请求，而写操作的过程又是异步非阻塞的，即leader可以同时处理多个写请求，而不需要等待前一个写请求完成以上过程才能继续下一个写请求，所以这里就存在一个消息有序性问题。\n- zookeeper主要是利用一个全局有序消息id和FIFO队列来实现的。\n- 全局有序id：leader节点每处理一个写请求都会为该写请求分配一个全局有序的消息id，称为zxid。zxid是一个64位的数字，其中前32位选举轮次epoch，后32位本轮次处理事务次数。即每经过一次leader选举，则epoch递增，处理事务次数从0开始。故在整个运行过程中，每个写请求都是全局唯一的。\n- FIFO队列：leader节点会发送多个写请求对应的proposal给follower，leader节点会为每个follower节点都维护一个FIFO队列，从而实现对该follower的所有proposal按照FIFO的顺序进行ack处理，保证写请求的先后顺序一致。\n#### 最终一致性\n- zookeeper集群是一个高可用集群，实现的是数据的最终一致性，即集群各节点的数据最终会得到一致，而不是强一致性。由分布式的CAP理论可知，任何时候只能存在CP或者AP，即高可用+分区容忍性，或者强一致性和分区容忍性，CA，即高可用和强一致性是不可能同时存在的，因为数据需要通过网络在不同节点之间传播，由于网络的不稳定性，总是存在延迟或者数据丢失，所以不同节点的数据可能不一致。\n####  崩溃恢复与leader选举：FastLeaderElection机制\n\n- 由于leader节点基于心跳机制维持与follower和observer节点的长连接，故当leader节点宕机之后，该连接就断开了，follower和observer就不会再继续接收到leader的心跳包，或者leader节点失去大多数的followers，则会进入崩溃恢复阶段，重新进行leader选举。\n#### 选举的投票数据\n- leader选举时，每个follower节点的投票包的相关核心数据如下：\n\t- 1. logicalClock：该节点发起的第几轮投票，每选举一次加1；\n\t- 2. self_id：当前节点自身的myid；\n\t- 3. self_zxid：当前节点自身所保存的数据的最大zxid，越大说明处理了越多数据写请求；\n\t- 4. vote_id：当前节点投票给的节点的myid；\n\t- 5. vote_zxid：当前节点投票给的节点的数据的最大zxid。\n    \n#### leader选举的过程\n\n- 1. leader选举开始时，每个follower节点首先清空自己的投票箱，然后投票给自己，并通过广播的方式通知所有其他节点给自己投票；\n- 2. 每个follower节点接收到其他follower节点的选票，将该外部选票与自己的选票进行对比，对比主要是基于以上5个核心数据项来展开：\n\t- 1. 选举轮次：比较logicalClock，如果外部选票的logicalClock大于自己的，则说明自己的选举轮次落后于该外部节点了，则清空自己的投票箱，并将自己的投票更新为当前轮次后重新广播投票出去；小于则忽略该外部选票；等于则进入下面步骤继续比较其他数据；\n\t- 2. vote_zxid大小比较：将外部选票的vote_zxid与自己的投票的vote_zxid进行对比，如果外部的大，则将自己的（vote_myid，vote_zxid）更新为该外部选票的vote_myid和vote_zxid并广播出去，即投给这个vote_zxid更大的vote_myid；并更新自身的投票箱，即添加或者更新该外部投票对应的vote_myid的选票情况。因为在每个节点的投票箱中，对于集群中的所有参与投票follower节点只能存在一张投票，即当当前节点收到某个节点的多次投票时，则需要进行覆盖，如节点A刚开始收到节点B投给B自己的投票，A放入投票箱为（B,B），后来又收到B投给C，则更新为（B,C），此时A的投票箱不再存在（B，B）的这种选票了，而是更新为了（B,C）；\n\t- 3. vote_myid大小比较：如果vote_zxid相同，则投票给vote_myid更大的节点；\n\t- 4. 重复以上过程，当某个节点发现过半数的follower节点都投给了自己，则更新自己的状态为LEADING，其他节点则更新自己的状态为FOLLOWING，投票结束。接下来进入数据同步阶段。\n\t- 5. 数据同步阶段：主要是当前新的leader节点将自己的已经commit的数据同步给其他follower节点。\n\n\n\n\n","source":"_posts/Zookeeper的高可用集群与leader选举策略.md","raw":"---\ntitle: Zookeeper的高可用集群与leader选举策略\ndate: 2019-07-17 14:23:02\ntags:\n    - 分布式\n---\n\n\n# Zookeeper的高可用集群与leader选举策略\n\n### 一、概述\n\n+ zookeeper作为分布式系统协调者和管理者，承担着联结分布式系统的各组件来组成一个完整服务的职责，如kafka作为一个分布式集群，在kafka的内部体系结构中包含消息生产者，消费消费者，消息存储broker三个核心组件，kafka通过在zookeeper中维护这三大组件的运作信息，并且这三大组件分别通过zookeeper获取其他组件的运作信息或者获取组件内部其他子组件的运作状态来协同工作，如消息消费者节点将其所消费的消息主题的分区的消息offset上传到zookeeper中，当该消费者机器节点宕机时，另外一个消费者可以基于zookeeper中保存的消息消费情况，继续接着消费数据，避免数据重复，从而实现了不同消费者节点之间的协作。\n+ 所以zookeeper自身需要保证高可用，这样才能作为分布式系统的大管家，保证分布式系统的稳定运作。zookeeper的高可用也是通过集群的方式来实现的，即多个zookeeper实例节点共同组成一个集群来避免单点问题。\n+ 是一种分布式协调服务，用于管理大型主机。数据模型类似于数据结构当中的树，树是由节点所组成，Zookeeper 的数据存储也同样是基于节点，这种节点叫做 Znode\n  \n  #### Znode\n  - Znode包含哪些元素\n  \t- data：Znode 存储的数据信息。\n  \t- ACL：记录 Znode 的访问权限，即哪些人或哪些 IP 可以访问本节点。\n  \t- stat：包含 Znode 的各种元数据，比如事务 ID、版本号、时间戳、大小等等。\n  \t- child：当前节点的子节点引用 Zookeeper的设计初衷就是为了实现分布式锁\n  - Znode 分为四种类型：\n  \t- 持久节点（PERSISTENT）\n  \t- 持久节点顺序节点（PERSISTENT_SEQUENTIAL）\n  \t- 临时节点（EPHEMERAL）\n  \t- 临时顺序节点（EPHEMERAL_SEQUENTIAL）\n\n### 二、高可用集群\n\n- zookeeper作为分布式系统协调者，在数据存储方面，zookeeper将数据组织成目录树的结构，然后在每个目录节点存放部分数据。从zookeeper集群角度而言，集群内每个zookeeper节点存放的都是相同的数据，这个跟Redis的集群是不一样的，Redis的集群主要用于实现一个分布式数据库来进行海量数据存储，所以每个节点存放不同的数据。而zookeeper集群的主要目的是实现高可用，所以在设计层面是基于主从来设计的，这样当主节点宕机时，可以将某个从节点升级为主节点，从而避免主节点的单点问题，实现高可用。\n\n- 在数据读写方面，由于zookeeper集群是一个主从结构集群，故主节点负责处理写请求，然后将写请求同步给从节点，从而实现整个集群的数据一致性。所以zookeeper也是适合于读多写少的应用场景的。\n\n#### 机器节点角色\n\n  - 在zookeeper集群中，通过给节点定义角色来区分不同节点的功能。由以上分析可知，zookeeper集群是一个主从结构集群，其中角色定义包括三种：leader，follower，observer。\n#### leader：领导者\n\n- leader节点是zookeeper集群的主节点，主要负责所有的写请求，也可以处理读请求。除此之外，需要维持与从节点，即follower节点和observer节点的心跳，从而实时监测从节点的运作情况和通知从节点自身的运作情况，如假如leader节点宕机了，则不会再发心跳包给follower节点和observer节点，此时follower节点才能发现主节点挂了，从而进行新一轮leader选举实现崩溃恢复。\n####  follower：跟随者\n- follower节点是zookeeper集群的从节点，主要负责处理客户端的读请求，对于写请求则首先统一转发给leader节点，然后在leader节点执行写请求时，会将写请求以proposal的方式发送给向所有follower节点，投票来决定是否需要执行此次写请求，所以follower节点需要ack响应leader节点来进行投票。如果投票通过，则leader向所有的follower和observer节点发送提交commit请求，从而在所有节点执行本次数据写操作。\n- 除了对leader节点的写请求进行投票外，follower节点还需要对leader节点的选举进行投票，从而选举出leader节点。\n#### observer：观察者\n- observer节点跟follower节点差不多，也是主要处理读请求，对于写请求则统一转发给leader节点。与follower节点不同的是，observer节点没有投票权，即不参与leader节点发起的写请求的投票和leader选举的投票，只是从leader节点同步数据，处理读请求，所以observer节点主要是对zookeeper集群的读请求的拓展，所以说zookeeper是适合读多写少的应用场景。\n#### 机器节点状态与心跳包\n- 每个节点的状态跟节点的角色类似，主要包含LOOKING，LEADING, FOLLOWING和OBSERVING四种。\n- LOOKING：不确定leader节点的状态，此时该节点会认为当前集群不存在leader节点，故会主动发起一次leader选举，广播选举包，即投给自己，给其他节点。此时leader节点收到后会将自己的LEADING状态告诉该节点并投票给leader自身，其他follower节点收到后，则是将自己的FOLLOWING状态告诉该节点并投票给leader节点，该节点收到leader和其他follower的状态和投票后，知道当前leader节点的信息，并通过其他follower的投票确认该leader节点确实是leader节点，则设置自身状态为FOLLOWING，成为当前leader的follower节点。\n- FOLLOWING：跟随者状态，即自身角色是follower。\n- LEADING：领导状态，自身角色为leader，并且维持着与follower和observer的心跳。\n- OBSERVING：观察者状态，即自身角色是observer。\n### 三、Zab协议\n- Zab协议，即原子广播协议，主要定义了zookeeper集群的数据同步方式，从而实现集群数据的最终一致性和定义了在leader节点宕机时的leader选举方式，从而实现集群的高可用。\n\n#### 1. 写请求：原子广播\n\n- 由上面的分析可知，zookeeper集群的每个节点的数据是一致的，并且由leader节点负责处理所有的写请求，然后再同步给follower和observer节点。\n- leader节点执行一次写请求的过程如下：\n\t- 1. 客户端向leader节点发送写请求，或者follower节点或者observer节点向leader节点转发写请求；\n\t- 2. leader节点收到写请求，首先持久化到本地文件，然后将写请求以proposal的方式，注意proposal是包含写请求的修改操作的内容的，通过与follower节点维持的长连接（即心跳包来维持），广播给所有的follower节点并等待follower节点的ack；\n\t- 3. follower节点和observer接收到该proposal，将写操作持久化到本地，然后follower节点会响应ack给leader；\n\t- 4. leader只要收到超过半数follower节点的ack，即n/2+1个（leader自身也算一个ack），其中n为follower节点的个数，则向所有的follower和observer发送提交请求commit。注意这个过程有点像两阶段提交2PC，不同之处是2PC需要收到所有节点的ack才执行提交操作，而zab协议则只需要收到超过半数即提交，故性能相对2PC较好。不过这里说收到超过半数即提交不是说其他还没收到的节点就可以不同步，其他还没发送ack或者ack还没传到leader节点的follower还会继续同步数据，除非这个节点宕机了；\n\t- 5. leader节点，follower节点，observer节点收到commit请求后，则执行写操作，修改节点的内存数据，从而保证了数据持久性。\n#### 消息有序性：顺序一致性\n- 由以上过程可知，leader节点可能同时收到多个写请求，而写操作的过程又是异步非阻塞的，即leader可以同时处理多个写请求，而不需要等待前一个写请求完成以上过程才能继续下一个写请求，所以这里就存在一个消息有序性问题。\n- zookeeper主要是利用一个全局有序消息id和FIFO队列来实现的。\n- 全局有序id：leader节点每处理一个写请求都会为该写请求分配一个全局有序的消息id，称为zxid。zxid是一个64位的数字，其中前32位选举轮次epoch，后32位本轮次处理事务次数。即每经过一次leader选举，则epoch递增，处理事务次数从0开始。故在整个运行过程中，每个写请求都是全局唯一的。\n- FIFO队列：leader节点会发送多个写请求对应的proposal给follower，leader节点会为每个follower节点都维护一个FIFO队列，从而实现对该follower的所有proposal按照FIFO的顺序进行ack处理，保证写请求的先后顺序一致。\n#### 最终一致性\n- zookeeper集群是一个高可用集群，实现的是数据的最终一致性，即集群各节点的数据最终会得到一致，而不是强一致性。由分布式的CAP理论可知，任何时候只能存在CP或者AP，即高可用+分区容忍性，或者强一致性和分区容忍性，CA，即高可用和强一致性是不可能同时存在的，因为数据需要通过网络在不同节点之间传播，由于网络的不稳定性，总是存在延迟或者数据丢失，所以不同节点的数据可能不一致。\n####  崩溃恢复与leader选举：FastLeaderElection机制\n\n- 由于leader节点基于心跳机制维持与follower和observer节点的长连接，故当leader节点宕机之后，该连接就断开了，follower和observer就不会再继续接收到leader的心跳包，或者leader节点失去大多数的followers，则会进入崩溃恢复阶段，重新进行leader选举。\n#### 选举的投票数据\n- leader选举时，每个follower节点的投票包的相关核心数据如下：\n\t- 1. logicalClock：该节点发起的第几轮投票，每选举一次加1；\n\t- 2. self_id：当前节点自身的myid；\n\t- 3. self_zxid：当前节点自身所保存的数据的最大zxid，越大说明处理了越多数据写请求；\n\t- 4. vote_id：当前节点投票给的节点的myid；\n\t- 5. vote_zxid：当前节点投票给的节点的数据的最大zxid。\n    \n#### leader选举的过程\n\n- 1. leader选举开始时，每个follower节点首先清空自己的投票箱，然后投票给自己，并通过广播的方式通知所有其他节点给自己投票；\n- 2. 每个follower节点接收到其他follower节点的选票，将该外部选票与自己的选票进行对比，对比主要是基于以上5个核心数据项来展开：\n\t- 1. 选举轮次：比较logicalClock，如果外部选票的logicalClock大于自己的，则说明自己的选举轮次落后于该外部节点了，则清空自己的投票箱，并将自己的投票更新为当前轮次后重新广播投票出去；小于则忽略该外部选票；等于则进入下面步骤继续比较其他数据；\n\t- 2. vote_zxid大小比较：将外部选票的vote_zxid与自己的投票的vote_zxid进行对比，如果外部的大，则将自己的（vote_myid，vote_zxid）更新为该外部选票的vote_myid和vote_zxid并广播出去，即投给这个vote_zxid更大的vote_myid；并更新自身的投票箱，即添加或者更新该外部投票对应的vote_myid的选票情况。因为在每个节点的投票箱中，对于集群中的所有参与投票follower节点只能存在一张投票，即当当前节点收到某个节点的多次投票时，则需要进行覆盖，如节点A刚开始收到节点B投给B自己的投票，A放入投票箱为（B,B），后来又收到B投给C，则更新为（B,C），此时A的投票箱不再存在（B，B）的这种选票了，而是更新为了（B,C）；\n\t- 3. vote_myid大小比较：如果vote_zxid相同，则投票给vote_myid更大的节点；\n\t- 4. 重复以上过程，当某个节点发现过半数的follower节点都投给了自己，则更新自己的状态为LEADING，其他节点则更新自己的状态为FOLLOWING，投票结束。接下来进入数据同步阶段。\n\t- 5. 数据同步阶段：主要是当前新的leader节点将自己的已经commit的数据同步给其他follower节点。\n\n\n\n\n","slug":"Zookeeper的高可用集群与leader选举策略","published":1,"updated":"2021-04-22T03:43:26.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcz8y001jko9bww3i1wb4","content":"<h1 id=\"Zookeeper的高可用集群与leader选举策略\"><a href=\"#Zookeeper的高可用集群与leader选举策略\" class=\"headerlink\" title=\"Zookeeper的高可用集群与leader选举策略\"></a>Zookeeper的高可用集群与leader选举策略</h1><h3 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h3><ul>\n<li><p>zookeeper作为分布式系统协调者和管理者，承担着联结分布式系统的各组件来组成一个完整服务的职责，如kafka作为一个分布式集群，在kafka的内部体系结构中包含消息生产者，消费消费者，消息存储broker三个核心组件，kafka通过在zookeeper中维护这三大组件的运作信息，并且这三大组件分别通过zookeeper获取其他组件的运作信息或者获取组件内部其他子组件的运作状态来协同工作，如消息消费者节点将其所消费的消息主题的分区的消息offset上传到zookeeper中，当该消费者机器节点宕机时，另外一个消费者可以基于zookeeper中保存的消息消费情况，继续接着消费数据，避免数据重复，从而实现了不同消费者节点之间的协作。</p>\n</li>\n<li><p>所以zookeeper自身需要保证高可用，这样才能作为分布式系统的大管家，保证分布式系统的稳定运作。zookeeper的高可用也是通过集群的方式来实现的，即多个zookeeper实例节点共同组成一个集群来避免单点问题。</p>\n</li>\n<li><p>是一种分布式协调服务，用于管理大型主机。数据模型类似于数据结构当中的树，树是由节点所组成，Zookeeper 的数据存储也同样是基于节点，这种节点叫做 Znode</p>\n<h4 id=\"Znode\"><a href=\"#Znode\" class=\"headerlink\" title=\"Znode\"></a>Znode</h4><ul>\n<li>Znode包含哪些元素<ul>\n<li>data：Znode 存储的数据信息。</li>\n<li>ACL：记录 Znode 的访问权限，即哪些人或哪些 IP 可以访问本节点。</li>\n<li>stat：包含 Znode 的各种元数据，比如事务 ID、版本号、时间戳、大小等等。</li>\n<li>child：当前节点的子节点引用 Zookeeper的设计初衷就是为了实现分布式锁</li>\n</ul>\n</li>\n<li>Znode 分为四种类型：<ul>\n<li>持久节点（PERSISTENT）</li>\n<li>持久节点顺序节点（PERSISTENT_SEQUENTIAL）</li>\n<li>临时节点（EPHEMERAL）</li>\n<li>临时顺序节点（EPHEMERAL_SEQUENTIAL）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、高可用集群\"><a href=\"#二、高可用集群\" class=\"headerlink\" title=\"二、高可用集群\"></a>二、高可用集群</h3><ul>\n<li><p>zookeeper作为分布式系统协调者，在数据存储方面，zookeeper将数据组织成目录树的结构，然后在每个目录节点存放部分数据。从zookeeper集群角度而言，集群内每个zookeeper节点存放的都是相同的数据，这个跟Redis的集群是不一样的，Redis的集群主要用于实现一个分布式数据库来进行海量数据存储，所以每个节点存放不同的数据。而zookeeper集群的主要目的是实现高可用，所以在设计层面是基于主从来设计的，这样当主节点宕机时，可以将某个从节点升级为主节点，从而避免主节点的单点问题，实现高可用。</p>\n</li>\n<li><p>在数据读写方面，由于zookeeper集群是一个主从结构集群，故主节点负责处理写请求，然后将写请求同步给从节点，从而实现整个集群的数据一致性。所以zookeeper也是适合于读多写少的应用场景的。</p>\n</li>\n</ul>\n<h4 id=\"机器节点角色\"><a href=\"#机器节点角色\" class=\"headerlink\" title=\"机器节点角色\"></a>机器节点角色</h4><ul>\n<li>在zookeeper集群中，通过给节点定义角色来区分不同节点的功能。由以上分析可知，zookeeper集群是一个主从结构集群，其中角色定义包括三种：leader，follower，observer。<h4 id=\"leader：领导者\"><a href=\"#leader：领导者\" class=\"headerlink\" title=\"leader：领导者\"></a>leader：领导者</h4></li>\n</ul>\n<ul>\n<li>leader节点是zookeeper集群的主节点，主要负责所有的写请求，也可以处理读请求。除此之外，需要维持与从节点，即follower节点和observer节点的心跳，从而实时监测从节点的运作情况和通知从节点自身的运作情况，如假如leader节点宕机了，则不会再发心跳包给follower节点和observer节点，此时follower节点才能发现主节点挂了，从而进行新一轮leader选举实现崩溃恢复。<h4 id=\"follower：跟随者\"><a href=\"#follower：跟随者\" class=\"headerlink\" title=\"follower：跟随者\"></a>follower：跟随者</h4></li>\n<li>follower节点是zookeeper集群的从节点，主要负责处理客户端的读请求，对于写请求则首先统一转发给leader节点，然后在leader节点执行写请求时，会将写请求以proposal的方式发送给向所有follower节点，投票来决定是否需要执行此次写请求，所以follower节点需要ack响应leader节点来进行投票。如果投票通过，则leader向所有的follower和observer节点发送提交commit请求，从而在所有节点执行本次数据写操作。</li>\n<li>除了对leader节点的写请求进行投票外，follower节点还需要对leader节点的选举进行投票，从而选举出leader节点。<h4 id=\"observer：观察者\"><a href=\"#observer：观察者\" class=\"headerlink\" title=\"observer：观察者\"></a>observer：观察者</h4></li>\n<li>observer节点跟follower节点差不多，也是主要处理读请求，对于写请求则统一转发给leader节点。与follower节点不同的是，observer节点没有投票权，即不参与leader节点发起的写请求的投票和leader选举的投票，只是从leader节点同步数据，处理读请求，所以observer节点主要是对zookeeper集群的读请求的拓展，所以说zookeeper是适合读多写少的应用场景。<h4 id=\"机器节点状态与心跳包\"><a href=\"#机器节点状态与心跳包\" class=\"headerlink\" title=\"机器节点状态与心跳包\"></a>机器节点状态与心跳包</h4></li>\n<li>每个节点的状态跟节点的角色类似，主要包含LOOKING，LEADING, FOLLOWING和OBSERVING四种。</li>\n<li>LOOKING：不确定leader节点的状态，此时该节点会认为当前集群不存在leader节点，故会主动发起一次leader选举，广播选举包，即投给自己，给其他节点。此时leader节点收到后会将自己的LEADING状态告诉该节点并投票给leader自身，其他follower节点收到后，则是将自己的FOLLOWING状态告诉该节点并投票给leader节点，该节点收到leader和其他follower的状态和投票后，知道当前leader节点的信息，并通过其他follower的投票确认该leader节点确实是leader节点，则设置自身状态为FOLLOWING，成为当前leader的follower节点。</li>\n<li>FOLLOWING：跟随者状态，即自身角色是follower。</li>\n<li>LEADING：领导状态，自身角色为leader，并且维持着与follower和observer的心跳。</li>\n<li>OBSERVING：观察者状态，即自身角色是observer。<h3 id=\"三、Zab协议\"><a href=\"#三、Zab协议\" class=\"headerlink\" title=\"三、Zab协议\"></a>三、Zab协议</h3></li>\n<li>Zab协议，即原子广播协议，主要定义了zookeeper集群的数据同步方式，从而实现集群数据的最终一致性和定义了在leader节点宕机时的leader选举方式，从而实现集群的高可用。</li>\n</ul>\n<h4 id=\"1-写请求：原子广播\"><a href=\"#1-写请求：原子广播\" class=\"headerlink\" title=\"1. 写请求：原子广播\"></a>1. 写请求：原子广播</h4><ul>\n<li><p>由上面的分析可知，zookeeper集群的每个节点的数据是一致的，并且由leader节点负责处理所有的写请求，然后再同步给follower和observer节点。</p>\n</li>\n<li><p>leader节点执行一次写请求的过程如下：</p>\n<ul>\n<li><ol>\n<li>客户端向leader节点发送写请求，或者follower节点或者observer节点向leader节点转发写请求；</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>leader节点收到写请求，首先持久化到本地文件，然后将写请求以proposal的方式，注意proposal是包含写请求的修改操作的内容的，通过与follower节点维持的长连接（即心跳包来维持），广播给所有的follower节点并等待follower节点的ack；</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>follower节点和observer接收到该proposal，将写操作持久化到本地，然后follower节点会响应ack给leader；</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>leader只要收到超过半数follower节点的ack，即n/2+1个（leader自身也算一个ack），其中n为follower节点的个数，则向所有的follower和observer发送提交请求commit。注意这个过程有点像两阶段提交2PC，不同之处是2PC需要收到所有节点的ack才执行提交操作，而zab协议则只需要收到超过半数即提交，故性能相对2PC较好。不过这里说收到超过半数即提交不是说其他还没收到的节点就可以不同步，其他还没发送ack或者ack还没传到leader节点的follower还会继续同步数据，除非这个节点宕机了；</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>leader节点，follower节点，observer节点收到commit请求后，则执行写操作，修改节点的内存数据，从而保证了数据持久性。<h4 id=\"消息有序性：顺序一致性\"><a href=\"#消息有序性：顺序一致性\" class=\"headerlink\" title=\"消息有序性：顺序一致性\"></a>消息有序性：顺序一致性</h4></li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>由以上过程可知，leader节点可能同时收到多个写请求，而写操作的过程又是异步非阻塞的，即leader可以同时处理多个写请求，而不需要等待前一个写请求完成以上过程才能继续下一个写请求，所以这里就存在一个消息有序性问题。</p>\n</li>\n<li><p>zookeeper主要是利用一个全局有序消息id和FIFO队列来实现的。</p>\n</li>\n<li><p>全局有序id：leader节点每处理一个写请求都会为该写请求分配一个全局有序的消息id，称为zxid。zxid是一个64位的数字，其中前32位选举轮次epoch，后32位本轮次处理事务次数。即每经过一次leader选举，则epoch递增，处理事务次数从0开始。故在整个运行过程中，每个写请求都是全局唯一的。</p>\n</li>\n<li><p>FIFO队列：leader节点会发送多个写请求对应的proposal给follower，leader节点会为每个follower节点都维护一个FIFO队列，从而实现对该follower的所有proposal按照FIFO的顺序进行ack处理，保证写请求的先后顺序一致。</p>\n<h4 id=\"最终一致性\"><a href=\"#最终一致性\" class=\"headerlink\" title=\"最终一致性\"></a>最终一致性</h4></li>\n<li><p>zookeeper集群是一个高可用集群，实现的是数据的最终一致性，即集群各节点的数据最终会得到一致，而不是强一致性。由分布式的CAP理论可知，任何时候只能存在CP或者AP，即高可用+分区容忍性，或者强一致性和分区容忍性，CA，即高可用和强一致性是不可能同时存在的，因为数据需要通过网络在不同节点之间传播，由于网络的不稳定性，总是存在延迟或者数据丢失，所以不同节点的数据可能不一致。</p>\n<h4 id=\"崩溃恢复与leader选举：FastLeaderElection机制\"><a href=\"#崩溃恢复与leader选举：FastLeaderElection机制\" class=\"headerlink\" title=\"崩溃恢复与leader选举：FastLeaderElection机制\"></a>崩溃恢复与leader选举：FastLeaderElection机制</h4></li>\n<li><p>由于leader节点基于心跳机制维持与follower和observer节点的长连接，故当leader节点宕机之后，该连接就断开了，follower和observer就不会再继续接收到leader的心跳包，或者leader节点失去大多数的followers，则会进入崩溃恢复阶段，重新进行leader选举。</p>\n<h4 id=\"选举的投票数据\"><a href=\"#选举的投票数据\" class=\"headerlink\" title=\"选举的投票数据\"></a>选举的投票数据</h4></li>\n<li><p>leader选举时，每个follower节点的投票包的相关核心数据如下：</p>\n<ul>\n<li><ol>\n<li>logicalClock：该节点发起的第几轮投票，每选举一次加1；</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>self_id：当前节点自身的myid；</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>self_zxid：当前节点自身所保存的数据的最大zxid，越大说明处理了越多数据写请求；</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>vote_id：当前节点投票给的节点的myid；</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>vote_zxid：当前节点投票给的节点的数据的最大zxid。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"leader选举的过程\"><a href=\"#leader选举的过程\" class=\"headerlink\" title=\"leader选举的过程\"></a>leader选举的过程</h4><ul>\n<li><ol>\n<li>leader选举开始时，每个follower节点首先清空自己的投票箱，然后投票给自己，并通过广播的方式通知所有其他节点给自己投票；</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>每个follower节点接收到其他follower节点的选票，将该外部选票与自己的选票进行对比，对比主要是基于以上5个核心数据项来展开：<ul>\n<li><ol>\n<li>选举轮次：比较logicalClock，如果外部选票的logicalClock大于自己的，则说明自己的选举轮次落后于该外部节点了，则清空自己的投票箱，并将自己的投票更新为当前轮次后重新广播投票出去；小于则忽略该外部选票；等于则进入下面步骤继续比较其他数据；</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>vote_zxid大小比较：将外部选票的vote_zxid与自己的投票的vote_zxid进行对比，如果外部的大，则将自己的（vote_myid，vote_zxid）更新为该外部选票的vote_myid和vote_zxid并广播出去，即投给这个vote_zxid更大的vote_myid；并更新自身的投票箱，即添加或者更新该外部投票对应的vote_myid的选票情况。因为在每个节点的投票箱中，对于集群中的所有参与投票follower节点只能存在一张投票，即当当前节点收到某个节点的多次投票时，则需要进行覆盖，如节点A刚开始收到节点B投给B自己的投票，A放入投票箱为（B,B），后来又收到B投给C，则更新为（B,C），此时A的投票箱不再存在（B，B）的这种选票了，而是更新为了（B,C）；</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>vote_myid大小比较：如果vote_zxid相同，则投票给vote_myid更大的节点；</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>重复以上过程，当某个节点发现过半数的follower节点都投给了自己，则更新自己的状态为LEADING，其他节点则更新自己的状态为FOLLOWING，投票结束。接下来进入数据同步阶段。</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>数据同步阶段：主要是当前新的leader节点将自己的已经commit的数据同步给其他follower节点。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Zookeeper的高可用集群与leader选举策略\"><a href=\"#Zookeeper的高可用集群与leader选举策略\" class=\"headerlink\" title=\"Zookeeper的高可用集群与leader选举策略\"></a>Zookeeper的高可用集群与leader选举策略</h1><h3 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h3><ul>\n<li><p>zookeeper作为分布式系统协调者和管理者，承担着联结分布式系统的各组件来组成一个完整服务的职责，如kafka作为一个分布式集群，在kafka的内部体系结构中包含消息生产者，消费消费者，消息存储broker三个核心组件，kafka通过在zookeeper中维护这三大组件的运作信息，并且这三大组件分别通过zookeeper获取其他组件的运作信息或者获取组件内部其他子组件的运作状态来协同工作，如消息消费者节点将其所消费的消息主题的分区的消息offset上传到zookeeper中，当该消费者机器节点宕机时，另外一个消费者可以基于zookeeper中保存的消息消费情况，继续接着消费数据，避免数据重复，从而实现了不同消费者节点之间的协作。</p>\n</li>\n<li><p>所以zookeeper自身需要保证高可用，这样才能作为分布式系统的大管家，保证分布式系统的稳定运作。zookeeper的高可用也是通过集群的方式来实现的，即多个zookeeper实例节点共同组成一个集群来避免单点问题。</p>\n</li>\n<li><p>是一种分布式协调服务，用于管理大型主机。数据模型类似于数据结构当中的树，树是由节点所组成，Zookeeper 的数据存储也同样是基于节点，这种节点叫做 Znode</p>\n<h4 id=\"Znode\"><a href=\"#Znode\" class=\"headerlink\" title=\"Znode\"></a>Znode</h4><ul>\n<li>Znode包含哪些元素<ul>\n<li>data：Znode 存储的数据信息。</li>\n<li>ACL：记录 Znode 的访问权限，即哪些人或哪些 IP 可以访问本节点。</li>\n<li>stat：包含 Znode 的各种元数据，比如事务 ID、版本号、时间戳、大小等等。</li>\n<li>child：当前节点的子节点引用 Zookeeper的设计初衷就是为了实现分布式锁</li>\n</ul>\n</li>\n<li>Znode 分为四种类型：<ul>\n<li>持久节点（PERSISTENT）</li>\n<li>持久节点顺序节点（PERSISTENT_SEQUENTIAL）</li>\n<li>临时节点（EPHEMERAL）</li>\n<li>临时顺序节点（EPHEMERAL_SEQUENTIAL）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、高可用集群\"><a href=\"#二、高可用集群\" class=\"headerlink\" title=\"二、高可用集群\"></a>二、高可用集群</h3><ul>\n<li><p>zookeeper作为分布式系统协调者，在数据存储方面，zookeeper将数据组织成目录树的结构，然后在每个目录节点存放部分数据。从zookeeper集群角度而言，集群内每个zookeeper节点存放的都是相同的数据，这个跟Redis的集群是不一样的，Redis的集群主要用于实现一个分布式数据库来进行海量数据存储，所以每个节点存放不同的数据。而zookeeper集群的主要目的是实现高可用，所以在设计层面是基于主从来设计的，这样当主节点宕机时，可以将某个从节点升级为主节点，从而避免主节点的单点问题，实现高可用。</p>\n</li>\n<li><p>在数据读写方面，由于zookeeper集群是一个主从结构集群，故主节点负责处理写请求，然后将写请求同步给从节点，从而实现整个集群的数据一致性。所以zookeeper也是适合于读多写少的应用场景的。</p>\n</li>\n</ul>\n<h4 id=\"机器节点角色\"><a href=\"#机器节点角色\" class=\"headerlink\" title=\"机器节点角色\"></a>机器节点角色</h4><ul>\n<li>在zookeeper集群中，通过给节点定义角色来区分不同节点的功能。由以上分析可知，zookeeper集群是一个主从结构集群，其中角色定义包括三种：leader，follower，observer。<h4 id=\"leader：领导者\"><a href=\"#leader：领导者\" class=\"headerlink\" title=\"leader：领导者\"></a>leader：领导者</h4></li>\n</ul>\n<ul>\n<li>leader节点是zookeeper集群的主节点，主要负责所有的写请求，也可以处理读请求。除此之外，需要维持与从节点，即follower节点和observer节点的心跳，从而实时监测从节点的运作情况和通知从节点自身的运作情况，如假如leader节点宕机了，则不会再发心跳包给follower节点和observer节点，此时follower节点才能发现主节点挂了，从而进行新一轮leader选举实现崩溃恢复。<h4 id=\"follower：跟随者\"><a href=\"#follower：跟随者\" class=\"headerlink\" title=\"follower：跟随者\"></a>follower：跟随者</h4></li>\n<li>follower节点是zookeeper集群的从节点，主要负责处理客户端的读请求，对于写请求则首先统一转发给leader节点，然后在leader节点执行写请求时，会将写请求以proposal的方式发送给向所有follower节点，投票来决定是否需要执行此次写请求，所以follower节点需要ack响应leader节点来进行投票。如果投票通过，则leader向所有的follower和observer节点发送提交commit请求，从而在所有节点执行本次数据写操作。</li>\n<li>除了对leader节点的写请求进行投票外，follower节点还需要对leader节点的选举进行投票，从而选举出leader节点。<h4 id=\"observer：观察者\"><a href=\"#observer：观察者\" class=\"headerlink\" title=\"observer：观察者\"></a>observer：观察者</h4></li>\n<li>observer节点跟follower节点差不多，也是主要处理读请求，对于写请求则统一转发给leader节点。与follower节点不同的是，observer节点没有投票权，即不参与leader节点发起的写请求的投票和leader选举的投票，只是从leader节点同步数据，处理读请求，所以observer节点主要是对zookeeper集群的读请求的拓展，所以说zookeeper是适合读多写少的应用场景。<h4 id=\"机器节点状态与心跳包\"><a href=\"#机器节点状态与心跳包\" class=\"headerlink\" title=\"机器节点状态与心跳包\"></a>机器节点状态与心跳包</h4></li>\n<li>每个节点的状态跟节点的角色类似，主要包含LOOKING，LEADING, FOLLOWING和OBSERVING四种。</li>\n<li>LOOKING：不确定leader节点的状态，此时该节点会认为当前集群不存在leader节点，故会主动发起一次leader选举，广播选举包，即投给自己，给其他节点。此时leader节点收到后会将自己的LEADING状态告诉该节点并投票给leader自身，其他follower节点收到后，则是将自己的FOLLOWING状态告诉该节点并投票给leader节点，该节点收到leader和其他follower的状态和投票后，知道当前leader节点的信息，并通过其他follower的投票确认该leader节点确实是leader节点，则设置自身状态为FOLLOWING，成为当前leader的follower节点。</li>\n<li>FOLLOWING：跟随者状态，即自身角色是follower。</li>\n<li>LEADING：领导状态，自身角色为leader，并且维持着与follower和observer的心跳。</li>\n<li>OBSERVING：观察者状态，即自身角色是observer。<h3 id=\"三、Zab协议\"><a href=\"#三、Zab协议\" class=\"headerlink\" title=\"三、Zab协议\"></a>三、Zab协议</h3></li>\n<li>Zab协议，即原子广播协议，主要定义了zookeeper集群的数据同步方式，从而实现集群数据的最终一致性和定义了在leader节点宕机时的leader选举方式，从而实现集群的高可用。</li>\n</ul>\n<h4 id=\"1-写请求：原子广播\"><a href=\"#1-写请求：原子广播\" class=\"headerlink\" title=\"1. 写请求：原子广播\"></a>1. 写请求：原子广播</h4><ul>\n<li><p>由上面的分析可知，zookeeper集群的每个节点的数据是一致的，并且由leader节点负责处理所有的写请求，然后再同步给follower和observer节点。</p>\n</li>\n<li><p>leader节点执行一次写请求的过程如下：</p>\n<ul>\n<li><ol>\n<li>客户端向leader节点发送写请求，或者follower节点或者observer节点向leader节点转发写请求；</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>leader节点收到写请求，首先持久化到本地文件，然后将写请求以proposal的方式，注意proposal是包含写请求的修改操作的内容的，通过与follower节点维持的长连接（即心跳包来维持），广播给所有的follower节点并等待follower节点的ack；</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>follower节点和observer接收到该proposal，将写操作持久化到本地，然后follower节点会响应ack给leader；</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>leader只要收到超过半数follower节点的ack，即n/2+1个（leader自身也算一个ack），其中n为follower节点的个数，则向所有的follower和observer发送提交请求commit。注意这个过程有点像两阶段提交2PC，不同之处是2PC需要收到所有节点的ack才执行提交操作，而zab协议则只需要收到超过半数即提交，故性能相对2PC较好。不过这里说收到超过半数即提交不是说其他还没收到的节点就可以不同步，其他还没发送ack或者ack还没传到leader节点的follower还会继续同步数据，除非这个节点宕机了；</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>leader节点，follower节点，observer节点收到commit请求后，则执行写操作，修改节点的内存数据，从而保证了数据持久性。<h4 id=\"消息有序性：顺序一致性\"><a href=\"#消息有序性：顺序一致性\" class=\"headerlink\" title=\"消息有序性：顺序一致性\"></a>消息有序性：顺序一致性</h4></li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>由以上过程可知，leader节点可能同时收到多个写请求，而写操作的过程又是异步非阻塞的，即leader可以同时处理多个写请求，而不需要等待前一个写请求完成以上过程才能继续下一个写请求，所以这里就存在一个消息有序性问题。</p>\n</li>\n<li><p>zookeeper主要是利用一个全局有序消息id和FIFO队列来实现的。</p>\n</li>\n<li><p>全局有序id：leader节点每处理一个写请求都会为该写请求分配一个全局有序的消息id，称为zxid。zxid是一个64位的数字，其中前32位选举轮次epoch，后32位本轮次处理事务次数。即每经过一次leader选举，则epoch递增，处理事务次数从0开始。故在整个运行过程中，每个写请求都是全局唯一的。</p>\n</li>\n<li><p>FIFO队列：leader节点会发送多个写请求对应的proposal给follower，leader节点会为每个follower节点都维护一个FIFO队列，从而实现对该follower的所有proposal按照FIFO的顺序进行ack处理，保证写请求的先后顺序一致。</p>\n<h4 id=\"最终一致性\"><a href=\"#最终一致性\" class=\"headerlink\" title=\"最终一致性\"></a>最终一致性</h4></li>\n<li><p>zookeeper集群是一个高可用集群，实现的是数据的最终一致性，即集群各节点的数据最终会得到一致，而不是强一致性。由分布式的CAP理论可知，任何时候只能存在CP或者AP，即高可用+分区容忍性，或者强一致性和分区容忍性，CA，即高可用和强一致性是不可能同时存在的，因为数据需要通过网络在不同节点之间传播，由于网络的不稳定性，总是存在延迟或者数据丢失，所以不同节点的数据可能不一致。</p>\n<h4 id=\"崩溃恢复与leader选举：FastLeaderElection机制\"><a href=\"#崩溃恢复与leader选举：FastLeaderElection机制\" class=\"headerlink\" title=\"崩溃恢复与leader选举：FastLeaderElection机制\"></a>崩溃恢复与leader选举：FastLeaderElection机制</h4></li>\n<li><p>由于leader节点基于心跳机制维持与follower和observer节点的长连接，故当leader节点宕机之后，该连接就断开了，follower和observer就不会再继续接收到leader的心跳包，或者leader节点失去大多数的followers，则会进入崩溃恢复阶段，重新进行leader选举。</p>\n<h4 id=\"选举的投票数据\"><a href=\"#选举的投票数据\" class=\"headerlink\" title=\"选举的投票数据\"></a>选举的投票数据</h4></li>\n<li><p>leader选举时，每个follower节点的投票包的相关核心数据如下：</p>\n<ul>\n<li><ol>\n<li>logicalClock：该节点发起的第几轮投票，每选举一次加1；</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>self_id：当前节点自身的myid；</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>self_zxid：当前节点自身所保存的数据的最大zxid，越大说明处理了越多数据写请求；</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>vote_id：当前节点投票给的节点的myid；</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>vote_zxid：当前节点投票给的节点的数据的最大zxid。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"leader选举的过程\"><a href=\"#leader选举的过程\" class=\"headerlink\" title=\"leader选举的过程\"></a>leader选举的过程</h4><ul>\n<li><ol>\n<li>leader选举开始时，每个follower节点首先清空自己的投票箱，然后投票给自己，并通过广播的方式通知所有其他节点给自己投票；</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>每个follower节点接收到其他follower节点的选票，将该外部选票与自己的选票进行对比，对比主要是基于以上5个核心数据项来展开：<ul>\n<li><ol>\n<li>选举轮次：比较logicalClock，如果外部选票的logicalClock大于自己的，则说明自己的选举轮次落后于该外部节点了，则清空自己的投票箱，并将自己的投票更新为当前轮次后重新广播投票出去；小于则忽略该外部选票；等于则进入下面步骤继续比较其他数据；</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>vote_zxid大小比较：将外部选票的vote_zxid与自己的投票的vote_zxid进行对比，如果外部的大，则将自己的（vote_myid，vote_zxid）更新为该外部选票的vote_myid和vote_zxid并广播出去，即投给这个vote_zxid更大的vote_myid；并更新自身的投票箱，即添加或者更新该外部投票对应的vote_myid的选票情况。因为在每个节点的投票箱中，对于集群中的所有参与投票follower节点只能存在一张投票，即当当前节点收到某个节点的多次投票时，则需要进行覆盖，如节点A刚开始收到节点B投给B自己的投票，A放入投票箱为（B,B），后来又收到B投给C，则更新为（B,C），此时A的投票箱不再存在（B，B）的这种选票了，而是更新为了（B,C）；</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>vote_myid大小比较：如果vote_zxid相同，则投票给vote_myid更大的节点；</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>重复以上过程，当某个节点发现过半数的follower节点都投给了自己，则更新自己的状态为LEADING，其他节点则更新自己的状态为FOLLOWING，投票结束。接下来进入数据同步阶段。</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>数据同步阶段：主要是当前新的leader节点将自己的已经commit的数据同步给其他follower节点。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n"},{"title":"java多线程","date":"2019-08-07T02:14:04.000Z","_content":"\n# 进程和线程\n\n一个程序就是一个进程，而一个程序中的多个任务则被称为线程。\n\n进程是表示资源分配的基本单位，线程是进程中执行运算的最小单位，亦是调度运行的基本单位\n\n在java中要想实现多线程，有两种手段，一种是继续Thread类，另外一种是实现Runable接口.(其实准确来讲，应该有三种，还有一种是实现Callable接口，并与Future、线程池结合使用\n\n# 一、扩展java.lang.Thread类\n**实例**\n\n\n\n```java\n/**\n * @Author: 胡文良\n * @Date: 2019/8/7 9:40\n */\n\npublic class ThreadDemo extends Thread {\n    public static void main(String[] args) {\n        Thread1 mTh1 = new Thread1(\"A\");\n        Thread1 mTh2 = new Thread1(\"B\");\n        mTh1.start();\n        mTh2.start();\n    }\n}\n\nclass Thread1 extends Thread {\n    private String name;\n\n    public Thread1(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public void run() {\n        for (int i = 0; i < 5; i++) {\n            System.out.println(name + \"运行  :  \" + i);\n            try {\n                sleep((int) Math.random() * 10);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n\n    }\n}\n\n\n```\n\n**说明**\n程序启动运行main时候，java虚拟机启动一个进程，主线程main在main()调用时候被创建。随着调用mTh的两个对象的`start`方法，另外两个线程也启动了，这样，整个应用就在多线程下运行。\n\n`start()`方法的调用后并不是立即执行多线程代码，而是使得该线程变为可运行态（Runnable），什么时候运行是由操作系统决定的。多线程程序是乱序执行。因此，只有乱序执行的代码才有必要设计为多线程。`Thread.sleep()`方法调用目的是不让当前线程独自霸占该进程所获取的CPU资源，以留出一定时间给其他线程执行的机会。实际上所有的多线程代码执行顺序都是不确定的，每次执行的结果都是随机的。\n\n# 二、实现java.lang.Runnable接口\n**实例**\n\n\n\n```java\n/**\n * @Author: 胡文良\n * @Date: 2019/8/7 9:53\n */\npublic class RunnableDemo {\n    public static void main(String[] args) {\n        new Thread(new Thread2(\"C\", \"18\")).start();\n        new Thread(new Thread2(\"D\", \"19\")).start();\n    }\n}\n\nclass Thread2 implements Runnable {\n\n    private String name;\n\n    private String sex;\n\n    public Thread2(String name, String sex) {\n        this.name = name;\n        this.sex = sex;\n\n    }\n\n    public void run() {\n        for (int i = 0; i < 5; i++) {\n            System.out.println(name + \"运行  :  \" + i);\n            try {\n                Thread.sleep((int) Math.random() * 10);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n**说明**\n\nThread2类通过实现Runnable接口，使得该类有了多线程类的特征。`run（）`方法是多线程程序的一个约定。所有的多线程代码都在run方法里面。Thread类实际上也是实现了Runnable接口的类。   \n\n在启动的多线程的时候，需要先通过Thread类的构造方法Thread(Runnable target) 构造出对象，然后调用Thread对象的start()方法来运行多线程代码。\n\n实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是扩展Thread类还是实现Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的，熟悉Thread类的API是进行多线程编程的基础\n\n# 三、Thread和Runnable的区别\n\n如果一个类继承Thread，则不适合资源共享。但是如果实现了Runable接口的话，则很容易的实现资源共享。\n\n**总结：**\n\n实现Runnable接口比继承Thread类所具有的优势：\n\n1）：适合多个相同的程序代码的线程去处理同一个资源\n\n2）：可以避免java中的单继承的限制\n\n3）：增加程序的健壮性，代码可以被多个线程共享，代码和数据独立\n\n4）：线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类\n\n \n\n提醒一下大家：main方法其实也是一个线程。在java中所以的线程都是同时启动的，至于什么时候，哪个先执行，完全看谁先得到CPU的资源。\n\n在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。因为每当使用java命令执行一个类的时候，实际上都会启动一个ＪＶＭ，每一个ｊＶＭ实习在就是在操作系统中启动了一个进程。\n\n# 四、线程状态转换\n\n## 一个线程的生命周期\n![](https://www.runoob.com/wp-content/uploads/2014/01/java-thread.jpg)\n\n1、新建状态（New）：新创建了一个线程对象。\n2、就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。\n3、运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码。\n4、阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\n（一）、等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)\n（二）、同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。\n（三）、其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）\n5、死亡状态（Dead）：线程执行完了或者因异常退出了run()\n\n# 五、多线程方法\n\n**5.1、currentThread()方法**\n\ncurrentThread()方法可返回代码段正在被哪个线程调用的信息。\n\nThread.currentThread().getName()\n\n**5.2、isAlive()方法**\n\n方法isAlive()的功能是判断当前的线程是否处于活动状态。\n\nthread.isAlive();\n\n**5.3、sleep()方法**\n\n方法sleep()的作用是在指定的毫秒数内让当前\"正在执行的线程\"休眠（暂停执行）。这个\"正在执行的线程\"是指this.currentThread()返回的线程。\n\nThread.sleep()\n\n**5.4、getId()方法**\n\ngetId()方法的作用是取得线程的唯一标识。\n\nthread.getId()\n\n","source":"_posts/java多线程.md","raw":"---\ntitle: java多线程\ndate: 2019-08-07 10:14:04\ntags:\n    - java\n    - 多线程\n---\n\n# 进程和线程\n\n一个程序就是一个进程，而一个程序中的多个任务则被称为线程。\n\n进程是表示资源分配的基本单位，线程是进程中执行运算的最小单位，亦是调度运行的基本单位\n\n在java中要想实现多线程，有两种手段，一种是继续Thread类，另外一种是实现Runable接口.(其实准确来讲，应该有三种，还有一种是实现Callable接口，并与Future、线程池结合使用\n\n# 一、扩展java.lang.Thread类\n**实例**\n\n\n\n```java\n/**\n * @Author: 胡文良\n * @Date: 2019/8/7 9:40\n */\n\npublic class ThreadDemo extends Thread {\n    public static void main(String[] args) {\n        Thread1 mTh1 = new Thread1(\"A\");\n        Thread1 mTh2 = new Thread1(\"B\");\n        mTh1.start();\n        mTh2.start();\n    }\n}\n\nclass Thread1 extends Thread {\n    private String name;\n\n    public Thread1(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public void run() {\n        for (int i = 0; i < 5; i++) {\n            System.out.println(name + \"运行  :  \" + i);\n            try {\n                sleep((int) Math.random() * 10);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n\n    }\n}\n\n\n```\n\n**说明**\n程序启动运行main时候，java虚拟机启动一个进程，主线程main在main()调用时候被创建。随着调用mTh的两个对象的`start`方法，另外两个线程也启动了，这样，整个应用就在多线程下运行。\n\n`start()`方法的调用后并不是立即执行多线程代码，而是使得该线程变为可运行态（Runnable），什么时候运行是由操作系统决定的。多线程程序是乱序执行。因此，只有乱序执行的代码才有必要设计为多线程。`Thread.sleep()`方法调用目的是不让当前线程独自霸占该进程所获取的CPU资源，以留出一定时间给其他线程执行的机会。实际上所有的多线程代码执行顺序都是不确定的，每次执行的结果都是随机的。\n\n# 二、实现java.lang.Runnable接口\n**实例**\n\n\n\n```java\n/**\n * @Author: 胡文良\n * @Date: 2019/8/7 9:53\n */\npublic class RunnableDemo {\n    public static void main(String[] args) {\n        new Thread(new Thread2(\"C\", \"18\")).start();\n        new Thread(new Thread2(\"D\", \"19\")).start();\n    }\n}\n\nclass Thread2 implements Runnable {\n\n    private String name;\n\n    private String sex;\n\n    public Thread2(String name, String sex) {\n        this.name = name;\n        this.sex = sex;\n\n    }\n\n    public void run() {\n        for (int i = 0; i < 5; i++) {\n            System.out.println(name + \"运行  :  \" + i);\n            try {\n                Thread.sleep((int) Math.random() * 10);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n**说明**\n\nThread2类通过实现Runnable接口，使得该类有了多线程类的特征。`run（）`方法是多线程程序的一个约定。所有的多线程代码都在run方法里面。Thread类实际上也是实现了Runnable接口的类。   \n\n在启动的多线程的时候，需要先通过Thread类的构造方法Thread(Runnable target) 构造出对象，然后调用Thread对象的start()方法来运行多线程代码。\n\n实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是扩展Thread类还是实现Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的，熟悉Thread类的API是进行多线程编程的基础\n\n# 三、Thread和Runnable的区别\n\n如果一个类继承Thread，则不适合资源共享。但是如果实现了Runable接口的话，则很容易的实现资源共享。\n\n**总结：**\n\n实现Runnable接口比继承Thread类所具有的优势：\n\n1）：适合多个相同的程序代码的线程去处理同一个资源\n\n2）：可以避免java中的单继承的限制\n\n3）：增加程序的健壮性，代码可以被多个线程共享，代码和数据独立\n\n4）：线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类\n\n \n\n提醒一下大家：main方法其实也是一个线程。在java中所以的线程都是同时启动的，至于什么时候，哪个先执行，完全看谁先得到CPU的资源。\n\n在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。因为每当使用java命令执行一个类的时候，实际上都会启动一个ＪＶＭ，每一个ｊＶＭ实习在就是在操作系统中启动了一个进程。\n\n# 四、线程状态转换\n\n## 一个线程的生命周期\n![](https://www.runoob.com/wp-content/uploads/2014/01/java-thread.jpg)\n\n1、新建状态（New）：新创建了一个线程对象。\n2、就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。\n3、运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码。\n4、阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\n（一）、等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)\n（二）、同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。\n（三）、其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）\n5、死亡状态（Dead）：线程执行完了或者因异常退出了run()\n\n# 五、多线程方法\n\n**5.1、currentThread()方法**\n\ncurrentThread()方法可返回代码段正在被哪个线程调用的信息。\n\nThread.currentThread().getName()\n\n**5.2、isAlive()方法**\n\n方法isAlive()的功能是判断当前的线程是否处于活动状态。\n\nthread.isAlive();\n\n**5.3、sleep()方法**\n\n方法sleep()的作用是在指定的毫秒数内让当前\"正在执行的线程\"休眠（暂停执行）。这个\"正在执行的线程\"是指this.currentThread()返回的线程。\n\nThread.sleep()\n\n**5.4、getId()方法**\n\ngetId()方法的作用是取得线程的唯一标识。\n\nthread.getId()\n\n","slug":"java多线程","published":1,"updated":"2021-04-22T03:43:26.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcz90001kko9bzg24gn4z","content":"<h1 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h1><p>一个程序就是一个进程，而一个程序中的多个任务则被称为线程。</p>\n<p>进程是表示资源分配的基本单位，线程是进程中执行运算的最小单位，亦是调度运行的基本单位</p>\n<p>在java中要想实现多线程，有两种手段，一种是继续Thread类，另外一种是实现Runable接口.(其实准确来讲，应该有三种，还有一种是实现Callable接口，并与Future、线程池结合使用</p>\n<h1 id=\"一、扩展java-lang-Thread类\"><a href=\"#一、扩展java-lang-Thread类\" class=\"headerlink\" title=\"一、扩展java.lang.Thread类\"></a>一、扩展java.lang.Thread类</h1><p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/7 9:40</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Thread1 mTh1 = <span class=\"keyword\">new</span> Thread1(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">        Thread1 mTh2 = <span class=\"keyword\">new</span> Thread1(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\">        mTh1.start();</span><br><span class=\"line\">        mTh2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thread1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Thread1</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(name + <span class=\"string\">\"运行  :  \"</span> + i);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                sleep((<span class=\"keyword\">int</span>) Math.random() * <span class=\"number\">10</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>说明</strong><br>程序启动运行main时候，java虚拟机启动一个进程，主线程main在main()调用时候被创建。随着调用mTh的两个对象的<code>start</code>方法，另外两个线程也启动了，这样，整个应用就在多线程下运行。</p>\n<p><code>start()</code>方法的调用后并不是立即执行多线程代码，而是使得该线程变为可运行态（Runnable），什么时候运行是由操作系统决定的。多线程程序是乱序执行。因此，只有乱序执行的代码才有必要设计为多线程。<code>Thread.sleep()</code>方法调用目的是不让当前线程独自霸占该进程所获取的CPU资源，以留出一定时间给其他线程执行的机会。实际上所有的多线程代码执行顺序都是不确定的，每次执行的结果都是随机的。</p>\n<h1 id=\"二、实现java-lang-Runnable接口\"><a href=\"#二、实现java-lang-Runnable接口\" class=\"headerlink\" title=\"二、实现java.lang.Runnable接口\"></a>二、实现java.lang.Runnable接口</h1><p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/7 9:53</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Thread2(<span class=\"string\">\"C\"</span>, <span class=\"string\">\"18\"</span>)).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Thread2(<span class=\"string\">\"D\"</span>, <span class=\"string\">\"19\"</span>)).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thread2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Thread2</span><span class=\"params\">(String name, String sex)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(name + <span class=\"string\">\"运行  :  \"</span> + i);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep((<span class=\"keyword\">int</span>) Math.random() * <span class=\"number\">10</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>说明</strong></p>\n<p>Thread2类通过实现Runnable接口，使得该类有了多线程类的特征。<code>run（）</code>方法是多线程程序的一个约定。所有的多线程代码都在run方法里面。Thread类实际上也是实现了Runnable接口的类。   </p>\n<p>在启动的多线程的时候，需要先通过Thread类的构造方法Thread(Runnable target) 构造出对象，然后调用Thread对象的start()方法来运行多线程代码。</p>\n<p>实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是扩展Thread类还是实现Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的，熟悉Thread类的API是进行多线程编程的基础</p>\n<h1 id=\"三、Thread和Runnable的区别\"><a href=\"#三、Thread和Runnable的区别\" class=\"headerlink\" title=\"三、Thread和Runnable的区别\"></a>三、Thread和Runnable的区别</h1><p>如果一个类继承Thread，则不适合资源共享。但是如果实现了Runable接口的话，则很容易的实现资源共享。</p>\n<p><strong>总结：</strong></p>\n<p>实现Runnable接口比继承Thread类所具有的优势：</p>\n<p>1）：适合多个相同的程序代码的线程去处理同一个资源</p>\n<p>2）：可以避免java中的单继承的限制</p>\n<p>3）：增加程序的健壮性，代码可以被多个线程共享，代码和数据独立</p>\n<p>4）：线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类</p>\n<p>提醒一下大家：main方法其实也是一个线程。在java中所以的线程都是同时启动的，至于什么时候，哪个先执行，完全看谁先得到CPU的资源。</p>\n<p>在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。因为每当使用java命令执行一个类的时候，实际上都会启动一个ＪＶＭ，每一个ｊＶＭ实习在就是在操作系统中启动了一个进程。</p>\n<h1 id=\"四、线程状态转换\"><a href=\"#四、线程状态转换\" class=\"headerlink\" title=\"四、线程状态转换\"></a>四、线程状态转换</h1><h2 id=\"一个线程的生命周期\"><a href=\"#一个线程的生命周期\" class=\"headerlink\" title=\"一个线程的生命周期\"></a>一个线程的生命周期</h2><p><img src=\"https://www.runoob.com/wp-content/uploads/2014/01/java-thread.jpg\" alt></p>\n<p>1、新建状态（New）：新创建了一个线程对象。<br>2、就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。<br>3、运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码。<br>4、阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：<br>（一）、等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)<br>（二）、同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。<br>（三）、其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）<br>5、死亡状态（Dead）：线程执行完了或者因异常退出了run()</p>\n<h1 id=\"五、多线程方法\"><a href=\"#五、多线程方法\" class=\"headerlink\" title=\"五、多线程方法\"></a>五、多线程方法</h1><p><strong>5.1、currentThread()方法</strong></p>\n<p>currentThread()方法可返回代码段正在被哪个线程调用的信息。</p>\n<p>Thread.currentThread().getName()</p>\n<p><strong>5.2、isAlive()方法</strong></p>\n<p>方法isAlive()的功能是判断当前的线程是否处于活动状态。</p>\n<p>thread.isAlive();</p>\n<p><strong>5.3、sleep()方法</strong></p>\n<p>方法sleep()的作用是在指定的毫秒数内让当前”正在执行的线程”休眠（暂停执行）。这个”正在执行的线程”是指this.currentThread()返回的线程。</p>\n<p>Thread.sleep()</p>\n<p><strong>5.4、getId()方法</strong></p>\n<p>getId()方法的作用是取得线程的唯一标识。</p>\n<p>thread.getId()</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h1><p>一个程序就是一个进程，而一个程序中的多个任务则被称为线程。</p>\n<p>进程是表示资源分配的基本单位，线程是进程中执行运算的最小单位，亦是调度运行的基本单位</p>\n<p>在java中要想实现多线程，有两种手段，一种是继续Thread类，另外一种是实现Runable接口.(其实准确来讲，应该有三种，还有一种是实现Callable接口，并与Future、线程池结合使用</p>\n<h1 id=\"一、扩展java-lang-Thread类\"><a href=\"#一、扩展java-lang-Thread类\" class=\"headerlink\" title=\"一、扩展java.lang.Thread类\"></a>一、扩展java.lang.Thread类</h1><p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/7 9:40</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Thread1 mTh1 = <span class=\"keyword\">new</span> Thread1(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">        Thread1 mTh2 = <span class=\"keyword\">new</span> Thread1(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\">        mTh1.start();</span><br><span class=\"line\">        mTh2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thread1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Thread1</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(name + <span class=\"string\">\"运行  :  \"</span> + i);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                sleep((<span class=\"keyword\">int</span>) Math.random() * <span class=\"number\">10</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>说明</strong><br>程序启动运行main时候，java虚拟机启动一个进程，主线程main在main()调用时候被创建。随着调用mTh的两个对象的<code>start</code>方法，另外两个线程也启动了，这样，整个应用就在多线程下运行。</p>\n<p><code>start()</code>方法的调用后并不是立即执行多线程代码，而是使得该线程变为可运行态（Runnable），什么时候运行是由操作系统决定的。多线程程序是乱序执行。因此，只有乱序执行的代码才有必要设计为多线程。<code>Thread.sleep()</code>方法调用目的是不让当前线程独自霸占该进程所获取的CPU资源，以留出一定时间给其他线程执行的机会。实际上所有的多线程代码执行顺序都是不确定的，每次执行的结果都是随机的。</p>\n<h1 id=\"二、实现java-lang-Runnable接口\"><a href=\"#二、实现java-lang-Runnable接口\" class=\"headerlink\" title=\"二、实现java.lang.Runnable接口\"></a>二、实现java.lang.Runnable接口</h1><p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 胡文良</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2019/8/7 9:53</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Thread2(<span class=\"string\">\"C\"</span>, <span class=\"string\">\"18\"</span>)).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Thread2(<span class=\"string\">\"D\"</span>, <span class=\"string\">\"19\"</span>)).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thread2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Thread2</span><span class=\"params\">(String name, String sex)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(name + <span class=\"string\">\"运行  :  \"</span> + i);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep((<span class=\"keyword\">int</span>) Math.random() * <span class=\"number\">10</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>说明</strong></p>\n<p>Thread2类通过实现Runnable接口，使得该类有了多线程类的特征。<code>run（）</code>方法是多线程程序的一个约定。所有的多线程代码都在run方法里面。Thread类实际上也是实现了Runnable接口的类。   </p>\n<p>在启动的多线程的时候，需要先通过Thread类的构造方法Thread(Runnable target) 构造出对象，然后调用Thread对象的start()方法来运行多线程代码。</p>\n<p>实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是扩展Thread类还是实现Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的，熟悉Thread类的API是进行多线程编程的基础</p>\n<h1 id=\"三、Thread和Runnable的区别\"><a href=\"#三、Thread和Runnable的区别\" class=\"headerlink\" title=\"三、Thread和Runnable的区别\"></a>三、Thread和Runnable的区别</h1><p>如果一个类继承Thread，则不适合资源共享。但是如果实现了Runable接口的话，则很容易的实现资源共享。</p>\n<p><strong>总结：</strong></p>\n<p>实现Runnable接口比继承Thread类所具有的优势：</p>\n<p>1）：适合多个相同的程序代码的线程去处理同一个资源</p>\n<p>2）：可以避免java中的单继承的限制</p>\n<p>3）：增加程序的健壮性，代码可以被多个线程共享，代码和数据独立</p>\n<p>4）：线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类</p>\n<p>提醒一下大家：main方法其实也是一个线程。在java中所以的线程都是同时启动的，至于什么时候，哪个先执行，完全看谁先得到CPU的资源。</p>\n<p>在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。因为每当使用java命令执行一个类的时候，实际上都会启动一个ＪＶＭ，每一个ｊＶＭ实习在就是在操作系统中启动了一个进程。</p>\n<h1 id=\"四、线程状态转换\"><a href=\"#四、线程状态转换\" class=\"headerlink\" title=\"四、线程状态转换\"></a>四、线程状态转换</h1><h2 id=\"一个线程的生命周期\"><a href=\"#一个线程的生命周期\" class=\"headerlink\" title=\"一个线程的生命周期\"></a>一个线程的生命周期</h2><p><img src=\"https://www.runoob.com/wp-content/uploads/2014/01/java-thread.jpg\" alt></p>\n<p>1、新建状态（New）：新创建了一个线程对象。<br>2、就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。<br>3、运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码。<br>4、阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：<br>（一）、等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)<br>（二）、同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。<br>（三）、其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）<br>5、死亡状态（Dead）：线程执行完了或者因异常退出了run()</p>\n<h1 id=\"五、多线程方法\"><a href=\"#五、多线程方法\" class=\"headerlink\" title=\"五、多线程方法\"></a>五、多线程方法</h1><p><strong>5.1、currentThread()方法</strong></p>\n<p>currentThread()方法可返回代码段正在被哪个线程调用的信息。</p>\n<p>Thread.currentThread().getName()</p>\n<p><strong>5.2、isAlive()方法</strong></p>\n<p>方法isAlive()的功能是判断当前的线程是否处于活动状态。</p>\n<p>thread.isAlive();</p>\n<p><strong>5.3、sleep()方法</strong></p>\n<p>方法sleep()的作用是在指定的毫秒数内让当前”正在执行的线程”休眠（暂停执行）。这个”正在执行的线程”是指this.currentThread()返回的线程。</p>\n<p>Thread.sleep()</p>\n<p><strong>5.4、getId()方法</strong></p>\n<p>getId()方法的作用是取得线程的唯一标识。</p>\n<p>thread.getId()</p>\n"},{"title":"依赖私服","date":"2020-01-22T02:38:05.000Z","_content":"\n# Nexus\n\n**概述**\n\n```\nNexus 是一个强大的仓库管理器，极大地简化了内部仓库的维护和外部仓库的访问。\n```\n\n**基于 Docker 安装 Nexus**\n\n```\nversion: '3.1'\nservices:\n  nexus:\n    restart: always\n    image: sonatype/nexus3\n    container_name: nexus\n    ports:\n      - 8081:8081\n    volumes:\n      - /usr/local/docker/nexus/data:/nexus-data\n```\n\n*注意* : 权限问题可以使用：`chmod 777 /usr/local/docker/nexus/data` 赋予数据卷目录可读可写的权限\n\n*访问地址：*http://ip:port/ \n*用户名：*admin \n*密码：*/usr/local/docker/Nexus/data/admin.password\n\n**项目中使用 Maven 私服**\n\n在 Maven `settings.xml` 中添加 Nexus 认证信息(`servers` 节点下)：\n\n```\n<server>\n  <id>nexus-releases</id>\n  <username>admin</username>\n  <password>admin123</password>\n</server>\n\n<server>\n  <id>nexus-snapshots</id>\n  <username>admin</username>\n  <password>admin123</password>\n</server>\n```\n\n**Snapshots 与 Releases 的区别**\n\n- nexus-releases: 用于发布 Release 版本\n- nexus-snapshots: 用于发布 Snapshot 版本（快照版）\n\n**配置自动化部署**\n\n在 `pom.xml` 中添加如下代码：\n\n```\n<distributionManagement>  \n  <repository>  \n    <id>nexus-releases</id>  \n    <name>Nexus Release Repository</name>  \n    <url>http://127.0.0.1:8081/repository/maven-releases/</url>  \n  </repository>  \n  <snapshotRepository>  \n    <id>nexus-snapshots</id>  \n    <name>Nexus Snapshot Repository</name>  \n    <url>http://127.0.0.1:8081/repository/maven-snapshots/</url>  \n  </snapshotRepository>  \n</distributionManagement> \n```\n\n- ID 名称必须要与 `settings.xml` 中 Servers 配置的 ID 名称保持一致。\n- 项目版本号中有 `SNAPSHOT` 标识的，会发布到 Nexus Snapshots Repository, 否则发布到 Nexus Release Repository，并根据 ID 去匹配授权账号。\n\n**部署到仓库**\n\n```\nmvn deploy\n```\n\n**配置代理仓库**\n\n```\n<repositories>\n    <repository>\n        <id>nexus</id>\n        <name>Nexus Repository</name>\n        <url>http://127.0.0.1:8081/repository/maven-public/</url>\n        <snapshots>\n            <enabled>true</enabled>\n        </snapshots>\n        <releases>\n            <enabled>true</enabled>\n        </releases>\n    </repository>\n</repositories>\n<pluginRepositories>\n    <pluginRepository>\n        <id>nexus</id>\n        <name>Nexus Plugin Repository</name>\n        <url>http://127.0.0.1:8081/repository/maven-public/</url>\n        <snapshots>\n            <enabled>true</enabled>\n        </snapshots>\n        <releases>\n            <enabled>true</enabled>\n        </releases>\n    </pluginRepository>\n</pluginRepositories>\n```\n\n*demo：*https://github.com/Hu414706657/demo-nexus\n\n","source":"_posts/依赖私服.md","raw":"---\ntitle: 依赖私服\ndate: 2020-01-22 10:38:05\ntags:\n---\n\n# Nexus\n\n**概述**\n\n```\nNexus 是一个强大的仓库管理器，极大地简化了内部仓库的维护和外部仓库的访问。\n```\n\n**基于 Docker 安装 Nexus**\n\n```\nversion: '3.1'\nservices:\n  nexus:\n    restart: always\n    image: sonatype/nexus3\n    container_name: nexus\n    ports:\n      - 8081:8081\n    volumes:\n      - /usr/local/docker/nexus/data:/nexus-data\n```\n\n*注意* : 权限问题可以使用：`chmod 777 /usr/local/docker/nexus/data` 赋予数据卷目录可读可写的权限\n\n*访问地址：*http://ip:port/ \n*用户名：*admin \n*密码：*/usr/local/docker/Nexus/data/admin.password\n\n**项目中使用 Maven 私服**\n\n在 Maven `settings.xml` 中添加 Nexus 认证信息(`servers` 节点下)：\n\n```\n<server>\n  <id>nexus-releases</id>\n  <username>admin</username>\n  <password>admin123</password>\n</server>\n\n<server>\n  <id>nexus-snapshots</id>\n  <username>admin</username>\n  <password>admin123</password>\n</server>\n```\n\n**Snapshots 与 Releases 的区别**\n\n- nexus-releases: 用于发布 Release 版本\n- nexus-snapshots: 用于发布 Snapshot 版本（快照版）\n\n**配置自动化部署**\n\n在 `pom.xml` 中添加如下代码：\n\n```\n<distributionManagement>  \n  <repository>  \n    <id>nexus-releases</id>  \n    <name>Nexus Release Repository</name>  \n    <url>http://127.0.0.1:8081/repository/maven-releases/</url>  \n  </repository>  \n  <snapshotRepository>  \n    <id>nexus-snapshots</id>  \n    <name>Nexus Snapshot Repository</name>  \n    <url>http://127.0.0.1:8081/repository/maven-snapshots/</url>  \n  </snapshotRepository>  \n</distributionManagement> \n```\n\n- ID 名称必须要与 `settings.xml` 中 Servers 配置的 ID 名称保持一致。\n- 项目版本号中有 `SNAPSHOT` 标识的，会发布到 Nexus Snapshots Repository, 否则发布到 Nexus Release Repository，并根据 ID 去匹配授权账号。\n\n**部署到仓库**\n\n```\nmvn deploy\n```\n\n**配置代理仓库**\n\n```\n<repositories>\n    <repository>\n        <id>nexus</id>\n        <name>Nexus Repository</name>\n        <url>http://127.0.0.1:8081/repository/maven-public/</url>\n        <snapshots>\n            <enabled>true</enabled>\n        </snapshots>\n        <releases>\n            <enabled>true</enabled>\n        </releases>\n    </repository>\n</repositories>\n<pluginRepositories>\n    <pluginRepository>\n        <id>nexus</id>\n        <name>Nexus Plugin Repository</name>\n        <url>http://127.0.0.1:8081/repository/maven-public/</url>\n        <snapshots>\n            <enabled>true</enabled>\n        </snapshots>\n        <releases>\n            <enabled>true</enabled>\n        </releases>\n    </pluginRepository>\n</pluginRepositories>\n```\n\n*demo：*https://github.com/Hu414706657/demo-nexus\n\n","slug":"依赖私服","published":1,"updated":"2021-04-22T03:43:26.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcz94001mko9bwoket4ai","content":"<h1 id=\"Nexus\"><a href=\"#Nexus\" class=\"headerlink\" title=\"Nexus\"></a>Nexus</h1><p><strong>概述</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Nexus 是一个强大的仓库管理器，极大地简化了内部仓库的维护和外部仓库的访问。</span><br></pre></td></tr></table></figure>\n\n<p><strong>基于 Docker 安装 Nexus</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &apos;3.1&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  nexus:</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    image: sonatype/nexus3</span><br><span class=\"line\">    container_name: nexus</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 8081:8081</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /usr/local/docker/nexus/data:/nexus-data</span><br></pre></td></tr></table></figure>\n\n<p><em>注意</em> : 权限问题可以使用：<code>chmod 777 /usr/local/docker/nexus/data</code> 赋予数据卷目录可读可写的权限</p>\n<p><em>访问地址：<em><a href=\"http://ip:port/\" target=\"_blank\" rel=\"noopener\">http://ip:port/</a><br>*用户名：</em>admin<br>*密码：</em>/usr/local/docker/Nexus/data/admin.password</p>\n<p><strong>项目中使用 Maven 私服</strong></p>\n<p>在 Maven <code>settings.xml</code> 中添加 Nexus 认证信息(<code>servers</code> 节点下)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;server&gt;</span><br><span class=\"line\">  &lt;id&gt;nexus-releases&lt;/id&gt;</span><br><span class=\"line\">  &lt;username&gt;admin&lt;/username&gt;</span><br><span class=\"line\">  &lt;password&gt;admin123&lt;/password&gt;</span><br><span class=\"line\">&lt;/server&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;server&gt;</span><br><span class=\"line\">  &lt;id&gt;nexus-snapshots&lt;/id&gt;</span><br><span class=\"line\">  &lt;username&gt;admin&lt;/username&gt;</span><br><span class=\"line\">  &lt;password&gt;admin123&lt;/password&gt;</span><br><span class=\"line\">&lt;/server&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Snapshots 与 Releases 的区别</strong></p>\n<ul>\n<li>nexus-releases: 用于发布 Release 版本</li>\n<li>nexus-snapshots: 用于发布 Snapshot 版本（快照版）</li>\n</ul>\n<p><strong>配置自动化部署</strong></p>\n<p>在 <code>pom.xml</code> 中添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;distributionManagement&gt;  </span><br><span class=\"line\">  &lt;repository&gt;  </span><br><span class=\"line\">    &lt;id&gt;nexus-releases&lt;/id&gt;  </span><br><span class=\"line\">    &lt;name&gt;Nexus Release Repository&lt;/name&gt;  </span><br><span class=\"line\">    &lt;url&gt;http://127.0.0.1:8081/repository/maven-releases/&lt;/url&gt;  </span><br><span class=\"line\">  &lt;/repository&gt;  </span><br><span class=\"line\">  &lt;snapshotRepository&gt;  </span><br><span class=\"line\">    &lt;id&gt;nexus-snapshots&lt;/id&gt;  </span><br><span class=\"line\">    &lt;name&gt;Nexus Snapshot Repository&lt;/name&gt;  </span><br><span class=\"line\">    &lt;url&gt;http://127.0.0.1:8081/repository/maven-snapshots/&lt;/url&gt;  </span><br><span class=\"line\">  &lt;/snapshotRepository&gt;  </span><br><span class=\"line\">&lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ID 名称必须要与 <code>settings.xml</code> 中 Servers 配置的 ID 名称保持一致。</li>\n<li>项目版本号中有 <code>SNAPSHOT</code> 标识的，会发布到 Nexus Snapshots Repository, 否则发布到 Nexus Release Repository，并根据 ID 去匹配授权账号。</li>\n</ul>\n<p><strong>部署到仓库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn deploy</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置代理仓库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;repositories&gt;</span><br><span class=\"line\">    &lt;repository&gt;</span><br><span class=\"line\">        &lt;id&gt;nexus&lt;/id&gt;</span><br><span class=\"line\">        &lt;name&gt;Nexus Repository&lt;/name&gt;</span><br><span class=\"line\">        &lt;url&gt;http://127.0.0.1:8081/repository/maven-public/&lt;/url&gt;</span><br><span class=\"line\">        &lt;snapshots&gt;</span><br><span class=\"line\">            &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class=\"line\">        &lt;/snapshots&gt;</span><br><span class=\"line\">        &lt;releases&gt;</span><br><span class=\"line\">            &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class=\"line\">        &lt;/releases&gt;</span><br><span class=\"line\">    &lt;/repository&gt;</span><br><span class=\"line\">&lt;/repositories&gt;</span><br><span class=\"line\">&lt;pluginRepositories&gt;</span><br><span class=\"line\">    &lt;pluginRepository&gt;</span><br><span class=\"line\">        &lt;id&gt;nexus&lt;/id&gt;</span><br><span class=\"line\">        &lt;name&gt;Nexus Plugin Repository&lt;/name&gt;</span><br><span class=\"line\">        &lt;url&gt;http://127.0.0.1:8081/repository/maven-public/&lt;/url&gt;</span><br><span class=\"line\">        &lt;snapshots&gt;</span><br><span class=\"line\">            &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class=\"line\">        &lt;/snapshots&gt;</span><br><span class=\"line\">        &lt;releases&gt;</span><br><span class=\"line\">            &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class=\"line\">        &lt;/releases&gt;</span><br><span class=\"line\">    &lt;/pluginRepository&gt;</span><br><span class=\"line\">&lt;/pluginRepositories&gt;</span><br></pre></td></tr></table></figure>\n\n<p><em>demo：</em><a href=\"https://github.com/Hu414706657/demo-nexus\" target=\"_blank\" rel=\"noopener\">https://github.com/Hu414706657/demo-nexus</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Nexus\"><a href=\"#Nexus\" class=\"headerlink\" title=\"Nexus\"></a>Nexus</h1><p><strong>概述</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Nexus 是一个强大的仓库管理器，极大地简化了内部仓库的维护和外部仓库的访问。</span><br></pre></td></tr></table></figure>\n\n<p><strong>基于 Docker 安装 Nexus</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &apos;3.1&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  nexus:</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    image: sonatype/nexus3</span><br><span class=\"line\">    container_name: nexus</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 8081:8081</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /usr/local/docker/nexus/data:/nexus-data</span><br></pre></td></tr></table></figure>\n\n<p><em>注意</em> : 权限问题可以使用：<code>chmod 777 /usr/local/docker/nexus/data</code> 赋予数据卷目录可读可写的权限</p>\n<p><em>访问地址：<em><a href=\"http://ip:port/\" target=\"_blank\" rel=\"noopener\">http://ip:port/</a><br>*用户名：</em>admin<br>*密码：</em>/usr/local/docker/Nexus/data/admin.password</p>\n<p><strong>项目中使用 Maven 私服</strong></p>\n<p>在 Maven <code>settings.xml</code> 中添加 Nexus 认证信息(<code>servers</code> 节点下)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;server&gt;</span><br><span class=\"line\">  &lt;id&gt;nexus-releases&lt;/id&gt;</span><br><span class=\"line\">  &lt;username&gt;admin&lt;/username&gt;</span><br><span class=\"line\">  &lt;password&gt;admin123&lt;/password&gt;</span><br><span class=\"line\">&lt;/server&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;server&gt;</span><br><span class=\"line\">  &lt;id&gt;nexus-snapshots&lt;/id&gt;</span><br><span class=\"line\">  &lt;username&gt;admin&lt;/username&gt;</span><br><span class=\"line\">  &lt;password&gt;admin123&lt;/password&gt;</span><br><span class=\"line\">&lt;/server&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Snapshots 与 Releases 的区别</strong></p>\n<ul>\n<li>nexus-releases: 用于发布 Release 版本</li>\n<li>nexus-snapshots: 用于发布 Snapshot 版本（快照版）</li>\n</ul>\n<p><strong>配置自动化部署</strong></p>\n<p>在 <code>pom.xml</code> 中添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;distributionManagement&gt;  </span><br><span class=\"line\">  &lt;repository&gt;  </span><br><span class=\"line\">    &lt;id&gt;nexus-releases&lt;/id&gt;  </span><br><span class=\"line\">    &lt;name&gt;Nexus Release Repository&lt;/name&gt;  </span><br><span class=\"line\">    &lt;url&gt;http://127.0.0.1:8081/repository/maven-releases/&lt;/url&gt;  </span><br><span class=\"line\">  &lt;/repository&gt;  </span><br><span class=\"line\">  &lt;snapshotRepository&gt;  </span><br><span class=\"line\">    &lt;id&gt;nexus-snapshots&lt;/id&gt;  </span><br><span class=\"line\">    &lt;name&gt;Nexus Snapshot Repository&lt;/name&gt;  </span><br><span class=\"line\">    &lt;url&gt;http://127.0.0.1:8081/repository/maven-snapshots/&lt;/url&gt;  </span><br><span class=\"line\">  &lt;/snapshotRepository&gt;  </span><br><span class=\"line\">&lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ID 名称必须要与 <code>settings.xml</code> 中 Servers 配置的 ID 名称保持一致。</li>\n<li>项目版本号中有 <code>SNAPSHOT</code> 标识的，会发布到 Nexus Snapshots Repository, 否则发布到 Nexus Release Repository，并根据 ID 去匹配授权账号。</li>\n</ul>\n<p><strong>部署到仓库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn deploy</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置代理仓库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;repositories&gt;</span><br><span class=\"line\">    &lt;repository&gt;</span><br><span class=\"line\">        &lt;id&gt;nexus&lt;/id&gt;</span><br><span class=\"line\">        &lt;name&gt;Nexus Repository&lt;/name&gt;</span><br><span class=\"line\">        &lt;url&gt;http://127.0.0.1:8081/repository/maven-public/&lt;/url&gt;</span><br><span class=\"line\">        &lt;snapshots&gt;</span><br><span class=\"line\">            &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class=\"line\">        &lt;/snapshots&gt;</span><br><span class=\"line\">        &lt;releases&gt;</span><br><span class=\"line\">            &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class=\"line\">        &lt;/releases&gt;</span><br><span class=\"line\">    &lt;/repository&gt;</span><br><span class=\"line\">&lt;/repositories&gt;</span><br><span class=\"line\">&lt;pluginRepositories&gt;</span><br><span class=\"line\">    &lt;pluginRepository&gt;</span><br><span class=\"line\">        &lt;id&gt;nexus&lt;/id&gt;</span><br><span class=\"line\">        &lt;name&gt;Nexus Plugin Repository&lt;/name&gt;</span><br><span class=\"line\">        &lt;url&gt;http://127.0.0.1:8081/repository/maven-public/&lt;/url&gt;</span><br><span class=\"line\">        &lt;snapshots&gt;</span><br><span class=\"line\">            &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class=\"line\">        &lt;/snapshots&gt;</span><br><span class=\"line\">        &lt;releases&gt;</span><br><span class=\"line\">            &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class=\"line\">        &lt;/releases&gt;</span><br><span class=\"line\">    &lt;/pluginRepository&gt;</span><br><span class=\"line\">&lt;/pluginRepositories&gt;</span><br></pre></td></tr></table></figure>\n\n<p><em>demo：</em><a href=\"https://github.com/Hu414706657/demo-nexus\" target=\"_blank\" rel=\"noopener\">https://github.com/Hu414706657/demo-nexus</a></p>\n"},{"title":"为什么MongoDB使用B-Tree,Mysql使用B+Tree","date":"2021-04-22T10:29:41.000Z","_content":"","source":"_posts/为什么MongoDB使用B-Tree-Mysql使用B-Tree.md","raw":"---\ntitle: '为什么MongoDB使用B-Tree,Mysql使用B+Tree'\ndate: 2021-04-22 18:29:41\ntags:\n---\n","slug":"为什么MongoDB使用B-Tree-Mysql使用B-Tree","published":1,"updated":"2021-04-22T10:29:41.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcz96001oko9bz01fi38c","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Spring","date":"2019-07-23T02:11:57.000Z","_content":"\n# 概述\n\nSpring 是一个轻量级的 Java 开发框架，主要作用就是为代码“解耦”，降低代码间的耦合度, 解决企业级开发的复杂性问题。核心是控制反转（IoC）和面向切面编程（AOP）。`IoC`:IoC 使得主业务在相互调用过程中，不用再自己维护关系，即不用再自己创建要使用的对象了。而是由 Spring容器统一管理，自动“注入”。`AOP`:Spring根据代码特点允许通过分离应用的业务逻辑与系统级业务逻辑（例如日志和事务管理）进行开发,AOP 使得系统级服务得到了最大复用，程序员不用手工将系统级服务“混杂”到主业务逻辑中了，而是由 Spring 容器统一完成“织入”。\n\n# Spring 的特点\n**非侵入式**\n所谓非侵入式是指，Spring 框架的 API 不会在业务逻辑上出现，即业务逻辑是 POJO。由于业务逻辑中没有 Spring 的 API，所以业务逻辑可以从 Spring 框架快速的移植到其他框架， 即与环境无关。\n\n(POJO:的内在含义是指那些没有从任何类继承、也没有实现任何接口，更没有被其它框架侵入的java对象。)\n**容器**\n Spring 作为一个容器，可以管理对象的生命周期、对象与对象之间的依赖关系。可以通过配置文件，来定义对象，以及设置与其他对象的依赖关系。\n\n **IoC**\n 控制反转（Inversion of Control），即创建被调用者的实例不是由调用者完成，而是由 Spring 容器完成，并注入调用者。\n\n当应用了 IoC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。即，不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。\n\nIoC 是一个概念，是一种思想，其实现方式多种多样。当前比较流行的实现方式有两种： `依赖注入`和`依赖查找`。依赖注入方式应用更为广泛。\n\n - 依赖查找：Dependency Lookup，DL，容器提供回调接口和上下文环境给组件，程序代码则需要提供具体的查找方式。比较典型的是依赖于 JNDI 系统的查找。\n - 依赖注入：Dependency Injection，DI，程序代码不做定位查询，这些工作由容器自行完成。 依赖注入 DI 是指程序运行过程中，若需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部容器，由外部容器创建后传递给程序。 Spring 的依赖注入对调用者与被调用者几乎没有任何要求，完全支持 POJO 之间依赖关系的管理。\n\n**AOP**\n面向切面编程（AOP，Aspect Orient Programming），是一种编程思想，是面向对象编程 OOP 的补充。很多框架都实现了对 AOP 编程思想的实现。Spring 也提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务（例如日志和事务管理）进行开发。应用对象只实现它们应该做的——完成业务逻辑——仅此而已。它们并不负责其它的系统级关注点，例如日志或事务支持。\n\n我们可以把日志、安全、事务管理等服务理解成一个“切面”，那么以前这些服务一直是直接写在业务逻辑的代码当中的，这有两点不好：首先业务逻辑不纯净；其次这些服务被很多业务逻辑反复使用，完全可以剥离出来做到复用。那么 AOP 就是这些问题的解决方案， 可以把这些服务剥离出来形成一个“切面”，以期复用，然后将“切面”动态的“织入”到业务逻辑中，让业务逻辑能够享受到此“切面”的服务。","source":"_posts/spring.md","raw":"---\ntitle: Spring\ndate: 2019-07-23 10:11:57\ntags:\n    - spring\n---\n\n# 概述\n\nSpring 是一个轻量级的 Java 开发框架，主要作用就是为代码“解耦”，降低代码间的耦合度, 解决企业级开发的复杂性问题。核心是控制反转（IoC）和面向切面编程（AOP）。`IoC`:IoC 使得主业务在相互调用过程中，不用再自己维护关系，即不用再自己创建要使用的对象了。而是由 Spring容器统一管理，自动“注入”。`AOP`:Spring根据代码特点允许通过分离应用的业务逻辑与系统级业务逻辑（例如日志和事务管理）进行开发,AOP 使得系统级服务得到了最大复用，程序员不用手工将系统级服务“混杂”到主业务逻辑中了，而是由 Spring 容器统一完成“织入”。\n\n# Spring 的特点\n**非侵入式**\n所谓非侵入式是指，Spring 框架的 API 不会在业务逻辑上出现，即业务逻辑是 POJO。由于业务逻辑中没有 Spring 的 API，所以业务逻辑可以从 Spring 框架快速的移植到其他框架， 即与环境无关。\n\n(POJO:的内在含义是指那些没有从任何类继承、也没有实现任何接口，更没有被其它框架侵入的java对象。)\n**容器**\n Spring 作为一个容器，可以管理对象的生命周期、对象与对象之间的依赖关系。可以通过配置文件，来定义对象，以及设置与其他对象的依赖关系。\n\n **IoC**\n 控制反转（Inversion of Control），即创建被调用者的实例不是由调用者完成，而是由 Spring 容器完成，并注入调用者。\n\n当应用了 IoC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。即，不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。\n\nIoC 是一个概念，是一种思想，其实现方式多种多样。当前比较流行的实现方式有两种： `依赖注入`和`依赖查找`。依赖注入方式应用更为广泛。\n\n - 依赖查找：Dependency Lookup，DL，容器提供回调接口和上下文环境给组件，程序代码则需要提供具体的查找方式。比较典型的是依赖于 JNDI 系统的查找。\n - 依赖注入：Dependency Injection，DI，程序代码不做定位查询，这些工作由容器自行完成。 依赖注入 DI 是指程序运行过程中，若需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部容器，由外部容器创建后传递给程序。 Spring 的依赖注入对调用者与被调用者几乎没有任何要求，完全支持 POJO 之间依赖关系的管理。\n\n**AOP**\n面向切面编程（AOP，Aspect Orient Programming），是一种编程思想，是面向对象编程 OOP 的补充。很多框架都实现了对 AOP 编程思想的实现。Spring 也提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务（例如日志和事务管理）进行开发。应用对象只实现它们应该做的——完成业务逻辑——仅此而已。它们并不负责其它的系统级关注点，例如日志或事务支持。\n\n我们可以把日志、安全、事务管理等服务理解成一个“切面”，那么以前这些服务一直是直接写在业务逻辑的代码当中的，这有两点不好：首先业务逻辑不纯净；其次这些服务被很多业务逻辑反复使用，完全可以剥离出来做到复用。那么 AOP 就是这些问题的解决方案， 可以把这些服务剥离出来形成一个“切面”，以期复用，然后将“切面”动态的“织入”到业务逻辑中，让业务逻辑能够享受到此“切面”的服务。","slug":"spring","published":1,"updated":"2021-04-22T03:43:26.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcz98001pko9bprgnj3rj","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Spring 是一个轻量级的 Java 开发框架，主要作用就是为代码“解耦”，降低代码间的耦合度, 解决企业级开发的复杂性问题。核心是控制反转（IoC）和面向切面编程（AOP）。<code>IoC</code>:IoC 使得主业务在相互调用过程中，不用再自己维护关系，即不用再自己创建要使用的对象了。而是由 Spring容器统一管理，自动“注入”。<code>AOP</code>:Spring根据代码特点允许通过分离应用的业务逻辑与系统级业务逻辑（例如日志和事务管理）进行开发,AOP 使得系统级服务得到了最大复用，程序员不用手工将系统级服务“混杂”到主业务逻辑中了，而是由 Spring 容器统一完成“织入”。</p>\n<h1 id=\"Spring-的特点\"><a href=\"#Spring-的特点\" class=\"headerlink\" title=\"Spring 的特点\"></a>Spring 的特点</h1><p><strong>非侵入式</strong><br>所谓非侵入式是指，Spring 框架的 API 不会在业务逻辑上出现，即业务逻辑是 POJO。由于业务逻辑中没有 Spring 的 API，所以业务逻辑可以从 Spring 框架快速的移植到其他框架， 即与环境无关。</p>\n<p>(POJO:的内在含义是指那些没有从任何类继承、也没有实现任何接口，更没有被其它框架侵入的java对象。)<br><strong>容器</strong><br> Spring 作为一个容器，可以管理对象的生命周期、对象与对象之间的依赖关系。可以通过配置文件，来定义对象，以及设置与其他对象的依赖关系。</p>\n<p> <strong>IoC</strong><br> 控制反转（Inversion of Control），即创建被调用者的实例不是由调用者完成，而是由 Spring 容器完成，并注入调用者。</p>\n<p>当应用了 IoC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。即，不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。</p>\n<p>IoC 是一个概念，是一种思想，其实现方式多种多样。当前比较流行的实现方式有两种： <code>依赖注入</code>和<code>依赖查找</code>。依赖注入方式应用更为广泛。</p>\n<ul>\n<li>依赖查找：Dependency Lookup，DL，容器提供回调接口和上下文环境给组件，程序代码则需要提供具体的查找方式。比较典型的是依赖于 JNDI 系统的查找。</li>\n<li>依赖注入：Dependency Injection，DI，程序代码不做定位查询，这些工作由容器自行完成。 依赖注入 DI 是指程序运行过程中，若需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部容器，由外部容器创建后传递给程序。 Spring 的依赖注入对调用者与被调用者几乎没有任何要求，完全支持 POJO 之间依赖关系的管理。</li>\n</ul>\n<p><strong>AOP</strong><br>面向切面编程（AOP，Aspect Orient Programming），是一种编程思想，是面向对象编程 OOP 的补充。很多框架都实现了对 AOP 编程思想的实现。Spring 也提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务（例如日志和事务管理）进行开发。应用对象只实现它们应该做的——完成业务逻辑——仅此而已。它们并不负责其它的系统级关注点，例如日志或事务支持。</p>\n<p>我们可以把日志、安全、事务管理等服务理解成一个“切面”，那么以前这些服务一直是直接写在业务逻辑的代码当中的，这有两点不好：首先业务逻辑不纯净；其次这些服务被很多业务逻辑反复使用，完全可以剥离出来做到复用。那么 AOP 就是这些问题的解决方案， 可以把这些服务剥离出来形成一个“切面”，以期复用，然后将“切面”动态的“织入”到业务逻辑中，让业务逻辑能够享受到此“切面”的服务。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Spring 是一个轻量级的 Java 开发框架，主要作用就是为代码“解耦”，降低代码间的耦合度, 解决企业级开发的复杂性问题。核心是控制反转（IoC）和面向切面编程（AOP）。<code>IoC</code>:IoC 使得主业务在相互调用过程中，不用再自己维护关系，即不用再自己创建要使用的对象了。而是由 Spring容器统一管理，自动“注入”。<code>AOP</code>:Spring根据代码特点允许通过分离应用的业务逻辑与系统级业务逻辑（例如日志和事务管理）进行开发,AOP 使得系统级服务得到了最大复用，程序员不用手工将系统级服务“混杂”到主业务逻辑中了，而是由 Spring 容器统一完成“织入”。</p>\n<h1 id=\"Spring-的特点\"><a href=\"#Spring-的特点\" class=\"headerlink\" title=\"Spring 的特点\"></a>Spring 的特点</h1><p><strong>非侵入式</strong><br>所谓非侵入式是指，Spring 框架的 API 不会在业务逻辑上出现，即业务逻辑是 POJO。由于业务逻辑中没有 Spring 的 API，所以业务逻辑可以从 Spring 框架快速的移植到其他框架， 即与环境无关。</p>\n<p>(POJO:的内在含义是指那些没有从任何类继承、也没有实现任何接口，更没有被其它框架侵入的java对象。)<br><strong>容器</strong><br> Spring 作为一个容器，可以管理对象的生命周期、对象与对象之间的依赖关系。可以通过配置文件，来定义对象，以及设置与其他对象的依赖关系。</p>\n<p> <strong>IoC</strong><br> 控制反转（Inversion of Control），即创建被调用者的实例不是由调用者完成，而是由 Spring 容器完成，并注入调用者。</p>\n<p>当应用了 IoC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。即，不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。</p>\n<p>IoC 是一个概念，是一种思想，其实现方式多种多样。当前比较流行的实现方式有两种： <code>依赖注入</code>和<code>依赖查找</code>。依赖注入方式应用更为广泛。</p>\n<ul>\n<li>依赖查找：Dependency Lookup，DL，容器提供回调接口和上下文环境给组件，程序代码则需要提供具体的查找方式。比较典型的是依赖于 JNDI 系统的查找。</li>\n<li>依赖注入：Dependency Injection，DI，程序代码不做定位查询，这些工作由容器自行完成。 依赖注入 DI 是指程序运行过程中，若需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部容器，由外部容器创建后传递给程序。 Spring 的依赖注入对调用者与被调用者几乎没有任何要求，完全支持 POJO 之间依赖关系的管理。</li>\n</ul>\n<p><strong>AOP</strong><br>面向切面编程（AOP，Aspect Orient Programming），是一种编程思想，是面向对象编程 OOP 的补充。很多框架都实现了对 AOP 编程思想的实现。Spring 也提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务（例如日志和事务管理）进行开发。应用对象只实现它们应该做的——完成业务逻辑——仅此而已。它们并不负责其它的系统级关注点，例如日志或事务支持。</p>\n<p>我们可以把日志、安全、事务管理等服务理解成一个“切面”，那么以前这些服务一直是直接写在业务逻辑的代码当中的，这有两点不好：首先业务逻辑不纯净；其次这些服务被很多业务逻辑反复使用，完全可以剥离出来做到复用。那么 AOP 就是这些问题的解决方案， 可以把这些服务剥离出来形成一个“切面”，以期复用，然后将“切面”动态的“织入”到业务逻辑中，让业务逻辑能够享受到此“切面”的服务。</p>\n"},{"title":"持续集成持续部署","date":"2020-01-19T12:51:34.000Z","_content":"","source":"_posts/持续集成持续部署.md","raw":"---\ntitle: 持续集成持续部署\ndate: 2020-01-19 20:51:34\ntags:\n---\n","slug":"持续集成持续部署","published":1,"updated":"2021-04-22T03:43:26.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcz9a001qko9bmlhwh5qy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"数据库事务","date":"2019-07-15T01:50:09.000Z","_content":"\n# 数据库事务\n\n#### 数据库事务的几个特性（简称ACID）\n\n- 原子性(Atomicity )\n\n- 一致性( Consistency )\n\n- 隔离性或独立性( Isolation)\n\n- 持久性(Durabilily)\n\n## 事务的隔离级别\n\n在事务的四大特性ACID中，要求的隔离性是一种严格意义上的隔离，也就是多个事务是串行执行的，彼此之间不会受到任何干扰。这确实能够完全保证数据的安全性，但在实际业务系统中，这种方式性能不高。因此，数据库定义了四种隔离级别，隔离级别和数据库的性能是呈反比的，隔离级别越低，数据库性能越高，而隔离级别越高，数据库性能越差。\n\n#### 事务并发执行会出现的问题\n\n- 更新丢失 \n当有两个并发执行的事务，更新同一行数据，那么有可能一个事务会把另一个事务的更新覆盖掉。 \n当数据库没有加任何锁操作的情况下会发生。\n\n- 脏读 \n一个事务读到另一个尚未提交的事务中的数据。 \n该数据可能会被回滚从而失效。 \n如果第一个事务拿着失效的数据去处理那就发生错误了。\n\n- 不可重复读 \n不可重复度的含义：一个事务对同一行数据读了两次，却得到了不同的结果。它具体分为如下两种情况：\n\n\t- 虚读：在事务1两次读取同一记录的过程中，事务2对该记录进行了修改，从而事务1第二次读到了不一样的记录。\n\t\n\t- 幻读：事务1在两次查询的过程中，事务2对该表进行了插入、删除操作，从而事务1第二次查询的结果发生了变化。\n\t\n\n## 数据库的四种隔离级别\n#### 数据库一共有如下四种隔离级别：\n\n- Read uncommitted 读未提交 \n  在该级别下，一个事务对一行数据修改的过程中，不允许另一个事务对该行数据进行修改，但允许另一个事务对该行数据读。 \n  因此本级别下，不会出现更新丢失，但会出现脏读、不可重复读。\n\n- Read committed 读提交 \n  在该级别下，未提交的写事务不允许其他事务访问该行，因此不会出现脏读；但是读取数据的事务允许其他事务的访问该行数据，因此会出现不可重复读的情况。\n\n- Repeatable read 重复读 \n  在该级别下，读事务禁止写事务，但允许读事务，因此不会出现同一事务两次读到不同的数据的情况（不可重复读），且写事务禁止其他一切事务。\n\n- Serializable 序列化 \n  该级别要求所有事务都必须串行执行，因此能避免一切因并发引起的问题，但效率很低。\n\n隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed。它能够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。\n\n","source":"_posts/数据库事务.md","raw":"---\ntitle: 数据库事务\ndate: 2019-07-15 09:50:09\ntags:\n    - 数据库\n---\n\n# 数据库事务\n\n#### 数据库事务的几个特性（简称ACID）\n\n- 原子性(Atomicity )\n\n- 一致性( Consistency )\n\n- 隔离性或独立性( Isolation)\n\n- 持久性(Durabilily)\n\n## 事务的隔离级别\n\n在事务的四大特性ACID中，要求的隔离性是一种严格意义上的隔离，也就是多个事务是串行执行的，彼此之间不会受到任何干扰。这确实能够完全保证数据的安全性，但在实际业务系统中，这种方式性能不高。因此，数据库定义了四种隔离级别，隔离级别和数据库的性能是呈反比的，隔离级别越低，数据库性能越高，而隔离级别越高，数据库性能越差。\n\n#### 事务并发执行会出现的问题\n\n- 更新丢失 \n当有两个并发执行的事务，更新同一行数据，那么有可能一个事务会把另一个事务的更新覆盖掉。 \n当数据库没有加任何锁操作的情况下会发生。\n\n- 脏读 \n一个事务读到另一个尚未提交的事务中的数据。 \n该数据可能会被回滚从而失效。 \n如果第一个事务拿着失效的数据去处理那就发生错误了。\n\n- 不可重复读 \n不可重复度的含义：一个事务对同一行数据读了两次，却得到了不同的结果。它具体分为如下两种情况：\n\n\t- 虚读：在事务1两次读取同一记录的过程中，事务2对该记录进行了修改，从而事务1第二次读到了不一样的记录。\n\t\n\t- 幻读：事务1在两次查询的过程中，事务2对该表进行了插入、删除操作，从而事务1第二次查询的结果发生了变化。\n\t\n\n## 数据库的四种隔离级别\n#### 数据库一共有如下四种隔离级别：\n\n- Read uncommitted 读未提交 \n  在该级别下，一个事务对一行数据修改的过程中，不允许另一个事务对该行数据进行修改，但允许另一个事务对该行数据读。 \n  因此本级别下，不会出现更新丢失，但会出现脏读、不可重复读。\n\n- Read committed 读提交 \n  在该级别下，未提交的写事务不允许其他事务访问该行，因此不会出现脏读；但是读取数据的事务允许其他事务的访问该行数据，因此会出现不可重复读的情况。\n\n- Repeatable read 重复读 \n  在该级别下，读事务禁止写事务，但允许读事务，因此不会出现同一事务两次读到不同的数据的情况（不可重复读），且写事务禁止其他一切事务。\n\n- Serializable 序列化 \n  该级别要求所有事务都必须串行执行，因此能避免一切因并发引起的问题，但效率很低。\n\n隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed。它能够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。\n\n","slug":"数据库事务","published":1,"updated":"2021-04-22T03:43:26.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcz9c001sko9b4ii2ur06","content":"<h1 id=\"数据库事务\"><a href=\"#数据库事务\" class=\"headerlink\" title=\"数据库事务\"></a>数据库事务</h1><h4 id=\"数据库事务的几个特性（简称ACID）\"><a href=\"#数据库事务的几个特性（简称ACID）\" class=\"headerlink\" title=\"数据库事务的几个特性（简称ACID）\"></a>数据库事务的几个特性（简称ACID）</h4><ul>\n<li><p>原子性(Atomicity )</p>\n</li>\n<li><p>一致性( Consistency )</p>\n</li>\n<li><p>隔离性或独立性( Isolation)</p>\n</li>\n<li><p>持久性(Durabilily)</p>\n</li>\n</ul>\n<h2 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h2><p>在事务的四大特性ACID中，要求的隔离性是一种严格意义上的隔离，也就是多个事务是串行执行的，彼此之间不会受到任何干扰。这确实能够完全保证数据的安全性，但在实际业务系统中，这种方式性能不高。因此，数据库定义了四种隔离级别，隔离级别和数据库的性能是呈反比的，隔离级别越低，数据库性能越高，而隔离级别越高，数据库性能越差。</p>\n<h4 id=\"事务并发执行会出现的问题\"><a href=\"#事务并发执行会出现的问题\" class=\"headerlink\" title=\"事务并发执行会出现的问题\"></a>事务并发执行会出现的问题</h4><ul>\n<li><p>更新丢失<br>当有两个并发执行的事务，更新同一行数据，那么有可能一个事务会把另一个事务的更新覆盖掉。<br>当数据库没有加任何锁操作的情况下会发生。</p>\n</li>\n<li><p>脏读<br>一个事务读到另一个尚未提交的事务中的数据。<br>该数据可能会被回滚从而失效。<br>如果第一个事务拿着失效的数据去处理那就发生错误了。</p>\n</li>\n<li><p>不可重复读<br>不可重复度的含义：一个事务对同一行数据读了两次，却得到了不同的结果。它具体分为如下两种情况：</p>\n<ul>\n<li><p>虚读：在事务1两次读取同一记录的过程中，事务2对该记录进行了修改，从而事务1第二次读到了不一样的记录。</p>\n</li>\n<li><p>幻读：事务1在两次查询的过程中，事务2对该表进行了插入、删除操作，从而事务1第二次查询的结果发生了变化。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据库的四种隔离级别\"><a href=\"#数据库的四种隔离级别\" class=\"headerlink\" title=\"数据库的四种隔离级别\"></a>数据库的四种隔离级别</h2><h4 id=\"数据库一共有如下四种隔离级别：\"><a href=\"#数据库一共有如下四种隔离级别：\" class=\"headerlink\" title=\"数据库一共有如下四种隔离级别：\"></a>数据库一共有如下四种隔离级别：</h4><ul>\n<li><p>Read uncommitted 读未提交<br>在该级别下，一个事务对一行数据修改的过程中，不允许另一个事务对该行数据进行修改，但允许另一个事务对该行数据读。<br>因此本级别下，不会出现更新丢失，但会出现脏读、不可重复读。</p>\n</li>\n<li><p>Read committed 读提交<br>在该级别下，未提交的写事务不允许其他事务访问该行，因此不会出现脏读；但是读取数据的事务允许其他事务的访问该行数据，因此会出现不可重复读的情况。</p>\n</li>\n<li><p>Repeatable read 重复读<br>在该级别下，读事务禁止写事务，但允许读事务，因此不会出现同一事务两次读到不同的数据的情况（不可重复读），且写事务禁止其他一切事务。</p>\n</li>\n<li><p>Serializable 序列化<br>该级别要求所有事务都必须串行执行，因此能避免一切因并发引起的问题，但效率很低。</p>\n</li>\n</ul>\n<p>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed。它能够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据库事务\"><a href=\"#数据库事务\" class=\"headerlink\" title=\"数据库事务\"></a>数据库事务</h1><h4 id=\"数据库事务的几个特性（简称ACID）\"><a href=\"#数据库事务的几个特性（简称ACID）\" class=\"headerlink\" title=\"数据库事务的几个特性（简称ACID）\"></a>数据库事务的几个特性（简称ACID）</h4><ul>\n<li><p>原子性(Atomicity )</p>\n</li>\n<li><p>一致性( Consistency )</p>\n</li>\n<li><p>隔离性或独立性( Isolation)</p>\n</li>\n<li><p>持久性(Durabilily)</p>\n</li>\n</ul>\n<h2 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h2><p>在事务的四大特性ACID中，要求的隔离性是一种严格意义上的隔离，也就是多个事务是串行执行的，彼此之间不会受到任何干扰。这确实能够完全保证数据的安全性，但在实际业务系统中，这种方式性能不高。因此，数据库定义了四种隔离级别，隔离级别和数据库的性能是呈反比的，隔离级别越低，数据库性能越高，而隔离级别越高，数据库性能越差。</p>\n<h4 id=\"事务并发执行会出现的问题\"><a href=\"#事务并发执行会出现的问题\" class=\"headerlink\" title=\"事务并发执行会出现的问题\"></a>事务并发执行会出现的问题</h4><ul>\n<li><p>更新丢失<br>当有两个并发执行的事务，更新同一行数据，那么有可能一个事务会把另一个事务的更新覆盖掉。<br>当数据库没有加任何锁操作的情况下会发生。</p>\n</li>\n<li><p>脏读<br>一个事务读到另一个尚未提交的事务中的数据。<br>该数据可能会被回滚从而失效。<br>如果第一个事务拿着失效的数据去处理那就发生错误了。</p>\n</li>\n<li><p>不可重复读<br>不可重复度的含义：一个事务对同一行数据读了两次，却得到了不同的结果。它具体分为如下两种情况：</p>\n<ul>\n<li><p>虚读：在事务1两次读取同一记录的过程中，事务2对该记录进行了修改，从而事务1第二次读到了不一样的记录。</p>\n</li>\n<li><p>幻读：事务1在两次查询的过程中，事务2对该表进行了插入、删除操作，从而事务1第二次查询的结果发生了变化。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据库的四种隔离级别\"><a href=\"#数据库的四种隔离级别\" class=\"headerlink\" title=\"数据库的四种隔离级别\"></a>数据库的四种隔离级别</h2><h4 id=\"数据库一共有如下四种隔离级别：\"><a href=\"#数据库一共有如下四种隔离级别：\" class=\"headerlink\" title=\"数据库一共有如下四种隔离级别：\"></a>数据库一共有如下四种隔离级别：</h4><ul>\n<li><p>Read uncommitted 读未提交<br>在该级别下，一个事务对一行数据修改的过程中，不允许另一个事务对该行数据进行修改，但允许另一个事务对该行数据读。<br>因此本级别下，不会出现更新丢失，但会出现脏读、不可重复读。</p>\n</li>\n<li><p>Read committed 读提交<br>在该级别下，未提交的写事务不允许其他事务访问该行，因此不会出现脏读；但是读取数据的事务允许其他事务的访问该行数据，因此会出现不可重复读的情况。</p>\n</li>\n<li><p>Repeatable read 重复读<br>在该级别下，读事务禁止写事务，但允许读事务，因此不会出现同一事务两次读到不同的数据的情况（不可重复读），且写事务禁止其他一切事务。</p>\n</li>\n<li><p>Serializable 序列化<br>该级别要求所有事务都必须串行执行，因此能避免一切因并发引起的问题，但效率很低。</p>\n</li>\n</ul>\n<p>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed。它能够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。</p>\n"},{"title":"yapi部署","date":"2020-01-14T14:40:36.000Z","_content":"\n# 基于Docker-compose部署Yapi\n\n```\nversion: '2.1'\nservices:\n  yapi:\n    image: mrjin/yapi:latest\n#    build: ./\n    container_name: yapi\n    environment:\n      - VERSION=1.5.6\n      - LOG_PATH=/tmp/yapi.log\n      - HOME=/home\n      - PORT=3000\n      - ADMIN_EMAIL=414706657@qq.com\n      - DB_SERVER=mongo\n      - DB_NAME=yapi\n      - DB_PORT=27017\n    # restart: always\n    ports:\n      - 3000:3000\n    volumes:\n      - ~/data/yapi/log/yapi.log:/home/vendors/log # log dir\n    depends_on:\n      - mongo\n    entrypoint: \"bash /wait-for-it.sh mongo:27017 -- entrypoint.sh\"\n    networks:\n      - back-net\n  mongo:\n    image: mongo\n    container_name: mongo\n    # restart: always\n    ports:\n      - 127.0.0.1:27017:27017\n    volumes:\n      - ~/data/yapi/mongodb:/data/db #db dir\n    networks:\n      - back-net\nnetworks:\n  back-net:\n    external: true\n                     \n```\n\n请求地址：ip:3000\n默认密码：ymfe.org\n\n","source":"_posts/yapi部署.md","raw":"---\ntitle: yapi部署\ndate: 2020-01-14 22:40:36\ntags:\n---\n\n# 基于Docker-compose部署Yapi\n\n```\nversion: '2.1'\nservices:\n  yapi:\n    image: mrjin/yapi:latest\n#    build: ./\n    container_name: yapi\n    environment:\n      - VERSION=1.5.6\n      - LOG_PATH=/tmp/yapi.log\n      - HOME=/home\n      - PORT=3000\n      - ADMIN_EMAIL=414706657@qq.com\n      - DB_SERVER=mongo\n      - DB_NAME=yapi\n      - DB_PORT=27017\n    # restart: always\n    ports:\n      - 3000:3000\n    volumes:\n      - ~/data/yapi/log/yapi.log:/home/vendors/log # log dir\n    depends_on:\n      - mongo\n    entrypoint: \"bash /wait-for-it.sh mongo:27017 -- entrypoint.sh\"\n    networks:\n      - back-net\n  mongo:\n    image: mongo\n    container_name: mongo\n    # restart: always\n    ports:\n      - 127.0.0.1:27017:27017\n    volumes:\n      - ~/data/yapi/mongodb:/data/db #db dir\n    networks:\n      - back-net\nnetworks:\n  back-net:\n    external: true\n                     \n```\n\n请求地址：ip:3000\n默认密码：ymfe.org\n\n","slug":"yapi部署","published":1,"updated":"2021-04-22T03:43:26.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcz9d001uko9brzk2g2wf","content":"<h1 id=\"基于Docker-compose部署Yapi\"><a href=\"#基于Docker-compose部署Yapi\" class=\"headerlink\" title=\"基于Docker-compose部署Yapi\"></a>基于Docker-compose部署Yapi</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &apos;2.1&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  yapi:</span><br><span class=\"line\">    image: mrjin/yapi:latest</span><br><span class=\"line\">#    build: ./</span><br><span class=\"line\">    container_name: yapi</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - VERSION=1.5.6</span><br><span class=\"line\">      - LOG_PATH=/tmp/yapi.log</span><br><span class=\"line\">      - HOME=/home</span><br><span class=\"line\">      - PORT=3000</span><br><span class=\"line\">      - ADMIN_EMAIL=414706657@qq.com</span><br><span class=\"line\">      - DB_SERVER=mongo</span><br><span class=\"line\">      - DB_NAME=yapi</span><br><span class=\"line\">      - DB_PORT=27017</span><br><span class=\"line\">    # restart: always</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 3000:3000</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ~/data/yapi/log/yapi.log:/home/vendors/log # log dir</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - mongo</span><br><span class=\"line\">    entrypoint: &quot;bash /wait-for-it.sh mongo:27017 -- entrypoint.sh&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - back-net</span><br><span class=\"line\">  mongo:</span><br><span class=\"line\">    image: mongo</span><br><span class=\"line\">    container_name: mongo</span><br><span class=\"line\">    # restart: always</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 127.0.0.1:27017:27017</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ~/data/yapi/mongodb:/data/db #db dir</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - back-net</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  back-net:</span><br><span class=\"line\">    external: true</span><br></pre></td></tr></table></figure>\n\n<p>请求地址：ip:3000<br>默认密码：ymfe.org</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基于Docker-compose部署Yapi\"><a href=\"#基于Docker-compose部署Yapi\" class=\"headerlink\" title=\"基于Docker-compose部署Yapi\"></a>基于Docker-compose部署Yapi</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &apos;2.1&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  yapi:</span><br><span class=\"line\">    image: mrjin/yapi:latest</span><br><span class=\"line\">#    build: ./</span><br><span class=\"line\">    container_name: yapi</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - VERSION=1.5.6</span><br><span class=\"line\">      - LOG_PATH=/tmp/yapi.log</span><br><span class=\"line\">      - HOME=/home</span><br><span class=\"line\">      - PORT=3000</span><br><span class=\"line\">      - ADMIN_EMAIL=414706657@qq.com</span><br><span class=\"line\">      - DB_SERVER=mongo</span><br><span class=\"line\">      - DB_NAME=yapi</span><br><span class=\"line\">      - DB_PORT=27017</span><br><span class=\"line\">    # restart: always</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 3000:3000</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ~/data/yapi/log/yapi.log:/home/vendors/log # log dir</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - mongo</span><br><span class=\"line\">    entrypoint: &quot;bash /wait-for-it.sh mongo:27017 -- entrypoint.sh&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - back-net</span><br><span class=\"line\">  mongo:</span><br><span class=\"line\">    image: mongo</span><br><span class=\"line\">    container_name: mongo</span><br><span class=\"line\">    # restart: always</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 127.0.0.1:27017:27017</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ~/data/yapi/mongodb:/data/db #db dir</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - back-net</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  back-net:</span><br><span class=\"line\">    external: true</span><br></pre></td></tr></table></figure>\n\n<p>请求地址：ip:3000<br>默认密码：ymfe.org</p>\n"},{"title":"分布式事务","date":"2019-07-15T02:36:37.000Z","_content":"\n# 分布式事务\n\n## 分布式理论\n\n当我们的单个数据库的性能产生瓶颈的时候，我们可能会对数据库进行分区，这里所说的分区指的是物理分区，分区之后可能不同的库就处于不同的服务器上了，这个时候单个数据库的ACID已经不能适应这种情况了，而在这种ACID的集群环境下，再想保证集群的ACID几乎是很难达到，或者即使能达到那么效率和性能会大幅下降，最为关键的是再很难扩展新的分区了，这个时候如果再追求集群的ACID会导致我们的系统变得很差，这时我们就需要引入一个新的理论原则来适应这种集群的情况，就是 CAP 原则或者叫CAP定理，那么CAP定理指的是什么呢？\n\n#### CAP定理\n\nCAP定理是由加州大学伯克利分校Eric Brewer教授提出来的，他指出WEB服务无法同时满足一下3个属性：\n\n* 一致性(Consistency) ： 客户端知道一系列的操作都会同时发生(生效)\n\n* 可用性(Availability) ： 每个操作都必须以可预期的响应结束\n\n* 分区容错性(Partition tolerance) ： 即使出现单个组件无法可用, 操作依然可以完成\n\n具体地讲在分布式系统中，在任何数据库设计中，一个Web应用至多只能同时支持上面的两个属性。显然，任何横向扩展策略都要依赖于数据分区。因此，设计人员必须在一致性与可用性之间做出选择。\n\n#### 数据库分布式事务有了解的同学一定知道数据库支持的2PC，又叫做 XA Transactions。\n\n    MySQL从5.5版本开始支持，SQL Server 2005 开始支持，Oracle 7 开始支持。\n\n其中，XA 是一个两阶段提交协议，该协议分为以下两个阶段：\n\n* 第一阶段：事务协调器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是否可以提交.\n\n* 第二阶段：事务协调器要求每个数据库提交数据。\n\n#### BASE理论\n\n在分布式系统中，我们往往追求的是可用性，它的重要程序比一致性要高，那么如何实现高可用性呢？ 前人已经给我们提出来了另外一个理论，就是BASE理论，它是用来对CAP定理进行进一步扩充的。BASE理论指的是：\n\n* Basically Available（基本可用）\n\n* Soft state（软状态）\n\n* Eventually consistent（最终一致性）\n\nBASE理论是对CAP中的一致性和可用性进行一个权衡的结果，理论的核心思想就是：**我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性**（Eventual consistency）。\n\n--------------------------------------------------\n\n## 分布式事务\n\n在分布式系统中，要实现分布式事务，无外乎那几种解决方案。\n\n#### 一、两阶段提交（2PC）\n\n和上一节中提到的数据库XA事务一样，两阶段提交就是使用XA协议的原理，我们可以从下面这个图的流程来很容易的看出中间的一些比如commit和abort的细节。\n\n![](.\\img\\250417-20171016132145537-970496141.png)\n\n两阶段提交这种解决方案属于牺牲了一部分可用性来换取的一致性。在实现方面，在 . NET 中，可以借助 TransactionScop 提供的 API 来编程实现分布式系统中的两阶段提交，比如WCF中就有实现这部分功能。不过在多服务器之间，需要依赖于DTC来完成事务一致性，Windows下微软搞的有MSDTC服务，Linux下就比较悲剧了。\n\n另外说一句，TransactionScop 默认不能用于异步方法之间事务一致，因为事务上下文是存储于当前线程中的，所以如果是在异步方法，需要显式的传递事务上下文。\n\n**优点：** 尽量保证了数据的强一致，适合对数据强一致要求很高的关键领域。（其实也不能100%保证强一致）\n\n**缺点：** 实现复杂，牺牲了可用性，对性能影响较大，不适合高并发高性能场景，如果分布式系统跨接口调用，目前 . NET 界还没有实现方案。\n\n#### 二、三阶段提交协议 3PC\n\n与两阶段提交不同的是，三阶段提交有两个改动点。\n\n* 引入超时机制。同时在协调者和参与者中都引入超时机制。\n* 在第一阶段和第二阶段中插入一个准备阶段。保证了在最后提交阶段之前各参与节点的状态是一致的。 \n\n也就是说，除了引入超时机制之外，3PC把2PC的准备阶段再次一分为二，这样三阶段提交就有CanCommit、PreCommit、DoCommit三个阶段。\n\n#### 1. CanCommit阶段\n\n3PC的CanCommit阶段其实和2PC的准备阶段很像。协调者向参与者发送commit请求，参与者如果可以提交就返回Yes响应，否则返回No响应。\n\n1. 事务询问 \n\n     协调者向参与者发送CanCommit请求。询问是否可以执行事务提交操作。然后开始等待参与者的响应。\n\n2. 响应反馈 \n\n     参与者接到CanCommit请求之后，正常情况下，如果其自身认为可以顺利执行事务，则返回Yes响应，并进入预备状态。否则反馈No\n\n#### 2. PreCommit阶段\n\n协调者根据参与者的反应情况来决定是否可以记性事务的PreCommit操作。根据响应情况，有以下两种可能。 \n假如协调者从所有的参与者获得的反馈都是Yes响应，那么就会执行事务的预执行。\n\n1. 发送预提交请求 \n\n   协调者向参与者发送PreCommit请求，并进入Prepared阶段。\n\n2. 事务预提交 \n\n   参与者接收到PreCommit请求后，会执行事务操作，并将undo和redo信息记录到事务日志中。\n\n3. 响应反馈 \n\n   如果参与者成功的执行了事务操作，则返回ACK响应，同时开始等待最终指令。\n\n假如有任何一个参与者向协调者发送了No响应，或者等待超时之后，协调者都没有接到参与者的响应，那么就执行事务的中断。\n\n1. 发送中断请求 \n\n   协调者向所有参与者发送abort请求。\n\n3. 中断事务 \n\n   参与者收到来自协调者的abort请求之后（或超时之后，仍未收到协调者的请求），执行事务的中断。\n\n#### 3. doCommit阶段 \n\n该阶段进行真正的事务提交，也可以分为以下两种情况。\n\n该阶段进行真正的事务提交，也可以分为以下两种情况。\n\n3.1 执行提交\n\n1. 发送提交请求 \n\n   协调接收到参与者发送的ACK响应，那么他将从预提交状态进入到提交状态。并向所有参与者发送doCommit请求。\n\n2. 事务提交 \n\n参与者接收到doCommit请求之后，执行正式的事务提交。并在完成事务提交之后释放所有事务资源。\n\n3. 响应反馈 \n\n    事务提交完之后，向协调者发送Ack响应。\n\n4. 完成事务 \n\n    协调者接收到所有参与者的ack响应之后，完成事务。\n\n3.2 中断事务 \n协调者没有接收到参与者发送的ACK响应（可能是接受者发送的不是ACK响应，也可能响应超时），那么就会执行中断事务。\n\n1. 发送中断请求 \n\n   协调者向所有参与者发送abort请求\n\n2. 事务回滚 \n\n   参与者接收到abort请求之后，利用其在阶段二记录的undo信息来执行事务的回滚操作，并在完成回滚之后释放所有的事务资源。\n\n3. 反馈结果 \n\n   参与者完成事务回滚之后，向协调者发送ACK消息\n\n4. 中断事务 \n\n   协调者接收到参与者反馈的ACK消息之后，执行事务的中断。\n\n#### 三、补偿事务（TCC）\n\nTCC 其实就是采用的补偿机制，其核心思想是：针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作。它分为三个阶段：\n\n* Try 阶段主要是对业务系统做检测及资源预留\n* Confirm 阶段主要是对业务系统做确认提交，Try阶段执行成功并开始执行 Confirm阶段时，默认 Confirm阶段是不会出错的。即：只要Try成功，Confirm一定成功。\n* Cancel 阶段主要是在业务执行错误，需要回滚的状态下执行的业务取消，预留资源释放。\n\n举个例子，假入 Bob 要向 Smith 转账，思路大概是：\n我们有一个本地方法，里面依次调用\n1、首先在 Try 阶段，要先调用远程接口把 Smith 和 Bob 的钱给冻结起来。\n2、在 Confirm 阶段，执行远程调用的转账的操作，转账成功进行解冻。\n3、如果第2步执行成功，那么转账成功，如果第二步执行失败，则调用远程冻结接口对应的解冻方法 (Cancel)。\n\n**优点：** 跟2PC比起来，实现以及流程相对简单了一些，但数据的一致性比2PC也要差一些\n\n**缺点：** 缺点还是比较明显的，在2, 3步中都有可能失败。TCC属于应用层的一种补偿方式，所以需要程序员在实现的时候多写很多补偿的代码，在一些场景中，一些业务流程可能用TCC不太好定义及处理\n\n#### 四、本地消息表（异步确保）\n\n本地消息表这种实现方式应该是业界使用最多的，其核心思想是将分布式事务拆分成本地事务进行处理，这种思路是来源于ebay。我们可以从下面的流程图中看出其中的一些细节：\n\n![](.\\img\\250417-20171016141237443-2074834323.png)\n\n**基本思路：**\n\n消息生产方，需要额外建一个消息表，并记录消息发送状态。消息表和业务数据要在一个事务里提交，也就是说他们要在一个数据库里面。然后消息会经过MQ发送到消息的消费方。如果消息发送失败，会进行重试发送。\n\n消息消费方，需要处理这个消息，并完成自己的业务逻辑。此时如果本地事务处理成功，表明已经处理成功了，如果处理失败，那么就会重试执行。如果是业务上面的失败，可以给生产方发送一个业务补偿消息，通知生产方进行回滚等操作。\n\n生产方和消费方定时扫描本地消息表，把还没处理完成的消息或者失败的消息再发送一遍。如果有靠谱的自动对账补账逻辑，这种方案还是非常实用的。\n\n这种方案遵循BASE理论，采用的是最终一致性，笔者认为是这几种方案里面比较适合实际业务场景的，即不会出现像2PC那样复杂的实现(当调用链很长的时候，2PC的可用性是非常低的)，也不会像TCC那样可能出现确认或者回滚不了的情况。\n\n**优点：** 一种非常经典的实现，避免了分布式事务，实现了最终一致性。在 . NET中 有现成的解决方案。\n\n**缺点：** 消息表会耦合到业务系统中，如果没有封装好的解决方案，会有很多杂活需要处理\n\n#### 五、MQ 事务消息\n\n有一些第三方的MQ是支持事务消息的，比如RocketMQ，他们支持事务消息的方式也是类似于采用的二阶段提交，但是市面上一些主流的MQ都是不支持事务消息的，比如 RabbitMQ 和 Kafka 都不支持。\n\n以阿里的 RocketMQ 中间件为例，其思路大致为：\n\n第一阶段Prepared消息，会拿到消息的地址。\n第二阶段执行本地事务，第三阶段通过第一阶段拿到的地址去访问消息，并修改状态。\n\n也就是说在业务方法内要想消息队列提交两次请求，一次发送消息和一次确认消息。如果确认消息发送失败了RocketMQ会定期扫描消息集群中的事务消息，这时候发现了Prepared消息，它会向消息发送者确认，所以生产方需要实现一个check接口，RocketMQ会根据发送端设置的策略来决定是回滚还是继续发送确认消息。这样就保证了消息发送与本地事务同时成功或同时失败。\n\n![](.\\img\\250417-20171016203840240-13953078.png)\n\n遗憾的是，RocketMQ并没有 . NET 客户端。有关 RocketMQ的更多消息，大家可以查看[这篇博客](http://www.jianshu.com/p/453c6e7ff81c)\n\n**优点：** 实现了最终一致性，不需要依赖本地数据库事务。\n\n**缺点：** 实现难度大，主流MQ不支持，没有. NET客户端，RocketMQ事务消息部分代码也未开源。\n\n#### 六、Sagas 事务模型\n\nSaga事务模型又叫做长时间运行的事务（Long-running-transaction）, 它是由普林斯顿大学的H. Garcia-Molina等人提出，它描述的是另外一种在没有两阶段提交的的情况下解决分布式系统中复杂的业务事务问题。你可以在[这里](https://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf)看到 Sagas 相关论文。\n\n我们这里说的是一种基于 Sagas 机制的工作流事务模型，这个模型的相关理论目前来说还是比较新的，以至于百度上几乎没有什么相关资料。\n\n该模型其核心思想就是拆分分布式系统中的长事务为多个短事务，或者叫多个本地事务，然后由 Sagas 工作流引擎负责协调，如果整个流程正常结束，那么就算是业务成功完成，如果在这过程中实现失败，那么Sagas工作流引擎就会以相反的顺序调用补偿操作，重新进行业务回滚。\n\n比如我们一次关于购买旅游套餐业务操作涉及到三个操作，他们分别是预定车辆，预定宾馆，预定机票，他们分别属于三个不同的远程接口。可能从我们程序的角度来说他们不属于一个事务，但是从业务角度来说是属于同一个事务的。\n\n![](.\\img\\250417-20171016220040115-805407978.png)\n\n他们的执行顺序如上图所示，所以当发生失败时，会依次进行取消的补偿操作。\n\n因为长事务被拆分了很多个业务流，所以 Sagas 事务模型最重要的一个部件就是工作流或者你也可以叫流程管理器（Process Manager），工作流引擎和Process Manager虽然不是同一个东西，但是在这里，他们的职责是相同的。目前市面上还没有什么解决方案，即使是 Java 领域，也没有搜索的太多有用的信息。\n","source":"_posts/分布式事务.md","raw":"---\ntitle: 分布式事务\ndate: 2019-07-15 10:36:37\ntags:\n\n    - 数据库\n\n---\n\n# 分布式事务\n\n## 分布式理论\n\n当我们的单个数据库的性能产生瓶颈的时候，我们可能会对数据库进行分区，这里所说的分区指的是物理分区，分区之后可能不同的库就处于不同的服务器上了，这个时候单个数据库的ACID已经不能适应这种情况了，而在这种ACID的集群环境下，再想保证集群的ACID几乎是很难达到，或者即使能达到那么效率和性能会大幅下降，最为关键的是再很难扩展新的分区了，这个时候如果再追求集群的ACID会导致我们的系统变得很差，这时我们就需要引入一个新的理论原则来适应这种集群的情况，就是 CAP 原则或者叫CAP定理，那么CAP定理指的是什么呢？\n\n#### CAP定理\n\nCAP定理是由加州大学伯克利分校Eric Brewer教授提出来的，他指出WEB服务无法同时满足一下3个属性：\n\n* 一致性(Consistency) ： 客户端知道一系列的操作都会同时发生(生效)\n\n* 可用性(Availability) ： 每个操作都必须以可预期的响应结束\n\n* 分区容错性(Partition tolerance) ： 即使出现单个组件无法可用, 操作依然可以完成\n\n具体地讲在分布式系统中，在任何数据库设计中，一个Web应用至多只能同时支持上面的两个属性。显然，任何横向扩展策略都要依赖于数据分区。因此，设计人员必须在一致性与可用性之间做出选择。\n\n#### 数据库分布式事务有了解的同学一定知道数据库支持的2PC，又叫做 XA Transactions。\n\n    MySQL从5.5版本开始支持，SQL Server 2005 开始支持，Oracle 7 开始支持。\n\n其中，XA 是一个两阶段提交协议，该协议分为以下两个阶段：\n\n* 第一阶段：事务协调器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是否可以提交.\n\n* 第二阶段：事务协调器要求每个数据库提交数据。\n\n#### BASE理论\n\n在分布式系统中，我们往往追求的是可用性，它的重要程序比一致性要高，那么如何实现高可用性呢？ 前人已经给我们提出来了另外一个理论，就是BASE理论，它是用来对CAP定理进行进一步扩充的。BASE理论指的是：\n\n* Basically Available（基本可用）\n\n* Soft state（软状态）\n\n* Eventually consistent（最终一致性）\n\nBASE理论是对CAP中的一致性和可用性进行一个权衡的结果，理论的核心思想就是：**我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性**（Eventual consistency）。\n\n--------------------------------------------------\n\n## 分布式事务\n\n在分布式系统中，要实现分布式事务，无外乎那几种解决方案。\n\n#### 一、两阶段提交（2PC）\n\n和上一节中提到的数据库XA事务一样，两阶段提交就是使用XA协议的原理，我们可以从下面这个图的流程来很容易的看出中间的一些比如commit和abort的细节。\n\n![](.\\img\\250417-20171016132145537-970496141.png)\n\n两阶段提交这种解决方案属于牺牲了一部分可用性来换取的一致性。在实现方面，在 . NET 中，可以借助 TransactionScop 提供的 API 来编程实现分布式系统中的两阶段提交，比如WCF中就有实现这部分功能。不过在多服务器之间，需要依赖于DTC来完成事务一致性，Windows下微软搞的有MSDTC服务，Linux下就比较悲剧了。\n\n另外说一句，TransactionScop 默认不能用于异步方法之间事务一致，因为事务上下文是存储于当前线程中的，所以如果是在异步方法，需要显式的传递事务上下文。\n\n**优点：** 尽量保证了数据的强一致，适合对数据强一致要求很高的关键领域。（其实也不能100%保证强一致）\n\n**缺点：** 实现复杂，牺牲了可用性，对性能影响较大，不适合高并发高性能场景，如果分布式系统跨接口调用，目前 . NET 界还没有实现方案。\n\n#### 二、三阶段提交协议 3PC\n\n与两阶段提交不同的是，三阶段提交有两个改动点。\n\n* 引入超时机制。同时在协调者和参与者中都引入超时机制。\n* 在第一阶段和第二阶段中插入一个准备阶段。保证了在最后提交阶段之前各参与节点的状态是一致的。 \n\n也就是说，除了引入超时机制之外，3PC把2PC的准备阶段再次一分为二，这样三阶段提交就有CanCommit、PreCommit、DoCommit三个阶段。\n\n#### 1. CanCommit阶段\n\n3PC的CanCommit阶段其实和2PC的准备阶段很像。协调者向参与者发送commit请求，参与者如果可以提交就返回Yes响应，否则返回No响应。\n\n1. 事务询问 \n\n     协调者向参与者发送CanCommit请求。询问是否可以执行事务提交操作。然后开始等待参与者的响应。\n\n2. 响应反馈 \n\n     参与者接到CanCommit请求之后，正常情况下，如果其自身认为可以顺利执行事务，则返回Yes响应，并进入预备状态。否则反馈No\n\n#### 2. PreCommit阶段\n\n协调者根据参与者的反应情况来决定是否可以记性事务的PreCommit操作。根据响应情况，有以下两种可能。 \n假如协调者从所有的参与者获得的反馈都是Yes响应，那么就会执行事务的预执行。\n\n1. 发送预提交请求 \n\n   协调者向参与者发送PreCommit请求，并进入Prepared阶段。\n\n2. 事务预提交 \n\n   参与者接收到PreCommit请求后，会执行事务操作，并将undo和redo信息记录到事务日志中。\n\n3. 响应反馈 \n\n   如果参与者成功的执行了事务操作，则返回ACK响应，同时开始等待最终指令。\n\n假如有任何一个参与者向协调者发送了No响应，或者等待超时之后，协调者都没有接到参与者的响应，那么就执行事务的中断。\n\n1. 发送中断请求 \n\n   协调者向所有参与者发送abort请求。\n\n3. 中断事务 \n\n   参与者收到来自协调者的abort请求之后（或超时之后，仍未收到协调者的请求），执行事务的中断。\n\n#### 3. doCommit阶段 \n\n该阶段进行真正的事务提交，也可以分为以下两种情况。\n\n该阶段进行真正的事务提交，也可以分为以下两种情况。\n\n3.1 执行提交\n\n1. 发送提交请求 \n\n   协调接收到参与者发送的ACK响应，那么他将从预提交状态进入到提交状态。并向所有参与者发送doCommit请求。\n\n2. 事务提交 \n\n参与者接收到doCommit请求之后，执行正式的事务提交。并在完成事务提交之后释放所有事务资源。\n\n3. 响应反馈 \n\n    事务提交完之后，向协调者发送Ack响应。\n\n4. 完成事务 \n\n    协调者接收到所有参与者的ack响应之后，完成事务。\n\n3.2 中断事务 \n协调者没有接收到参与者发送的ACK响应（可能是接受者发送的不是ACK响应，也可能响应超时），那么就会执行中断事务。\n\n1. 发送中断请求 \n\n   协调者向所有参与者发送abort请求\n\n2. 事务回滚 \n\n   参与者接收到abort请求之后，利用其在阶段二记录的undo信息来执行事务的回滚操作，并在完成回滚之后释放所有的事务资源。\n\n3. 反馈结果 \n\n   参与者完成事务回滚之后，向协调者发送ACK消息\n\n4. 中断事务 \n\n   协调者接收到参与者反馈的ACK消息之后，执行事务的中断。\n\n#### 三、补偿事务（TCC）\n\nTCC 其实就是采用的补偿机制，其核心思想是：针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作。它分为三个阶段：\n\n* Try 阶段主要是对业务系统做检测及资源预留\n* Confirm 阶段主要是对业务系统做确认提交，Try阶段执行成功并开始执行 Confirm阶段时，默认 Confirm阶段是不会出错的。即：只要Try成功，Confirm一定成功。\n* Cancel 阶段主要是在业务执行错误，需要回滚的状态下执行的业务取消，预留资源释放。\n\n举个例子，假入 Bob 要向 Smith 转账，思路大概是：\n我们有一个本地方法，里面依次调用\n1、首先在 Try 阶段，要先调用远程接口把 Smith 和 Bob 的钱给冻结起来。\n2、在 Confirm 阶段，执行远程调用的转账的操作，转账成功进行解冻。\n3、如果第2步执行成功，那么转账成功，如果第二步执行失败，则调用远程冻结接口对应的解冻方法 (Cancel)。\n\n**优点：** 跟2PC比起来，实现以及流程相对简单了一些，但数据的一致性比2PC也要差一些\n\n**缺点：** 缺点还是比较明显的，在2, 3步中都有可能失败。TCC属于应用层的一种补偿方式，所以需要程序员在实现的时候多写很多补偿的代码，在一些场景中，一些业务流程可能用TCC不太好定义及处理\n\n#### 四、本地消息表（异步确保）\n\n本地消息表这种实现方式应该是业界使用最多的，其核心思想是将分布式事务拆分成本地事务进行处理，这种思路是来源于ebay。我们可以从下面的流程图中看出其中的一些细节：\n\n![](.\\img\\250417-20171016141237443-2074834323.png)\n\n**基本思路：**\n\n消息生产方，需要额外建一个消息表，并记录消息发送状态。消息表和业务数据要在一个事务里提交，也就是说他们要在一个数据库里面。然后消息会经过MQ发送到消息的消费方。如果消息发送失败，会进行重试发送。\n\n消息消费方，需要处理这个消息，并完成自己的业务逻辑。此时如果本地事务处理成功，表明已经处理成功了，如果处理失败，那么就会重试执行。如果是业务上面的失败，可以给生产方发送一个业务补偿消息，通知生产方进行回滚等操作。\n\n生产方和消费方定时扫描本地消息表，把还没处理完成的消息或者失败的消息再发送一遍。如果有靠谱的自动对账补账逻辑，这种方案还是非常实用的。\n\n这种方案遵循BASE理论，采用的是最终一致性，笔者认为是这几种方案里面比较适合实际业务场景的，即不会出现像2PC那样复杂的实现(当调用链很长的时候，2PC的可用性是非常低的)，也不会像TCC那样可能出现确认或者回滚不了的情况。\n\n**优点：** 一种非常经典的实现，避免了分布式事务，实现了最终一致性。在 . NET中 有现成的解决方案。\n\n**缺点：** 消息表会耦合到业务系统中，如果没有封装好的解决方案，会有很多杂活需要处理\n\n#### 五、MQ 事务消息\n\n有一些第三方的MQ是支持事务消息的，比如RocketMQ，他们支持事务消息的方式也是类似于采用的二阶段提交，但是市面上一些主流的MQ都是不支持事务消息的，比如 RabbitMQ 和 Kafka 都不支持。\n\n以阿里的 RocketMQ 中间件为例，其思路大致为：\n\n第一阶段Prepared消息，会拿到消息的地址。\n第二阶段执行本地事务，第三阶段通过第一阶段拿到的地址去访问消息，并修改状态。\n\n也就是说在业务方法内要想消息队列提交两次请求，一次发送消息和一次确认消息。如果确认消息发送失败了RocketMQ会定期扫描消息集群中的事务消息，这时候发现了Prepared消息，它会向消息发送者确认，所以生产方需要实现一个check接口，RocketMQ会根据发送端设置的策略来决定是回滚还是继续发送确认消息。这样就保证了消息发送与本地事务同时成功或同时失败。\n\n![](.\\img\\250417-20171016203840240-13953078.png)\n\n遗憾的是，RocketMQ并没有 . NET 客户端。有关 RocketMQ的更多消息，大家可以查看[这篇博客](http://www.jianshu.com/p/453c6e7ff81c)\n\n**优点：** 实现了最终一致性，不需要依赖本地数据库事务。\n\n**缺点：** 实现难度大，主流MQ不支持，没有. NET客户端，RocketMQ事务消息部分代码也未开源。\n\n#### 六、Sagas 事务模型\n\nSaga事务模型又叫做长时间运行的事务（Long-running-transaction）, 它是由普林斯顿大学的H. Garcia-Molina等人提出，它描述的是另外一种在没有两阶段提交的的情况下解决分布式系统中复杂的业务事务问题。你可以在[这里](https://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf)看到 Sagas 相关论文。\n\n我们这里说的是一种基于 Sagas 机制的工作流事务模型，这个模型的相关理论目前来说还是比较新的，以至于百度上几乎没有什么相关资料。\n\n该模型其核心思想就是拆分分布式系统中的长事务为多个短事务，或者叫多个本地事务，然后由 Sagas 工作流引擎负责协调，如果整个流程正常结束，那么就算是业务成功完成，如果在这过程中实现失败，那么Sagas工作流引擎就会以相反的顺序调用补偿操作，重新进行业务回滚。\n\n比如我们一次关于购买旅游套餐业务操作涉及到三个操作，他们分别是预定车辆，预定宾馆，预定机票，他们分别属于三个不同的远程接口。可能从我们程序的角度来说他们不属于一个事务，但是从业务角度来说是属于同一个事务的。\n\n![](.\\img\\250417-20171016220040115-805407978.png)\n\n他们的执行顺序如上图所示，所以当发生失败时，会依次进行取消的补偿操作。\n\n因为长事务被拆分了很多个业务流，所以 Sagas 事务模型最重要的一个部件就是工作流或者你也可以叫流程管理器（Process Manager），工作流引擎和Process Manager虽然不是同一个东西，但是在这里，他们的职责是相同的。目前市面上还没有什么解决方案，即使是 Java 领域，也没有搜索的太多有用的信息。\n","slug":"分布式事务","published":1,"updated":"2021-04-22T09:19:34.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcz9e001wko9blu7kekg4","content":"<h1 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h1><h2 id=\"分布式理论\"><a href=\"#分布式理论\" class=\"headerlink\" title=\"分布式理论\"></a>分布式理论</h2><p>当我们的单个数据库的性能产生瓶颈的时候，我们可能会对数据库进行分区，这里所说的分区指的是物理分区，分区之后可能不同的库就处于不同的服务器上了，这个时候单个数据库的ACID已经不能适应这种情况了，而在这种ACID的集群环境下，再想保证集群的ACID几乎是很难达到，或者即使能达到那么效率和性能会大幅下降，最为关键的是再很难扩展新的分区了，这个时候如果再追求集群的ACID会导致我们的系统变得很差，这时我们就需要引入一个新的理论原则来适应这种集群的情况，就是 CAP 原则或者叫CAP定理，那么CAP定理指的是什么呢？</p>\n<h4 id=\"CAP定理\"><a href=\"#CAP定理\" class=\"headerlink\" title=\"CAP定理\"></a>CAP定理</h4><p>CAP定理是由加州大学伯克利分校Eric Brewer教授提出来的，他指出WEB服务无法同时满足一下3个属性：</p>\n<ul>\n<li><p>一致性(Consistency) ： 客户端知道一系列的操作都会同时发生(生效)</p>\n</li>\n<li><p>可用性(Availability) ： 每个操作都必须以可预期的响应结束</p>\n</li>\n<li><p>分区容错性(Partition tolerance) ： 即使出现单个组件无法可用, 操作依然可以完成</p>\n</li>\n</ul>\n<p>具体地讲在分布式系统中，在任何数据库设计中，一个Web应用至多只能同时支持上面的两个属性。显然，任何横向扩展策略都要依赖于数据分区。因此，设计人员必须在一致性与可用性之间做出选择。</p>\n<h4 id=\"数据库分布式事务有了解的同学一定知道数据库支持的2PC，又叫做-XA-Transactions。\"><a href=\"#数据库分布式事务有了解的同学一定知道数据库支持的2PC，又叫做-XA-Transactions。\" class=\"headerlink\" title=\"数据库分布式事务有了解的同学一定知道数据库支持的2PC，又叫做 XA Transactions。\"></a>数据库分布式事务有了解的同学一定知道数据库支持的2PC，又叫做 XA Transactions。</h4><pre><code>MySQL从5.5版本开始支持，SQL Server 2005 开始支持，Oracle 7 开始支持。</code></pre><p>其中，XA 是一个两阶段提交协议，该协议分为以下两个阶段：</p>\n<ul>\n<li><p>第一阶段：事务协调器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是否可以提交.</p>\n</li>\n<li><p>第二阶段：事务协调器要求每个数据库提交数据。</p>\n</li>\n</ul>\n<h4 id=\"BASE理论\"><a href=\"#BASE理论\" class=\"headerlink\" title=\"BASE理论\"></a>BASE理论</h4><p>在分布式系统中，我们往往追求的是可用性，它的重要程序比一致性要高，那么如何实现高可用性呢？ 前人已经给我们提出来了另外一个理论，就是BASE理论，它是用来对CAP定理进行进一步扩充的。BASE理论指的是：</p>\n<ul>\n<li><p>Basically Available（基本可用）</p>\n</li>\n<li><p>Soft state（软状态）</p>\n</li>\n<li><p>Eventually consistent（最终一致性）</p>\n</li>\n</ul>\n<p>BASE理论是对CAP中的一致性和可用性进行一个权衡的结果，理论的核心思想就是：<strong>我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性</strong>（Eventual consistency）。</p>\n<hr>\n<h2 id=\"分布式事务-1\"><a href=\"#分布式事务-1\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h2><p>在分布式系统中，要实现分布式事务，无外乎那几种解决方案。</p>\n<h4 id=\"一、两阶段提交（2PC）\"><a href=\"#一、两阶段提交（2PC）\" class=\"headerlink\" title=\"一、两阶段提交（2PC）\"></a>一、两阶段提交（2PC）</h4><p>和上一节中提到的数据库XA事务一样，两阶段提交就是使用XA协议的原理，我们可以从下面这个图的流程来很容易的看出中间的一些比如commit和abort的细节。</p>\n<p><img src=\".%5Cimg%5C250417-20171016132145537-970496141.png\" alt></p>\n<p>两阶段提交这种解决方案属于牺牲了一部分可用性来换取的一致性。在实现方面，在 . NET 中，可以借助 TransactionScop 提供的 API 来编程实现分布式系统中的两阶段提交，比如WCF中就有实现这部分功能。不过在多服务器之间，需要依赖于DTC来完成事务一致性，Windows下微软搞的有MSDTC服务，Linux下就比较悲剧了。</p>\n<p>另外说一句，TransactionScop 默认不能用于异步方法之间事务一致，因为事务上下文是存储于当前线程中的，所以如果是在异步方法，需要显式的传递事务上下文。</p>\n<p><strong>优点：</strong> 尽量保证了数据的强一致，适合对数据强一致要求很高的关键领域。（其实也不能100%保证强一致）</p>\n<p><strong>缺点：</strong> 实现复杂，牺牲了可用性，对性能影响较大，不适合高并发高性能场景，如果分布式系统跨接口调用，目前 . NET 界还没有实现方案。</p>\n<h4 id=\"二、三阶段提交协议-3PC\"><a href=\"#二、三阶段提交协议-3PC\" class=\"headerlink\" title=\"二、三阶段提交协议 3PC\"></a>二、三阶段提交协议 3PC</h4><p>与两阶段提交不同的是，三阶段提交有两个改动点。</p>\n<ul>\n<li>引入超时机制。同时在协调者和参与者中都引入超时机制。</li>\n<li>在第一阶段和第二阶段中插入一个准备阶段。保证了在最后提交阶段之前各参与节点的状态是一致的。 </li>\n</ul>\n<p>也就是说，除了引入超时机制之外，3PC把2PC的准备阶段再次一分为二，这样三阶段提交就有CanCommit、PreCommit、DoCommit三个阶段。</p>\n<h4 id=\"1-CanCommit阶段\"><a href=\"#1-CanCommit阶段\" class=\"headerlink\" title=\"1. CanCommit阶段\"></a>1. CanCommit阶段</h4><p>3PC的CanCommit阶段其实和2PC的准备阶段很像。协调者向参与者发送commit请求，参与者如果可以提交就返回Yes响应，否则返回No响应。</p>\n<ol>\n<li><p>事务询问 </p>\n<p>  协调者向参与者发送CanCommit请求。询问是否可以执行事务提交操作。然后开始等待参与者的响应。</p>\n</li>\n<li><p>响应反馈 </p>\n<p>  参与者接到CanCommit请求之后，正常情况下，如果其自身认为可以顺利执行事务，则返回Yes响应，并进入预备状态。否则反馈No</p>\n</li>\n</ol>\n<h4 id=\"2-PreCommit阶段\"><a href=\"#2-PreCommit阶段\" class=\"headerlink\" title=\"2. PreCommit阶段\"></a>2. PreCommit阶段</h4><p>协调者根据参与者的反应情况来决定是否可以记性事务的PreCommit操作。根据响应情况，有以下两种可能。<br>假如协调者从所有的参与者获得的反馈都是Yes响应，那么就会执行事务的预执行。</p>\n<ol>\n<li><p>发送预提交请求 </p>\n<p>协调者向参与者发送PreCommit请求，并进入Prepared阶段。</p>\n</li>\n<li><p>事务预提交 </p>\n<p>参与者接收到PreCommit请求后，会执行事务操作，并将undo和redo信息记录到事务日志中。</p>\n</li>\n<li><p>响应反馈 </p>\n<p>如果参与者成功的执行了事务操作，则返回ACK响应，同时开始等待最终指令。</p>\n</li>\n</ol>\n<p>假如有任何一个参与者向协调者发送了No响应，或者等待超时之后，协调者都没有接到参与者的响应，那么就执行事务的中断。</p>\n<ol>\n<li><p>发送中断请求 </p>\n<p>协调者向所有参与者发送abort请求。</p>\n</li>\n<li><p>中断事务 </p>\n<p>参与者收到来自协调者的abort请求之后（或超时之后，仍未收到协调者的请求），执行事务的中断。</p>\n</li>\n</ol>\n<h4 id=\"3-doCommit阶段\"><a href=\"#3-doCommit阶段\" class=\"headerlink\" title=\"3. doCommit阶段\"></a>3. doCommit阶段</h4><p>该阶段进行真正的事务提交，也可以分为以下两种情况。</p>\n<p>该阶段进行真正的事务提交，也可以分为以下两种情况。</p>\n<p>3.1 执行提交</p>\n<ol>\n<li><p>发送提交请求 </p>\n<p>协调接收到参与者发送的ACK响应，那么他将从预提交状态进入到提交状态。并向所有参与者发送doCommit请求。</p>\n</li>\n<li><p>事务提交 </p>\n</li>\n</ol>\n<p>参与者接收到doCommit请求之后，执行正式的事务提交。并在完成事务提交之后释放所有事务资源。</p>\n<ol start=\"3\">\n<li><p>响应反馈 </p>\n<p> 事务提交完之后，向协调者发送Ack响应。</p>\n</li>\n<li><p>完成事务 </p>\n<p> 协调者接收到所有参与者的ack响应之后，完成事务。</p>\n</li>\n</ol>\n<p>3.2 中断事务<br>协调者没有接收到参与者发送的ACK响应（可能是接受者发送的不是ACK响应，也可能响应超时），那么就会执行中断事务。</p>\n<ol>\n<li><p>发送中断请求 </p>\n<p>协调者向所有参与者发送abort请求</p>\n</li>\n<li><p>事务回滚 </p>\n<p>参与者接收到abort请求之后，利用其在阶段二记录的undo信息来执行事务的回滚操作，并在完成回滚之后释放所有的事务资源。</p>\n</li>\n<li><p>反馈结果 </p>\n<p>参与者完成事务回滚之后，向协调者发送ACK消息</p>\n</li>\n<li><p>中断事务 </p>\n<p>协调者接收到参与者反馈的ACK消息之后，执行事务的中断。</p>\n</li>\n</ol>\n<h4 id=\"三、补偿事务（TCC）\"><a href=\"#三、补偿事务（TCC）\" class=\"headerlink\" title=\"三、补偿事务（TCC）\"></a>三、补偿事务（TCC）</h4><p>TCC 其实就是采用的补偿机制，其核心思想是：针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作。它分为三个阶段：</p>\n<ul>\n<li>Try 阶段主要是对业务系统做检测及资源预留</li>\n<li>Confirm 阶段主要是对业务系统做确认提交，Try阶段执行成功并开始执行 Confirm阶段时，默认 Confirm阶段是不会出错的。即：只要Try成功，Confirm一定成功。</li>\n<li>Cancel 阶段主要是在业务执行错误，需要回滚的状态下执行的业务取消，预留资源释放。</li>\n</ul>\n<p>举个例子，假入 Bob 要向 Smith 转账，思路大概是：<br>我们有一个本地方法，里面依次调用<br>1、首先在 Try 阶段，要先调用远程接口把 Smith 和 Bob 的钱给冻结起来。<br>2、在 Confirm 阶段，执行远程调用的转账的操作，转账成功进行解冻。<br>3、如果第2步执行成功，那么转账成功，如果第二步执行失败，则调用远程冻结接口对应的解冻方法 (Cancel)。</p>\n<p><strong>优点：</strong> 跟2PC比起来，实现以及流程相对简单了一些，但数据的一致性比2PC也要差一些</p>\n<p><strong>缺点：</strong> 缺点还是比较明显的，在2, 3步中都有可能失败。TCC属于应用层的一种补偿方式，所以需要程序员在实现的时候多写很多补偿的代码，在一些场景中，一些业务流程可能用TCC不太好定义及处理</p>\n<h4 id=\"四、本地消息表（异步确保）\"><a href=\"#四、本地消息表（异步确保）\" class=\"headerlink\" title=\"四、本地消息表（异步确保）\"></a>四、本地消息表（异步确保）</h4><p>本地消息表这种实现方式应该是业界使用最多的，其核心思想是将分布式事务拆分成本地事务进行处理，这种思路是来源于ebay。我们可以从下面的流程图中看出其中的一些细节：</p>\n<p><img src=\".%5Cimg%5C250417-20171016141237443-2074834323.png\" alt></p>\n<p><strong>基本思路：</strong></p>\n<p>消息生产方，需要额外建一个消息表，并记录消息发送状态。消息表和业务数据要在一个事务里提交，也就是说他们要在一个数据库里面。然后消息会经过MQ发送到消息的消费方。如果消息发送失败，会进行重试发送。</p>\n<p>消息消费方，需要处理这个消息，并完成自己的业务逻辑。此时如果本地事务处理成功，表明已经处理成功了，如果处理失败，那么就会重试执行。如果是业务上面的失败，可以给生产方发送一个业务补偿消息，通知生产方进行回滚等操作。</p>\n<p>生产方和消费方定时扫描本地消息表，把还没处理完成的消息或者失败的消息再发送一遍。如果有靠谱的自动对账补账逻辑，这种方案还是非常实用的。</p>\n<p>这种方案遵循BASE理论，采用的是最终一致性，笔者认为是这几种方案里面比较适合实际业务场景的，即不会出现像2PC那样复杂的实现(当调用链很长的时候，2PC的可用性是非常低的)，也不会像TCC那样可能出现确认或者回滚不了的情况。</p>\n<p><strong>优点：</strong> 一种非常经典的实现，避免了分布式事务，实现了最终一致性。在 . NET中 有现成的解决方案。</p>\n<p><strong>缺点：</strong> 消息表会耦合到业务系统中，如果没有封装好的解决方案，会有很多杂活需要处理</p>\n<h4 id=\"五、MQ-事务消息\"><a href=\"#五、MQ-事务消息\" class=\"headerlink\" title=\"五、MQ 事务消息\"></a>五、MQ 事务消息</h4><p>有一些第三方的MQ是支持事务消息的，比如RocketMQ，他们支持事务消息的方式也是类似于采用的二阶段提交，但是市面上一些主流的MQ都是不支持事务消息的，比如 RabbitMQ 和 Kafka 都不支持。</p>\n<p>以阿里的 RocketMQ 中间件为例，其思路大致为：</p>\n<p>第一阶段Prepared消息，会拿到消息的地址。<br>第二阶段执行本地事务，第三阶段通过第一阶段拿到的地址去访问消息，并修改状态。</p>\n<p>也就是说在业务方法内要想消息队列提交两次请求，一次发送消息和一次确认消息。如果确认消息发送失败了RocketMQ会定期扫描消息集群中的事务消息，这时候发现了Prepared消息，它会向消息发送者确认，所以生产方需要实现一个check接口，RocketMQ会根据发送端设置的策略来决定是回滚还是继续发送确认消息。这样就保证了消息发送与本地事务同时成功或同时失败。</p>\n<p><img src=\".%5Cimg%5C250417-20171016203840240-13953078.png\" alt></p>\n<p>遗憾的是，RocketMQ并没有 . NET 客户端。有关 RocketMQ的更多消息，大家可以查看<a href=\"http://www.jianshu.com/p/453c6e7ff81c\" target=\"_blank\" rel=\"noopener\">这篇博客</a></p>\n<p><strong>优点：</strong> 实现了最终一致性，不需要依赖本地数据库事务。</p>\n<p><strong>缺点：</strong> 实现难度大，主流MQ不支持，没有. NET客户端，RocketMQ事务消息部分代码也未开源。</p>\n<h4 id=\"六、Sagas-事务模型\"><a href=\"#六、Sagas-事务模型\" class=\"headerlink\" title=\"六、Sagas 事务模型\"></a>六、Sagas 事务模型</h4><p>Saga事务模型又叫做长时间运行的事务（Long-running-transaction）, 它是由普林斯顿大学的H. Garcia-Molina等人提出，它描述的是另外一种在没有两阶段提交的的情况下解决分布式系统中复杂的业务事务问题。你可以在<a href=\"https://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf\" target=\"_blank\" rel=\"noopener\">这里</a>看到 Sagas 相关论文。</p>\n<p>我们这里说的是一种基于 Sagas 机制的工作流事务模型，这个模型的相关理论目前来说还是比较新的，以至于百度上几乎没有什么相关资料。</p>\n<p>该模型其核心思想就是拆分分布式系统中的长事务为多个短事务，或者叫多个本地事务，然后由 Sagas 工作流引擎负责协调，如果整个流程正常结束，那么就算是业务成功完成，如果在这过程中实现失败，那么Sagas工作流引擎就会以相反的顺序调用补偿操作，重新进行业务回滚。</p>\n<p>比如我们一次关于购买旅游套餐业务操作涉及到三个操作，他们分别是预定车辆，预定宾馆，预定机票，他们分别属于三个不同的远程接口。可能从我们程序的角度来说他们不属于一个事务，但是从业务角度来说是属于同一个事务的。</p>\n<p><img src=\".%5Cimg%5C250417-20171016220040115-805407978.png\" alt></p>\n<p>他们的执行顺序如上图所示，所以当发生失败时，会依次进行取消的补偿操作。</p>\n<p>因为长事务被拆分了很多个业务流，所以 Sagas 事务模型最重要的一个部件就是工作流或者你也可以叫流程管理器（Process Manager），工作流引擎和Process Manager虽然不是同一个东西，但是在这里，他们的职责是相同的。目前市面上还没有什么解决方案，即使是 Java 领域，也没有搜索的太多有用的信息。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h1><h2 id=\"分布式理论\"><a href=\"#分布式理论\" class=\"headerlink\" title=\"分布式理论\"></a>分布式理论</h2><p>当我们的单个数据库的性能产生瓶颈的时候，我们可能会对数据库进行分区，这里所说的分区指的是物理分区，分区之后可能不同的库就处于不同的服务器上了，这个时候单个数据库的ACID已经不能适应这种情况了，而在这种ACID的集群环境下，再想保证集群的ACID几乎是很难达到，或者即使能达到那么效率和性能会大幅下降，最为关键的是再很难扩展新的分区了，这个时候如果再追求集群的ACID会导致我们的系统变得很差，这时我们就需要引入一个新的理论原则来适应这种集群的情况，就是 CAP 原则或者叫CAP定理，那么CAP定理指的是什么呢？</p>\n<h4 id=\"CAP定理\"><a href=\"#CAP定理\" class=\"headerlink\" title=\"CAP定理\"></a>CAP定理</h4><p>CAP定理是由加州大学伯克利分校Eric Brewer教授提出来的，他指出WEB服务无法同时满足一下3个属性：</p>\n<ul>\n<li><p>一致性(Consistency) ： 客户端知道一系列的操作都会同时发生(生效)</p>\n</li>\n<li><p>可用性(Availability) ： 每个操作都必须以可预期的响应结束</p>\n</li>\n<li><p>分区容错性(Partition tolerance) ： 即使出现单个组件无法可用, 操作依然可以完成</p>\n</li>\n</ul>\n<p>具体地讲在分布式系统中，在任何数据库设计中，一个Web应用至多只能同时支持上面的两个属性。显然，任何横向扩展策略都要依赖于数据分区。因此，设计人员必须在一致性与可用性之间做出选择。</p>\n<h4 id=\"数据库分布式事务有了解的同学一定知道数据库支持的2PC，又叫做-XA-Transactions。\"><a href=\"#数据库分布式事务有了解的同学一定知道数据库支持的2PC，又叫做-XA-Transactions。\" class=\"headerlink\" title=\"数据库分布式事务有了解的同学一定知道数据库支持的2PC，又叫做 XA Transactions。\"></a>数据库分布式事务有了解的同学一定知道数据库支持的2PC，又叫做 XA Transactions。</h4><pre><code>MySQL从5.5版本开始支持，SQL Server 2005 开始支持，Oracle 7 开始支持。</code></pre><p>其中，XA 是一个两阶段提交协议，该协议分为以下两个阶段：</p>\n<ul>\n<li><p>第一阶段：事务协调器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是否可以提交.</p>\n</li>\n<li><p>第二阶段：事务协调器要求每个数据库提交数据。</p>\n</li>\n</ul>\n<h4 id=\"BASE理论\"><a href=\"#BASE理论\" class=\"headerlink\" title=\"BASE理论\"></a>BASE理论</h4><p>在分布式系统中，我们往往追求的是可用性，它的重要程序比一致性要高，那么如何实现高可用性呢？ 前人已经给我们提出来了另外一个理论，就是BASE理论，它是用来对CAP定理进行进一步扩充的。BASE理论指的是：</p>\n<ul>\n<li><p>Basically Available（基本可用）</p>\n</li>\n<li><p>Soft state（软状态）</p>\n</li>\n<li><p>Eventually consistent（最终一致性）</p>\n</li>\n</ul>\n<p>BASE理论是对CAP中的一致性和可用性进行一个权衡的结果，理论的核心思想就是：<strong>我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性</strong>（Eventual consistency）。</p>\n<hr>\n<h2 id=\"分布式事务-1\"><a href=\"#分布式事务-1\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h2><p>在分布式系统中，要实现分布式事务，无外乎那几种解决方案。</p>\n<h4 id=\"一、两阶段提交（2PC）\"><a href=\"#一、两阶段提交（2PC）\" class=\"headerlink\" title=\"一、两阶段提交（2PC）\"></a>一、两阶段提交（2PC）</h4><p>和上一节中提到的数据库XA事务一样，两阶段提交就是使用XA协议的原理，我们可以从下面这个图的流程来很容易的看出中间的一些比如commit和abort的细节。</p>\n<p><img src=\".%5Cimg%5C250417-20171016132145537-970496141.png\" alt></p>\n<p>两阶段提交这种解决方案属于牺牲了一部分可用性来换取的一致性。在实现方面，在 . NET 中，可以借助 TransactionScop 提供的 API 来编程实现分布式系统中的两阶段提交，比如WCF中就有实现这部分功能。不过在多服务器之间，需要依赖于DTC来完成事务一致性，Windows下微软搞的有MSDTC服务，Linux下就比较悲剧了。</p>\n<p>另外说一句，TransactionScop 默认不能用于异步方法之间事务一致，因为事务上下文是存储于当前线程中的，所以如果是在异步方法，需要显式的传递事务上下文。</p>\n<p><strong>优点：</strong> 尽量保证了数据的强一致，适合对数据强一致要求很高的关键领域。（其实也不能100%保证强一致）</p>\n<p><strong>缺点：</strong> 实现复杂，牺牲了可用性，对性能影响较大，不适合高并发高性能场景，如果分布式系统跨接口调用，目前 . NET 界还没有实现方案。</p>\n<h4 id=\"二、三阶段提交协议-3PC\"><a href=\"#二、三阶段提交协议-3PC\" class=\"headerlink\" title=\"二、三阶段提交协议 3PC\"></a>二、三阶段提交协议 3PC</h4><p>与两阶段提交不同的是，三阶段提交有两个改动点。</p>\n<ul>\n<li>引入超时机制。同时在协调者和参与者中都引入超时机制。</li>\n<li>在第一阶段和第二阶段中插入一个准备阶段。保证了在最后提交阶段之前各参与节点的状态是一致的。 </li>\n</ul>\n<p>也就是说，除了引入超时机制之外，3PC把2PC的准备阶段再次一分为二，这样三阶段提交就有CanCommit、PreCommit、DoCommit三个阶段。</p>\n<h4 id=\"1-CanCommit阶段\"><a href=\"#1-CanCommit阶段\" class=\"headerlink\" title=\"1. CanCommit阶段\"></a>1. CanCommit阶段</h4><p>3PC的CanCommit阶段其实和2PC的准备阶段很像。协调者向参与者发送commit请求，参与者如果可以提交就返回Yes响应，否则返回No响应。</p>\n<ol>\n<li><p>事务询问 </p>\n<p>  协调者向参与者发送CanCommit请求。询问是否可以执行事务提交操作。然后开始等待参与者的响应。</p>\n</li>\n<li><p>响应反馈 </p>\n<p>  参与者接到CanCommit请求之后，正常情况下，如果其自身认为可以顺利执行事务，则返回Yes响应，并进入预备状态。否则反馈No</p>\n</li>\n</ol>\n<h4 id=\"2-PreCommit阶段\"><a href=\"#2-PreCommit阶段\" class=\"headerlink\" title=\"2. PreCommit阶段\"></a>2. PreCommit阶段</h4><p>协调者根据参与者的反应情况来决定是否可以记性事务的PreCommit操作。根据响应情况，有以下两种可能。<br>假如协调者从所有的参与者获得的反馈都是Yes响应，那么就会执行事务的预执行。</p>\n<ol>\n<li><p>发送预提交请求 </p>\n<p>协调者向参与者发送PreCommit请求，并进入Prepared阶段。</p>\n</li>\n<li><p>事务预提交 </p>\n<p>参与者接收到PreCommit请求后，会执行事务操作，并将undo和redo信息记录到事务日志中。</p>\n</li>\n<li><p>响应反馈 </p>\n<p>如果参与者成功的执行了事务操作，则返回ACK响应，同时开始等待最终指令。</p>\n</li>\n</ol>\n<p>假如有任何一个参与者向协调者发送了No响应，或者等待超时之后，协调者都没有接到参与者的响应，那么就执行事务的中断。</p>\n<ol>\n<li><p>发送中断请求 </p>\n<p>协调者向所有参与者发送abort请求。</p>\n</li>\n<li><p>中断事务 </p>\n<p>参与者收到来自协调者的abort请求之后（或超时之后，仍未收到协调者的请求），执行事务的中断。</p>\n</li>\n</ol>\n<h4 id=\"3-doCommit阶段\"><a href=\"#3-doCommit阶段\" class=\"headerlink\" title=\"3. doCommit阶段\"></a>3. doCommit阶段</h4><p>该阶段进行真正的事务提交，也可以分为以下两种情况。</p>\n<p>该阶段进行真正的事务提交，也可以分为以下两种情况。</p>\n<p>3.1 执行提交</p>\n<ol>\n<li><p>发送提交请求 </p>\n<p>协调接收到参与者发送的ACK响应，那么他将从预提交状态进入到提交状态。并向所有参与者发送doCommit请求。</p>\n</li>\n<li><p>事务提交 </p>\n</li>\n</ol>\n<p>参与者接收到doCommit请求之后，执行正式的事务提交。并在完成事务提交之后释放所有事务资源。</p>\n<ol start=\"3\">\n<li><p>响应反馈 </p>\n<p> 事务提交完之后，向协调者发送Ack响应。</p>\n</li>\n<li><p>完成事务 </p>\n<p> 协调者接收到所有参与者的ack响应之后，完成事务。</p>\n</li>\n</ol>\n<p>3.2 中断事务<br>协调者没有接收到参与者发送的ACK响应（可能是接受者发送的不是ACK响应，也可能响应超时），那么就会执行中断事务。</p>\n<ol>\n<li><p>发送中断请求 </p>\n<p>协调者向所有参与者发送abort请求</p>\n</li>\n<li><p>事务回滚 </p>\n<p>参与者接收到abort请求之后，利用其在阶段二记录的undo信息来执行事务的回滚操作，并在完成回滚之后释放所有的事务资源。</p>\n</li>\n<li><p>反馈结果 </p>\n<p>参与者完成事务回滚之后，向协调者发送ACK消息</p>\n</li>\n<li><p>中断事务 </p>\n<p>协调者接收到参与者反馈的ACK消息之后，执行事务的中断。</p>\n</li>\n</ol>\n<h4 id=\"三、补偿事务（TCC）\"><a href=\"#三、补偿事务（TCC）\" class=\"headerlink\" title=\"三、补偿事务（TCC）\"></a>三、补偿事务（TCC）</h4><p>TCC 其实就是采用的补偿机制，其核心思想是：针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作。它分为三个阶段：</p>\n<ul>\n<li>Try 阶段主要是对业务系统做检测及资源预留</li>\n<li>Confirm 阶段主要是对业务系统做确认提交，Try阶段执行成功并开始执行 Confirm阶段时，默认 Confirm阶段是不会出错的。即：只要Try成功，Confirm一定成功。</li>\n<li>Cancel 阶段主要是在业务执行错误，需要回滚的状态下执行的业务取消，预留资源释放。</li>\n</ul>\n<p>举个例子，假入 Bob 要向 Smith 转账，思路大概是：<br>我们有一个本地方法，里面依次调用<br>1、首先在 Try 阶段，要先调用远程接口把 Smith 和 Bob 的钱给冻结起来。<br>2、在 Confirm 阶段，执行远程调用的转账的操作，转账成功进行解冻。<br>3、如果第2步执行成功，那么转账成功，如果第二步执行失败，则调用远程冻结接口对应的解冻方法 (Cancel)。</p>\n<p><strong>优点：</strong> 跟2PC比起来，实现以及流程相对简单了一些，但数据的一致性比2PC也要差一些</p>\n<p><strong>缺点：</strong> 缺点还是比较明显的，在2, 3步中都有可能失败。TCC属于应用层的一种补偿方式，所以需要程序员在实现的时候多写很多补偿的代码，在一些场景中，一些业务流程可能用TCC不太好定义及处理</p>\n<h4 id=\"四、本地消息表（异步确保）\"><a href=\"#四、本地消息表（异步确保）\" class=\"headerlink\" title=\"四、本地消息表（异步确保）\"></a>四、本地消息表（异步确保）</h4><p>本地消息表这种实现方式应该是业界使用最多的，其核心思想是将分布式事务拆分成本地事务进行处理，这种思路是来源于ebay。我们可以从下面的流程图中看出其中的一些细节：</p>\n<p><img src=\".%5Cimg%5C250417-20171016141237443-2074834323.png\" alt></p>\n<p><strong>基本思路：</strong></p>\n<p>消息生产方，需要额外建一个消息表，并记录消息发送状态。消息表和业务数据要在一个事务里提交，也就是说他们要在一个数据库里面。然后消息会经过MQ发送到消息的消费方。如果消息发送失败，会进行重试发送。</p>\n<p>消息消费方，需要处理这个消息，并完成自己的业务逻辑。此时如果本地事务处理成功，表明已经处理成功了，如果处理失败，那么就会重试执行。如果是业务上面的失败，可以给生产方发送一个业务补偿消息，通知生产方进行回滚等操作。</p>\n<p>生产方和消费方定时扫描本地消息表，把还没处理完成的消息或者失败的消息再发送一遍。如果有靠谱的自动对账补账逻辑，这种方案还是非常实用的。</p>\n<p>这种方案遵循BASE理论，采用的是最终一致性，笔者认为是这几种方案里面比较适合实际业务场景的，即不会出现像2PC那样复杂的实现(当调用链很长的时候，2PC的可用性是非常低的)，也不会像TCC那样可能出现确认或者回滚不了的情况。</p>\n<p><strong>优点：</strong> 一种非常经典的实现，避免了分布式事务，实现了最终一致性。在 . NET中 有现成的解决方案。</p>\n<p><strong>缺点：</strong> 消息表会耦合到业务系统中，如果没有封装好的解决方案，会有很多杂活需要处理</p>\n<h4 id=\"五、MQ-事务消息\"><a href=\"#五、MQ-事务消息\" class=\"headerlink\" title=\"五、MQ 事务消息\"></a>五、MQ 事务消息</h4><p>有一些第三方的MQ是支持事务消息的，比如RocketMQ，他们支持事务消息的方式也是类似于采用的二阶段提交，但是市面上一些主流的MQ都是不支持事务消息的，比如 RabbitMQ 和 Kafka 都不支持。</p>\n<p>以阿里的 RocketMQ 中间件为例，其思路大致为：</p>\n<p>第一阶段Prepared消息，会拿到消息的地址。<br>第二阶段执行本地事务，第三阶段通过第一阶段拿到的地址去访问消息，并修改状态。</p>\n<p>也就是说在业务方法内要想消息队列提交两次请求，一次发送消息和一次确认消息。如果确认消息发送失败了RocketMQ会定期扫描消息集群中的事务消息，这时候发现了Prepared消息，它会向消息发送者确认，所以生产方需要实现一个check接口，RocketMQ会根据发送端设置的策略来决定是回滚还是继续发送确认消息。这样就保证了消息发送与本地事务同时成功或同时失败。</p>\n<p><img src=\".%5Cimg%5C250417-20171016203840240-13953078.png\" alt></p>\n<p>遗憾的是，RocketMQ并没有 . NET 客户端。有关 RocketMQ的更多消息，大家可以查看<a href=\"http://www.jianshu.com/p/453c6e7ff81c\" target=\"_blank\" rel=\"noopener\">这篇博客</a></p>\n<p><strong>优点：</strong> 实现了最终一致性，不需要依赖本地数据库事务。</p>\n<p><strong>缺点：</strong> 实现难度大，主流MQ不支持，没有. NET客户端，RocketMQ事务消息部分代码也未开源。</p>\n<h4 id=\"六、Sagas-事务模型\"><a href=\"#六、Sagas-事务模型\" class=\"headerlink\" title=\"六、Sagas 事务模型\"></a>六、Sagas 事务模型</h4><p>Saga事务模型又叫做长时间运行的事务（Long-running-transaction）, 它是由普林斯顿大学的H. Garcia-Molina等人提出，它描述的是另外一种在没有两阶段提交的的情况下解决分布式系统中复杂的业务事务问题。你可以在<a href=\"https://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf\" target=\"_blank\" rel=\"noopener\">这里</a>看到 Sagas 相关论文。</p>\n<p>我们这里说的是一种基于 Sagas 机制的工作流事务模型，这个模型的相关理论目前来说还是比较新的，以至于百度上几乎没有什么相关资料。</p>\n<p>该模型其核心思想就是拆分分布式系统中的长事务为多个短事务，或者叫多个本地事务，然后由 Sagas 工作流引擎负责协调，如果整个流程正常结束，那么就算是业务成功完成，如果在这过程中实现失败，那么Sagas工作流引擎就会以相反的顺序调用补偿操作，重新进行业务回滚。</p>\n<p>比如我们一次关于购买旅游套餐业务操作涉及到三个操作，他们分别是预定车辆，预定宾馆，预定机票，他们分别属于三个不同的远程接口。可能从我们程序的角度来说他们不属于一个事务，但是从业务角度来说是属于同一个事务的。</p>\n<p><img src=\".%5Cimg%5C250417-20171016220040115-805407978.png\" alt></p>\n<p>他们的执行顺序如上图所示，所以当发生失败时，会依次进行取消的补偿操作。</p>\n<p>因为长事务被拆分了很多个业务流，所以 Sagas 事务模型最重要的一个部件就是工作流或者你也可以叫流程管理器（Process Manager），工作流引擎和Process Manager虽然不是同一个东西，但是在这里，他们的职责是相同的。目前市面上还没有什么解决方案，即使是 Java 领域，也没有搜索的太多有用的信息。</p>\n"},{"title":"原生JDBC","date":"2019-08-09T01:45:17.000Z","_content":"\n# 概述\n\n- JDBC(Java Data Base Connectivity,java数据库连接)是SUN公司开发的,一种用于执行SQL语句的Java API\n- JDBC是Java访问数据库的标准规范，可以为不同的关系型数据库提供统一访问，它由一组用Java语言编写的接口和类组成\n- JDBC需要连接驱动，驱动是两个设备要进行通信，满足一定通信数据格式，数据格式由设备提供商规定，设备提供商为设备提供驱动软件，通过软件可以与该设备进行通信\n\n# JDBC访问数据库的基本步骤\n\n- 加载JDBC驱动程序\n\n- 建立数据库连接\n\n- 创建操作数据库SQL的对象\n\n- 执行语句并分析执行结果\n\n- 关闭连接\n\n# 实例\n\n```java\n        String driverClassName = \"com.mysql.jdbc.Driver\";\n        String url = \"jdbc:oracle:thin:@127.0.0.0:1521:ORCL\";\n        String userName = \"root\";\n        String passWord = \"123456\";\n        try {\n            // 加载驱动\n            Class.forName(driverClassName);\n            //获取连接\n            Connection con = DriverManager.getConnection(url, userName, passWord);\n            String sql = \"select * from SRT_PRINTER b \";\n            //执行sql\n            PreparedStatement statement = con.prepareStatement(sql);\n            //返回结果集\n            ResultSet resultSet = statement.executeQuery();\n            //遍历结果集\n            while (resultSet.next()) {\n                String id = resultSet.getString(\"id\");\n                System.out.println(id);\n            }\n\n            statement.close();\n            resultSet.close();\n            con.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n```\n\n","source":"_posts/原生JDBC.md","raw":"---\ntitle: 原生JDBC\ndate: 2019-08-09 09:45:17\ntags:\n    - 数据库\n---\n\n# 概述\n\n- JDBC(Java Data Base Connectivity,java数据库连接)是SUN公司开发的,一种用于执行SQL语句的Java API\n- JDBC是Java访问数据库的标准规范，可以为不同的关系型数据库提供统一访问，它由一组用Java语言编写的接口和类组成\n- JDBC需要连接驱动，驱动是两个设备要进行通信，满足一定通信数据格式，数据格式由设备提供商规定，设备提供商为设备提供驱动软件，通过软件可以与该设备进行通信\n\n# JDBC访问数据库的基本步骤\n\n- 加载JDBC驱动程序\n\n- 建立数据库连接\n\n- 创建操作数据库SQL的对象\n\n- 执行语句并分析执行结果\n\n- 关闭连接\n\n# 实例\n\n```java\n        String driverClassName = \"com.mysql.jdbc.Driver\";\n        String url = \"jdbc:oracle:thin:@127.0.0.0:1521:ORCL\";\n        String userName = \"root\";\n        String passWord = \"123456\";\n        try {\n            // 加载驱动\n            Class.forName(driverClassName);\n            //获取连接\n            Connection con = DriverManager.getConnection(url, userName, passWord);\n            String sql = \"select * from SRT_PRINTER b \";\n            //执行sql\n            PreparedStatement statement = con.prepareStatement(sql);\n            //返回结果集\n            ResultSet resultSet = statement.executeQuery();\n            //遍历结果集\n            while (resultSet.next()) {\n                String id = resultSet.getString(\"id\");\n                System.out.println(id);\n            }\n\n            statement.close();\n            resultSet.close();\n            con.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n```\n\n","slug":"原生JDBC","published":1,"updated":"2021-04-22T07:34:09.436Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko9xcz9f001yko9bu73t4rbb","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><ul>\n<li>JDBC(Java Data Base Connectivity,java数据库连接)是SUN公司开发的,一种用于执行SQL语句的Java API</li>\n<li>JDBC是Java访问数据库的标准规范，可以为不同的关系型数据库提供统一访问，它由一组用Java语言编写的接口和类组成</li>\n<li>JDBC需要连接驱动，驱动是两个设备要进行通信，满足一定通信数据格式，数据格式由设备提供商规定，设备提供商为设备提供驱动软件，通过软件可以与该设备进行通信</li>\n</ul>\n<h1 id=\"JDBC访问数据库的基本步骤\"><a href=\"#JDBC访问数据库的基本步骤\" class=\"headerlink\" title=\"JDBC访问数据库的基本步骤\"></a>JDBC访问数据库的基本步骤</h1><ul>\n<li><p>加载JDBC驱动程序</p>\n</li>\n<li><p>建立数据库连接</p>\n</li>\n<li><p>创建操作数据库SQL的对象</p>\n</li>\n<li><p>执行语句并分析执行结果</p>\n</li>\n<li><p>关闭连接</p>\n</li>\n</ul>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String driverClassName = <span class=\"string\">\"com.mysql.jdbc.Driver\"</span>;</span><br><span class=\"line\">String url = <span class=\"string\">\"jdbc:oracle:thin:@127.0.0.0:1521:ORCL\"</span>;</span><br><span class=\"line\">String userName = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">String passWord = <span class=\"string\">\"123456\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 加载驱动</span></span><br><span class=\"line\">    Class.forName(driverClassName);</span><br><span class=\"line\">    <span class=\"comment\">//获取连接</span></span><br><span class=\"line\">    Connection con = DriverManager.getConnection(url, userName, passWord);</span><br><span class=\"line\">    String sql = <span class=\"string\">\"select * from SRT_PRINTER b \"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//执行sql</span></span><br><span class=\"line\">    PreparedStatement statement = con.prepareStatement(sql);</span><br><span class=\"line\">    <span class=\"comment\">//返回结果集</span></span><br><span class=\"line\">    ResultSet resultSet = statement.executeQuery();</span><br><span class=\"line\">    <span class=\"comment\">//遍历结果集</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (resultSet.next()) &#123;</span><br><span class=\"line\">        String id = resultSet.getString(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">        System.out.println(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    statement.close();</span><br><span class=\"line\">    resultSet.close();</span><br><span class=\"line\">    con.close();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><ul>\n<li>JDBC(Java Data Base Connectivity,java数据库连接)是SUN公司开发的,一种用于执行SQL语句的Java API</li>\n<li>JDBC是Java访问数据库的标准规范，可以为不同的关系型数据库提供统一访问，它由一组用Java语言编写的接口和类组成</li>\n<li>JDBC需要连接驱动，驱动是两个设备要进行通信，满足一定通信数据格式，数据格式由设备提供商规定，设备提供商为设备提供驱动软件，通过软件可以与该设备进行通信</li>\n</ul>\n<h1 id=\"JDBC访问数据库的基本步骤\"><a href=\"#JDBC访问数据库的基本步骤\" class=\"headerlink\" title=\"JDBC访问数据库的基本步骤\"></a>JDBC访问数据库的基本步骤</h1><ul>\n<li><p>加载JDBC驱动程序</p>\n</li>\n<li><p>建立数据库连接</p>\n</li>\n<li><p>创建操作数据库SQL的对象</p>\n</li>\n<li><p>执行语句并分析执行结果</p>\n</li>\n<li><p>关闭连接</p>\n</li>\n</ul>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String driverClassName = <span class=\"string\">\"com.mysql.jdbc.Driver\"</span>;</span><br><span class=\"line\">String url = <span class=\"string\">\"jdbc:oracle:thin:@127.0.0.0:1521:ORCL\"</span>;</span><br><span class=\"line\">String userName = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">String passWord = <span class=\"string\">\"123456\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 加载驱动</span></span><br><span class=\"line\">    Class.forName(driverClassName);</span><br><span class=\"line\">    <span class=\"comment\">//获取连接</span></span><br><span class=\"line\">    Connection con = DriverManager.getConnection(url, userName, passWord);</span><br><span class=\"line\">    String sql = <span class=\"string\">\"select * from SRT_PRINTER b \"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//执行sql</span></span><br><span class=\"line\">    PreparedStatement statement = con.prepareStatement(sql);</span><br><span class=\"line\">    <span class=\"comment\">//返回结果集</span></span><br><span class=\"line\">    ResultSet resultSet = statement.executeQuery();</span><br><span class=\"line\">    <span class=\"comment\">//遍历结果集</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (resultSet.next()) &#123;</span><br><span class=\"line\">        String id = resultSet.getString(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">        System.out.println(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    statement.close();</span><br><span class=\"line\">    resultSet.close();</span><br><span class=\"line\">    con.close();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cko9xcys00002ko9belulpzju","tag_id":"cko9xcys30004ko9b9rlz0nl1","_id":"cko9xcys70008ko9b6cfnruyk"},{"post_id":"cko9xcys8000ako9b1fmf83ro","tag_id":"cko9xcysa000cko9bj80hk3rk","_id":"cko9xcysc000hko9bxojj1c9z"},{"post_id":"cko9xcysd000iko9b0typc415","tag_id":"cko9xcys30004ko9b9rlz0nl1","_id":"cko9xcyse000lko9bxswkh77j"},{"post_id":"cko9xcysa000dko9bg3scclkv","tag_id":"cko9xcysc000gko9b7ibk3qm8","_id":"cko9xcysf000nko9bnqz8ymzo"},{"post_id":"cko9xcysb000eko9bchjxc2p9","tag_id":"cko9xcyse000kko9bexdq7l7a","_id":"cko9xcysg000qko9bz3wucm9p"},{"post_id":"cko9xcysf000pko9bd4iogr19","tag_id":"cko9xcysc000gko9b7ibk3qm8","_id":"cko9xcysg000sko9bl12kdrek"},{"post_id":"cko9xcysg000rko9b8ofi648n","tag_id":"cko9xcysc000gko9b7ibk3qm8","_id":"cko9xcysh000uko9bhzpduzsj"},{"post_id":"cko9xcysj000yko9bsmr65ogt","tag_id":"cko9xcysl0010ko9b8yzvbig3","_id":"cko9xcysn0015ko9b9pk42dwz"},{"post_id":"cko9xcysl0012ko9bd88ilkqr","tag_id":"cko9xcysn0014ko9b1zw7l94p","_id":"cko9xcysp001ako9b6xl7k9bd"},{"post_id":"cko9xcysn0016ko9bl6ikwtc0","tag_id":"cko9xcysp0019ko9bch70m8uw","_id":"cko9xcysr001eko9bp8w8osg0"},{"post_id":"cko9xcz8y001jko9bww3i1wb4","tag_id":"cko9xcysa000cko9bj80hk3rk","_id":"cko9xcz93001lko9blf9g79tw"},{"post_id":"cko9xcz98001pko9bprgnj3rj","tag_id":"cko9xcysp0019ko9bch70m8uw","_id":"cko9xcz9c001rko9bcre77er1"},{"post_id":"cko9xcz90001kko9bzg24gn4z","tag_id":"cko9xcys30004ko9b9rlz0nl1","_id":"cko9xcz9d001tko9b4cdmq7j1"},{"post_id":"cko9xcz90001kko9bzg24gn4z","tag_id":"cko9xcz96001nko9bz2phkeoh","_id":"cko9xcz9e001vko9bq5e2sy6j"},{"post_id":"cko9xcz9c001sko9b4ii2ur06","tag_id":"cko9xcysc000gko9b7ibk3qm8","_id":"cko9xcz9f001xko9bnn05it3e"},{"post_id":"cko9xcz9e001wko9blu7kekg4","tag_id":"cko9xcysc000gko9b7ibk3qm8","_id":"cko9xcz9g001zko9bo3wxub73"},{"post_id":"cko9xcz9f001yko9bu73t4rbb","tag_id":"cko9xcysc000gko9b7ibk3qm8","_id":"cko9xcz9h0020ko9b7q2jxvfo"}],"Tag":[{"name":"java","_id":"cko9xcys30004ko9b9rlz0nl1"},{"name":"分布式","_id":"cko9xcysa000cko9bj80hk3rk"},{"name":"数据库","_id":"cko9xcysc000gko9b7ibk3qm8"},{"name":"JAVA","_id":"cko9xcyse000kko9bexdq7l7a"},{"name":"消息队列","_id":"cko9xcysl0010ko9b8yzvbig3"},{"name":"中间件","_id":"cko9xcysn0014ko9b1zw7l94p"},{"name":"spring","_id":"cko9xcysp0019ko9bch70m8uw"},{"name":"多线程","_id":"cko9xcz96001nko9bz2phkeoh"}]}}